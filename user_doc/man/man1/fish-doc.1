.\" Man page generated from reStructuredText.
.
.TH "FISH-DOC" "1" "Jul 06, 2021" "3.3" "fish-shell"
.SH NAME
fish-doc \- fish-shell Documentation
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
This is the documentation for \fBfish\fP, the \fBf\fPriendly \fBi\fPnteractive \fBsh\fPell.
.sp
A shell is a program that helps you operate your computer by starting other programs. fish offers a command\-line interface focused on usability and interactive use.
.sp
Unlike other shells, fish does not follow the POSIX standard, but still uses roughly the same model.
.sp
Some of the special features of fish are:
.INDENT 0.0
.IP \(bu 2
\fBExtensive UI\fP: Syntax highlighting, autosuggestions, tab completion and selection lists that can be navigated and filtered.
.IP \(bu 2
\fBNo configuration needed\fP: fish is designed to be ready to use immediately, without requiring extensive configuration.
.IP \(bu 2
\fBEasy scripting\fP: New functions can be added on the fly. The syntax is easy to learn and use.
.UNINDENT
.sp
This page explains how to install and set up fish and where to get more information.
.SH FURTHER READING
.sp
If this is your first time using fish, see the tutorial\&.
.sp
If you are already familiar with other shells like bash and want to see the scripting differences, see Fish For Bash Users\&.
.sp
For a comprehensive overview of fish\(aqs scripting language, see The Fish Language\&.
.sp
For information on using fish interactively, see Interactive use\&.
.SH INSTALLATION AND START
.sp
This section describes how to install, uninstall, start, and exit the fish shell. It also explains how to make fish the default shell.
.SS Installation
.sp
Up\-to\-date instructions for installing the latest version of fish are on the \fI\%fish homepage\fP\&.
.sp
To install the development version of fish, see the instructions on the \fI\%project\(aqs GitHub page\fP\&.
.SS Starting and Exiting
.sp
Once fish has been installed, open a terminal. If fish is not the default shell:
.INDENT 0.0
.IP \(bu 2
Type \fBfish\fP to start a fish shell:
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
> fish
.ft P
.fi
.UNINDENT
.UNINDENT
.IP \(bu 2
Type \fBexit\fP to exit a fish shell:
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
> exit
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.SS Executing Bash
.sp
If fish is your default shell and you want to copy commands from the internet that are written in bash (the default shell on most systems), you can proceed in one of the following two ways:
.INDENT 0.0
.IP \(bu 2
Use the \fBbash\fP command with the \fB\-c\fP switch to read from a string:
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
> bash \-c \(aqsome bash command\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.IP \(bu 2
Use \fBbash\fP without a switch to open a bash shell you can use and \fBexit\fP afterward:
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
> bash
$ some bash command
$ exit
> _
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.SS Default Shell
.sp
To make fish your default shell:
.INDENT 0.0
.IP \(bu 2
Add the line \fB/usr/local/bin/fish\fP to \fB/etc/shells\fP\&.
.IP \(bu 2
Change your default shell with \fBchsh \-s /usr/local/bin/fish\fP\&.
.UNINDENT
.sp
For detailed instructions see Switching to fish\&.
.SS Uninstalling
.sp
For uninstalling fish: see FAQ: Uninstalling fish\&.
.SS Shebang Line
.sp
Because shell scripts are written in many different languages, they need to carry information about which interpreter should be used to execute them. For this, they are expected to have a first line, the shebang line, which names the interpreter executable.
.sp
A script written in \fBbash\fP would need a first line like this:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#!/bin/bash
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
When the shell tells the kernel to execute the file, it will use the interpreter \fB/bin/bash\fP\&.
.sp
For a script written in another language, just replace \fB/bin/bash\fP with the interpreter for that language (for example: \fB/usr/bin/python\fP for a python script, or \fB/usr/local/bin/fish\fP for a fish script).
.sp
This line is only needed when scripts are executed without specifying the interpreter. For functions inside fish or when executing a script with \fBfish /path/to/script\fP, a shebang is not required (but it doesn\(aqt hurt!).
.SH CONFIGURATION FILES
.sp
When fish is started, it reads and runs its configuration files. Where these are depends on build configuration and environment variables.
.sp
The main file is \fB~/.config/fish/config.fish\fP (or more precisely \fB$XDG_CONFIG_HOME/fish/config.fish\fP).
.sp
Configuration files are evaluated in the following order:
.INDENT 0.0
.IP \(bu 2
Configuration snippets in files ending in \fB\&.fish\fP, in the directories:
.INDENT 2.0
.IP \(bu 2
\fB$__fish_config_dir/conf.d\fP (by default, \fB~/.config/fish/conf.d/\fP)
.IP \(bu 2
\fB$__fish_sysconf_dir/conf.d\fP (by default, \fB/etc/fish/conf.d/\fP)
.IP \(bu 2
Directories for third\-party software vendors to ship their own configuration snippets for their software. Fish searches the directories in the \fBXDG_DATA_DIRS\fP environment variable for a \fBfish/vendor_conf.d\fP directory; if that variable is not defined, the default is \fB/usr/share/fish/vendor_conf.d\fP and \fB/usr/local/share/fish/vendor_conf.d\fP, unless your distribution customized this.
.UNINDENT
.sp
If there are multiple files with the same name in these directories, only the first will be executed.
They are executed in order of their filename, sorted (like globs) in a natural order (i.e. "01" sorts before "2").
.IP \(bu 2
System\-wide configuration files, where administrators can include initialization that should be run for all users on the system \- similar to \fB/etc/profile\fP for POSIX\-style shells \- in \fB$__fish_sysconf_dir\fP (usually \fB/etc/fish/config.fish\fP).
.IP \(bu 2
User initialization, usually in \fB~/.config/fish/config.fish\fP (controlled by the \fBXDG_CONFIG_HOME\fP environment variable, and accessible as \fB$__fish_config_dir\fP).
.UNINDENT
.sp
\fB~/.config/fish/config.fish\fP is sourced \fIafter\fP the snippets. This is so users can copy snippets and override some of their behavior.
.sp
These files are all executed on the startup of every shell. If you want to run a command only on starting an interactive shell, use the exit status of the command \fBstatus \-\-is\-interactive\fP to determine if the shell is interactive. If you want to run a command only when using a login shell, use \fBstatus \-\-is\-login\fP instead. This will speed up the starting of non\-interactive or non\-login shells.
.sp
If you are developing another program, you may wish to install configuration which is run for all users of the fish shell on a system. This is discouraged; if not carefully written, they may have side\-effects or slow the startup of the shell. Additionally, users of other shells will not benefit from the Fish\-specific configuration. However, if they are absolutely required, you may install them to the "vendor" configuration directory. As this path may vary from system to system, the \fBpkgconfig\fP framework should be used to discover this path with the output of \fBpkg\-config \-\-variable confdir fish\fP\&.
.sp
Examples:
.sp
If you want to add the directory \fB~/linux/bin\fP to your PATH variable when using a login shell, add this to your \fB~/.config/fish/config.fish\fP file:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
if status \-\-is\-login
    set \-gx PATH $PATH ~/linux/bin
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
(alternatively use fish_add_path like \fBfish_add_path ~/linux/bin\fP, which only adds the path if it isn\(aqt included yet)
.sp
If you want to run a set of commands when fish exits, use an event handler that is triggered by the exit of the shell:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function on_exit \-\-on\-event fish_exit
    echo fish is now exiting
end
.ft P
.fi
.UNINDENT
.UNINDENT
.SH FURTHER HELP AND DEVELOPMENT
.sp
If you have a question not answered by this documentation, there are several avenues for help:
.INDENT 0.0
.IP \(bu 2
The \fI\%GitHub page\fP
.IP \(bu 2
The official \fI\%Gitter channel\fP
.IP \(bu 2
The official mailing list at \fI\%fish\-users@lists.sourceforge.net\fP
.UNINDENT
.sp
If you have an improvement for fish, you can submit it via the GitHub page.
.SH OTHER HELP PAGES
.SS Frequently asked questions
.SS What is the equivalent to this thing from bash (or other shells)?
.sp
See Fish for bash users
.SS How do I set or clear an environment variable?
.sp
Use the set command:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
set \-x key value # typically set \-gx key value
set \-e key
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Since fish 3.1 you can set an environment variable for just one command using the \fBkey=value some command\fP syntax, like in other shells.  The two lines below behave identically \- unlike other shells, fish will output \fBvalue\fP both times:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
key=value echo $key
begin; set \-lx key value; echo $key; end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Note that "exported" is not a scope, but an additional bit of state. A variable can be global and exported or local and exported or even universal and exported. Typically it makes sense to make an exported variable global.
.SS How do I check whether a variable is defined?
.sp
Use \fBset \-q var\fP\&.  For example, \fBif set \-q var; echo variable defined; end\fP\&.  To check multiple variables you can combine with \fBand\fP and \fBor\fP like so:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
if set \-q var1; or set \-q var2
    echo either variable defined
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Keep in mind that a defined variabled could also be empty, either by having no elements (if set like \fBset var\fP) or only empty elements (if set like \fBset var ""\fP). Read on for how to deal with those.
.SS How do I check whether a variable is not empty?
.sp
Use \fBstring length \-q \-\- $var\fP\&.  For example, \fBif string length \-q \-\- $var; echo not empty; end\fP\&.  Note that \fBstring length\fP will interpret a list of multiple variables as a disjunction (meaning any/or):
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
if string length \-q \-\- $var1 $var2 $var3
    echo at least one of these variables is not empty
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Alternatively, use \fBtest \-n "$var"\fP, but remember that \fBthe variable must be double\-quoted\fP\&.  For example, \fBif test \-n "$var"; echo not empty; end\fP\&. The \fBtest\fP command provides its own and (\-a) and or (\-o):
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
if test \-n "$var1" \-o \-n "$var2" \-o \-n "$var3"
    echo at least one of these variables is not empty
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If you want to know if a variable has \fIno elements\fP, use \fBset \-q var[1]\fP\&.
.SS Why doesn\(aqt \fBset \-Ux\fP (exported universal variables) seem to work?
.sp
A global variable of the same name already exists.
.sp
Environment variables such as \fBEDITOR\fP or \fBTZ\fP can be set universally using \fBset \-Ux\fP\&.  However, if
there is an environment variable already set before fish starts (such as by login scripts or system
administrators), it is imported into fish as a global variable. The variable scopes are searched from the "inside out", which
means that local variables are checked first, followed by global variables, and finally universal
variables.
.sp
This means that the global value takes precedence over the universal value.
.sp
To avoid this problem, consider changing the setting which fish inherits. If this is not possible,
add a statement to your configuration file (usually
\fB~/.config/fish/config.fish\fP):
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
set \-gx EDITOR vim
.ft P
.fi
.UNINDENT
.UNINDENT
.SS How do I run a command every login? What\(aqs fish\(aqs equivalent to .bashrc or .profile?
.sp
Edit the file \fB~/.config/fish/config.fish\fP [1], creating it if it does not exist (Note the leading period).
.IP [1] 5
The "~/.config" part of this can be set via $XDG_CONFIG_HOME, that\(aqs just the default.
.SS How do I set my prompt?
.sp
The prompt is the output of the \fBfish_prompt\fP function. Put it in \fB~/.config/fish/functions/fish_prompt.fish\fP\&. For example, a simple prompt is:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function fish_prompt
    set_color $fish_color_cwd
    echo \-n (prompt_pwd)
    set_color normal
    echo \-n \(aq > \(aq
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
You can also use the Web configuration tool, fish_config, to preview and choose from a gallery of sample prompts.
.sp
If you want to modify your existing prompt, you can use funced and funcsave like:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>_ funced fish_prompt
# This opens up your editor (set in $EDITOR).
# Modify the function,
# save the file and repeat to your liking.
# Once you are happy with it:
>_ funcsave fish_prompt
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This also applies to fish_right_prompt and fish_mode_prompt\&.
.SS Why does my prompt show a \fB[I]\fP?
.sp
That\(aqs the fish_mode_prompt\&. It is displayed by default when you\(aqve activated vi mode using \fBfish_vi_key_bindings\fP\&.
.sp
If you haven\(aqt activated vi mode on purpose, you might have installed a third\-party theme that does it.
.sp
If you want to change or disable this display, modify the \fBfish_mode_prompt\fP function, for instance via funced\&.
.SS How do I customize my syntax highlighting colors?
.sp
Use the web configuration tool, fish_config, or alter the fish_color family of environment variables\&.
.SS How do I change the greeting message?
.sp
Change the value of the variable \fBfish_greeting\fP or create a \fBfish_greeting\fP function. For example, to remove the greeting use:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
set \-U fish_greeting
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Or if you prefer not to use a universal variable, use:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
set \-g fish_greeting
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
in config.fish.
.SS I\(aqm seeing weird output before each prompt when using screen. What\(aqs wrong?
.sp
Quick answer:
.sp
Run the following command in fish:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function fish_title; end; funcsave fish_title
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Problem solved!
.sp
The long answer:
.sp
Fish is trying to set the titlebar message of your terminal. While screen itself supports this feature, your terminal does not. Unfortunately, when the underlying terminal doesn\(aqt support setting the titlebar, screen simply passes through the escape codes and text to the underlying terminal instead of ignoring them. It is impossible to detect and resolve this problem from inside fish since fish has no way of knowing what the underlying terminal type is. For now, the only way to fix this is to unset the titlebar message, as suggested above.
.sp
Note that fish has a default titlebar message, which will be used if the fish_title function is undefined. So simply unsetting the fish_title function will not work.
.SS How do I run a command from history?
.sp
Type some part of the command, and then hit the \fB↑\fP (up) or \fB↓\fP (down) arrow keys to navigate through history matches. Additional default key bindings include \fBControl\fP+\fBP\fP (up) and \fBControl\fP+\fBN\fP (down). See Searchable command history for more information.
.SS Why doesn\(aqt history substitution ("!$" etc.) work?
.sp
Because history substitution is an awkward interface that was invented before interactive line editing was even possible. Instead of adding this pseudo\-syntax, fish opts for nice history searching and recall features.  Switching requires a small change of habits: if you want to modify an old line/word, first recall it, then edit.
.sp
As a special case, most of the time history substitution is used as \fBsudo !!\fP\&. In that case just press \fBAlt\fP+\fBS\fP, and it will recall your last commandline with \fBsudo\fP prefixed (or toggle a \fBsudo\fP prefix on the current commandline if there is anything).
.sp
In general, fish\(aqs history recall works like this:
.INDENT 0.0
.IP \(bu 2
Like other shells, the Up arrow, \fB↑\fP recalls whole lines, starting from the last executed line.  A single press replaces "!!", later presses replace "!\-3" and the like.
.IP \(bu 2
If the line you want is far back in the history, type any part of the line and then press Up one or more times.  This will filter the recalled lines to ones that include this text, and you will get to the line you want much faster.  This replaces "!vi", "!?bar.c" and the like.
.IP \(bu 2
\fBAlt\fP+\fB↑\fP recalls individual arguments, starting from the last argument in the last executed line.  A single press replaces "!$", later presses replace "!!:4" and such. As an alternate key binding, \fBAlt\fP+\fB\&.\fP can be used.
.IP \(bu 2
If the argument you want is far back in history (e.g. 2 lines back \- that\(aqs a lot of words!), type any part of it and then press \fBAlt\fP+\fB↑\fP\&.  This will show only arguments containing that part and you will get what you want much faster.  Try it out, this is very convenient!
.IP \(bu 2
If you want to reuse several arguments from the same line ("!!:3*" and the like), consider recalling the whole line and removing what you don\(aqt need (\fBAlt\fP+\fBD\fP and \fBAlt\fP+\fBBackspace\fP are your friends).
.UNINDENT
.sp
See documentation for more details about line editing in fish.
.SS How do I run a subcommand? The backtick doesn\(aqt work!
.sp
\fBfish\fP uses parentheses for subcommands. For example:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
for i in (ls)
    echo $i
end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS My command (pkg\-config) gives its output as a single long string?
.sp
Unlike other shells, fish splits command substitutions only on newlines, not spaces or tabs or the characters in $IFS.
.sp
That means if you run
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
echo x(printf \(aq%s \(aq a b c)x
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
It will print \fBxa b c x\fP, because the "a b c " is used in one piece. But if you do
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
echo x(printf \(aq%s\en\(aq a b c)x
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
it will print \fBxax xbx xcx\fP\&.
.sp
In the overwhelming majority of cases, splitting on spaces is unwanted, so this is an improvement.
.sp
However sometimes, especially with \fBpkg\-config\fP and related tools, splitting on spaces is needed.
.sp
In these cases use \fBstring split \-n " "\fP like:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
g++ example_01.cpp (pkg\-config \-\-cflags \-\-libs gtk+\-2.0 | string split \-n " ")
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The \fB\-n\fP is so empty elements are removed like POSIX shells would do.
.SS How do I get the exit status of a command?
.sp
Use the \fB$status\fP variable. This replaces the \fB$?\fP variable used in some other shells.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
somecommand
if test $status \-eq 7
    echo "That\(aqs my lucky number!"
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If you are just interested in success or failure, you can run the command directly as the if\-condition:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
if somecommand
    echo "Command succeeded"
else
    echo "Command failed"
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Or if you just want to do one command in case the first succeeded or failed, use \fBand\fP or \fBor\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
somecommand
or someothercommand
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
See the documentation for test and if for more information.
.SS My command prints "No matches for wildcard" but works in bash
.sp
In short: quote or escape the wildcard:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
scp user@ip:/dir/"string\-*"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
When fish sees an unquoted \fB*\fP, it performs wildcard expansion\&. That means it tries to match filenames to the given string.
.sp
If the wildcard doesn\(aqt match any files, fish prints an error instead of running the command:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> echo *this*does*not*exist
fish: No matches for wildcard \(aq*this*does*not*exist\(aq. See \(gahelp expand\(ga.
echo *this*does*not*exist 2>| xsel \-\-clipboard
     ^
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Now, bash also tries to match files in this case, but when it doesn\(aqt find a match, it passes along the literal wildcard string instead.
.sp
That means that commands like the above
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
scp user@ip:/dir/string\-*
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
or
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
apt install postgres\-*
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
appear to work, because most of the time the string doesn\(aqt match and so it passes along the \fBstring\-*\fP, which is then interpreted by the receiving program.
.sp
But it also means that these commands can stop working at any moment once a matching file is encountered (because it has been created or the command is executed in a different working directory), and to deal with that bash needs workarounds like
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
for f in ./*.mpg; do
      # We need to test if the file really exists because
      # the wildcard might have failed to match.
      test \-f "$f" || continue
      mympgviewer "$f"
done
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
(from \fI\%http://mywiki.wooledge.org/BashFAQ/004\fP)
.sp
For these reasons, fish does not do this, and instead expects asterisks to be quoted or escaped if they aren\(aqt supposed to be expanded.
.sp
This is similar to bash\(aqs "failglob" option.
.SS I accidentally entered a directory path and fish changed directory. What happened?
.sp
If fish is unable to locate a command with a given name, and it starts with \fB\&.\fP, \fB/\fP or \fB~\fP, fish will test if a directory of that name exists. If it does, it is implicitly assumed that you want to change working directory. For example, the fastest way to switch to your home directory is to simply press \fB~\fP and enter.
.SS How can I use \fB\-\fP as a shortcut for \fBcd \-\fP?
.sp
In fish versions prior to 2.5.0 it was possible to create a function named \fB\-\fP that would do \fBcd \-\fP\&. Changes in the 2.5.0 release included several bug fixes that enforce the rule that a bare hyphen is not a valid function (or variable) name. However, you can achieve the same effect via an abbreviation:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
abbr \-a \-\- \- \(aqcd \-\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS The open command doesn\(aqt work.
.sp
The \fBopen\fP command uses the MIME type database and the \fB\&.desktop\fP files used by Gnome and KDE to identify filetypes and default actions. If at least one of these environments is installed, but the open command is not working, this probably means that the relevant files are installed in a non\-standard location. Consider asking for more help\&.
.SS Why won\(aqt SSH/SCP/rsync connect properly when fish is my login shell?
.sp
This problem may show up as messages like "\fBReceived message too long\fP", "\fBopen terminal
failed: not a terminal\fP", "\fBBad packet length\fP", or "\fBConnection refused\fP" with strange output
in \fBssh_exchange_identification\fP messages in the debug log.
.sp
This usually happens because fish reads the user configuration file (\fB~/.config/fish/config.fish\fP) \fIalways\fP,
whether it\(aqs in an interactive or login or non\-interactive or non\-login shell.
.sp
This simplifies matters, but it also means when config.fish generates output, it will do that even in non\-interactive shells like the one ssh/scp/rsync start when they connect.
.sp
Anything in config.fish that produces output should be guarded with \fBstatus is\-interactive\fP (or \fBstatus is\-login\fP if you prefer):
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
if status is\-interactive
  ...
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The same applies for example when you start \fBtmux\fP in config.fish without guards, which will cause a message like \fBsessions should be nested with care, unset $TMUX to force\fP\&.
.SS I\(aqm getting weird graphical glitches (a staircase effect, ghost characters, cursor in the wrong position,...)?
.sp
In a terminal, the application running inside it and the terminal itself need to agree on the width of characters in order to handle cursor movement.
.sp
This is more important to fish than other shells because features like syntax highlighting and autosuggestions are implemented by moving the cursor.
.sp
Sometimes, there is disagreement on the width. There are numerous causes and fixes for this:
.INDENT 0.0
.IP \(bu 2
It is possible the character is simply too new for your system to know \- in this case you need to refrain from using it.
.IP \(bu 2
Fish or your terminal might not know about the character or handle it wrong \- in this case fish or your terminal needs to be fixed, or you need to update to a fixed version.
.IP \(bu 2
The character has an "ambiguous" width and fish thinks that means a width of X while your terminal thinks it\(aqs Y. In this case you either need to change your terminal\(aqs configuration or set $fish_ambiguous_width to the correct value.
.IP \(bu 2
The character is an emoji and the host system only supports Unicode 8, while you are running the terminal on a system that uses Unicode >= 9. In this case set $fish_emoji_width to 2.
.UNINDENT
.sp
This also means that a few things are unsupportable:
.INDENT 0.0
.IP \(bu 2
Non\-monospace fonts \- there is \fIno way\fP for fish to figure out what width a specific character has as it has no influence on the terminal\(aqs font rendering.
.IP \(bu 2
Different widths for multiple ambiguous width characters \- there is no way for fish to know which width you assign to each character.
.UNINDENT
.SS How do I make fish my default shell?
.sp
If you installed fish manually (e.g. by compiling it, not by using a package manager), you first need to add fish to the list of shells by executing the following command (assuming you installed fish in /usr/local):
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
echo /usr/local/bin/fish | sudo tee \-a /etc/shells
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If you installed a prepackaged version of fish, the package manager should have already done this for you.
.sp
In order to change your default shell, type:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
chsh \-s /usr/local/bin/fish
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
You may need to adjust the above path to e.g. \fB/usr/bin/fish\fP\&. Use the command \fBwhich fish\fP if you are unsure of where fish is installed.
.sp
Unfortunately, there is no way to make the changes take effect at once. You will need to log out and back in again.
.SS Uninstalling fish
.sp
If you want to uninstall fish, first make sure fish is not set as your shell. Run \fBchsh \-s /bin/bash\fP if you are not sure.
.sp
If you installed it with a package manager, just use that package manager\(aqs uninstall function. If you built fish yourself, assuming you installed it to /usr/local, do this:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
rm \-Rf /usr/local/etc/fish /usr/local/share/fish ~/.config/fish
rm /usr/local/share/man/man1/fish*.1
cd /usr/local/bin
rm \-f fish fish_indent
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Where can I find extra tools for fish?
.sp
The fish user community extends fish in unique and useful ways via scripts that aren\(aqt always appropriate for bundling with the fish package. Typically because they solve a niche problem unlikely to appeal to a broad audience. You can find those extensions, including prompts, themes and useful functions, in various third\-party repositories. These include:
.INDENT 0.0
.IP \(bu 2
\fI\%Fisher\fP
.IP \(bu 2
\fI\%Fundle\fP
.IP \(bu 2
\fI\%Oh My Fish\fP
.IP \(bu 2
\fI\%Tacklebox\fP
.UNINDENT
.sp
This is not an exhaustive list and the fish project has no opinion regarding the merits of the repositories listed above or the scripts found therein.
.SS Interactive use
.sp
Fish prides itself on being really nice to use interactively. That\(aqs down to a few features we\(aqll explain in the next few sections.
.sp
Fish is used by giving commands in the fish language, see The Fish Language for information on that.
.SS Help
.sp
Fish has an extensive help system. Use the help command to obtain help on a specific subject or command. For instance, writing \fBhelp syntax\fP displays the syntax section of this documentation.
.sp
Fish also has man pages for its commands, and translates the help pages to man pages. For example, \fBman set\fP will show the documentation for \fBset\fP as a man page.
.sp
Help on a specific builtin can also be obtained with the \fB\-h\fP parameter. For instance, to obtain help on the fg builtin, either type \fBfg \-h\fP or \fBhelp fg\fP\&.
.sp
This page can be viewed via \fBhelp index\fP (or just \fBhelp\fP) or \fBman fish\-doc\fP\&. The tutorial can be viewed with \fBhelp tutorial\fP or \fBman fish\-tutorial\fP\&.
.SS Autosuggestions
.sp
fish suggests commands as you type, based on \fI\%command history\fP, completions, and valid file paths. As you type commands, you will see a suggestion offered after the cursor, in a muted gray color (which can be changed with the \fBfish_color_autosuggestion\fP variable).
.sp
To accept the autosuggestion (replacing the command line contents), press \fB→\fP or \fBControl\fP+\fBF\fP\&. To accept the first suggested word, press \fBAlt\fP+\fB→\fP or \fBAlt\fP+\fBF\fP\&. If the autosuggestion is not what you want, just ignore it: it won\(aqt execute unless you accept it.
.sp
Autosuggestions are a powerful way to quickly summon frequently entered commands, by typing the first few characters. They are also an efficient technique for navigating through directory hierarchies.
.SS Tab Completion
.sp
Tab completion is a time saving feature of any modern shell. When you type \fBTab\fP, fish tries to guess the rest of the word under the cursor. If it finds just one possibility, it inserts it. If it finds more, it inserts the longest unambiguous part and then opens a menu (the "pager") that you can navigate to find what you\(aqre looking for.
.sp
The pager can be navigated with the arrow keys, \fBPage Up\fP / \fBPage Down\fP, \fBTab\fP or \fBShift\fP+\fBTab\fP\&. Pressing \fBControl\fP+\fBS\fP (the \fBpager\-toggle\-search\fP binding \- \fB/\fP in vi\-mode) opens up a search menu that you can use to filter the list.
.sp
Fish provides some general purpose completions:
.INDENT 0.0
.IP \(bu 2
Commands (builtins, functions and regular programs).
.IP \(bu 2
Shell variable names.
.IP \(bu 2
Usernames for tilde expansion.
.IP \(bu 2
Filenames, even on strings with wildcards such as \fB*\fP and \fB**\fP\&.
.UNINDENT
.sp
It also provides a large number of program specific scripted completions. Most of these completions are simple options like the \fB\-l\fP option for \fBls\fP, but some are more advanced. For example:
.INDENT 0.0
.IP \(bu 2
The programs \fBman\fP and \fBwhatis\fP show all installed manual pages as completions.
.IP \(bu 2
The \fBmake\fP program uses all targets in the Makefile in the current directory as completions.
.IP \(bu 2
The \fBmount\fP command uses all mount points specified in fstab as completions.
.IP \(bu 2
The \fBssh\fP command uses all hosts that are stored in the known_hosts file as completions. (See the ssh documentation for more information)
.IP \(bu 2
The \fBsu\fP command shows the users on the system
.IP \(bu 2
The \fBapt\-get\fP, \fBrpm\fP and \fByum\fP commands show installed or installable packages
.UNINDENT
.sp
You can also write your own completions or install some you got from someone else. For that, see Writing your own completions\&.
.SS Syntax highlighting
.sp
Fish interprets the command line as it is typed and uses syntax highlighting to provide feedback. The most important feedback is the detection of potential errors. By default, errors are marked red.
.sp
Detected errors include:
.INDENT 0.0
.IP \(bu 2
Non existing commands.
.IP \(bu 2
Reading from or appending to a non existing file.
.IP \(bu 2
Incorrect use of output redirects
.IP \(bu 2
Mismatched parenthesis
.UNINDENT
.sp
When the cursor is over a parenthesis or a quote, fish also highlights its matching quote or parenthesis.
.sp
To customize the syntax highlighting, you can set the environment variables listed in the \fI\%Variables for changing highlighting colors\fP section.
.SS Syntax highlighting variables
.sp
The colors used by fish for syntax highlighting can be configured by changing the values of a various variables. The value of these variables can be one of the colors accepted by the set_color command. The modifier switches accepted by \fBset_color\fP like \fB\-\-bold\fP, \fB\-\-dim\fP, \fB\-\-italics\fP, \fB\-\-reverse\fP and \fB\-\-underline\fP are also accepted.
.sp
Example: to make errors highlighted and red, use:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
set fish_color_error red \-\-bold
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The following variables are available to change the highlighting colors in fish:
.TS
center;
|l|l|.
_
T{
Variable
T}	T{
Meaning
T}
_
T{
\fBfish_color_normal\fP
T}	T{
default color
T}
_
T{
\fBfish_color_command\fP
T}	T{
commands like echo
T}
_
T{
\fBfish_color_keyword\fP
T}	T{
keywords like if \- this falls back on the command color if unset
T}
_
T{
\fBfish_color_quote\fP
T}	T{
quoted text like "abc"
T}
_
T{
\fBfish_color_redirection\fP
T}	T{
IO redirections like >/dev/null
T}
_
T{
\fBfish_color_end\fP
T}	T{
process separators like \(aq;\(aq and \(aq&\(aq
T}
_
T{
\fBfish_color_error\fP
T}	T{
syntax errors
T}
_
T{
\fBfish_color_param\fP
T}	T{
ordinary command parameters
T}
_
T{
\fBfish_color_comment\fP
T}	T{
comments like \(aq# important\(aq
T}
_
T{
\fBfish_color_selection\fP
T}	T{
selected text in vi visual mode
T}
_
T{
\fBfish_color_operator\fP
T}	T{
parameter expansion operators like \(aq*\(aq and \(aq~\(aq
T}
_
T{
\fBfish_color_escape\fP
T}	T{
character escapes like \(aqn\(aq and \(aqx70\(aq
T}
_
T{
\fBfish_color_autosuggestion\fP
T}	T{
autosuggestions (the proposed rest of a command)
T}
_
T{
\fBfish_color_cwd\fP
T}	T{
the current working directory in the default prompt
T}
_
T{
\fBfish_color_user\fP
T}	T{
the username in the default prompt
T}
_
T{
\fBfish_color_host\fP
T}	T{
the hostname in the default prompt
T}
_
T{
\fBfish_color_host_remote\fP
T}	T{
the hostname in the default prompt for remote sessions (like ssh)
T}
_
T{
\fBfish_color_cancel\fP
T}	T{
the \(aq^C\(aq indicator on a canceled command
T}
_
T{
\fBfish_color_search_match\fP
T}	T{
history search matches and selected pager items (background only)
T}
_
.TE
.sp
If a variable isn\(aqt set, fish usually tries \fB$fish_color_normal\fP, except for \fB$fish_color_keyword\fP, where it tries \fB$fish_color_command\fP first.
.SS Pager color variables
.sp
fish will sometimes present a list of choices in a table, called the pager.
.sp
Example: to set the background of each pager row, use:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
set fish_pager_color_background \-\-background=white
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
To have black text on alternating white and gray backgrounds:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
set fish_pager_color_prefix black
set fish_pager_color_completion black
set fish_pager_color_description black
set fish_pager_color_background \-\-background=white
set fish_pager_color_secondary_background \-\-background=brwhite
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Variables affecting the pager colors:
.TS
center;
|l|l|.
_
T{
Variable
T}	T{
Meaning
T}
_
T{
\fBfish_pager_color_progress\fP
T}	T{
the progress bar at the bottom left corner
T}
_
T{
\fBfish_pager_color_background\fP
T}	T{
the background color of a line
T}
_
T{
\fBfish_pager_color_prefix\fP
T}	T{
the prefix string, i.e. the string that is to be completed
T}
_
T{
\fBfish_pager_color_completion\fP
T}	T{
the completion itself, i.e. the proposed rest of the string
T}
_
T{
\fBfish_pager_color_description\fP
T}	T{
the completion description
T}
_
T{
\fBfish_pager_color_selected_background\fP
T}	T{
background of the selected completion
T}
_
T{
\fBfish_pager_color_selected_prefix\fP
T}	T{
prefix of the selected completion
T}
_
T{
\fBfish_pager_color_selected_completion\fP
T}	T{
suffix of the selected completion
T}
_
T{
\fBfish_pager_color_selected_description\fP
T}	T{
description of the selected completion
T}
_
T{
\fBfish_pager_color_secondary_background\fP
T}	T{
background of every second unselected completion
T}
_
T{
\fBfish_pager_color_secondary_prefix\fP
T}	T{
prefix of every second unselected completion
T}
_
T{
\fBfish_pager_color_secondary_completion\fP
T}	T{
suffix of every second unselected completion
T}
_
T{
\fBfish_pager_color_secondary_description\fP
T}	T{
description of every second unselected completion
T}
_
.TE
.sp
When the secondary or selected variables aren\(aqt set, the normal variables are used, except for \fB$fish_pager_color_selected_background\fP, where the background of \fB$fish_color_search_match\fP is tried first.
.SS Abbreviations
.sp
To avoid needless typing, a frequently\-run command like \fBgit checkout\fP can be abbreviated to \fBgco\fP using the abbr command.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
abbr \-a gco git checkout
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
After entering \fBgco\fP and pressing \fBSpace\fP or \fBEnter\fP, the full text \fBgit checkout\fP will appear in the command line.
.sp
This is an alternative to aliases, and has the advantage that you see the actual command before using it, and the actual command will be stored in history.
.SS Programmable title
.sp
When using most virtual terminals, it is possible to set the message displayed in the titlebar of the terminal window. This can be done automatically in fish by defining the fish_title function. The fish_title function is executed before and after a new command is executed or put into the foreground and the output is used as a titlebar message. The status current\-command builtin will always return the name of the job to be put into the foreground (or \fBfish\fP if control is returning to the shell) when the \fIfish_prompt <cmd\-fish_prompt>\fP function is called. The first argument to fish_title will contain the most recently executed foreground command as a string, starting with fish 2.2.
.sp
Examples:
The default fish title is:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function fish_title
    echo (status current\-command) \(aq \(aq
    pwd
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
To show the last command in the title:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function fish_title
    echo $argv[1]
end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Programmable prompt
.sp
When fish waits for input, it will display a prompt by evaluating the fish_prompt and fish_right_prompt functions. The output of the former is displayed on the left and the latter\(aqs output on the right side of the terminal. The output of fish_mode_prompt will be prepended on the left, though the default function only does this when in \fI\%vi\-mode\fP\&.
.SS Configurable greeting
.sp
If a function named fish_greeting exists, it will be run when entering interactive mode. Otherwise, if an environment variable named fish_greeting exists, it will be printed.
.SS Private mode
.sp
If \fB$fish_private_mode\fP is set to a non\-empty value, commands will not be written to the history file on disk.
.sp
You can also launch with \fBfish \-\-private\fP (or \fBfish \-P\fP for short). This both hides old history and prevents writing history to disk. This is useful to avoid leaking personal information (e.g. for screencasts) or when dealing with sensitive information.
.sp
You can query the variable \fBfish_private_mode\fP (\fBif test \-n "$fish_private_mode" ...\fP) if you would like to respect the user\(aqs wish for privacy and alter the behavior of your own fish scripts.
.SS Command line editor
.sp
The fish editor features copy and paste, a \fI\%searchable history\fP and many editor functions that can be bound to special keyboard shortcuts.
.sp
Like bash and other shells, fish includes two sets of keyboard shortcuts (or key bindings): one inspired by the Emacs text editor, and one by the Vi text editor. The default editing mode is Emacs. You can switch to Vi mode by running \fBfish_vi_key_bindings\fP and switch back with \fBfish_default_key_bindings\fP\&. You can also make your own key bindings by creating a function and setting the \fBfish_key_bindings\fP variable to its name. For example:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function fish_hybrid_key_bindings \-\-description \e
"Vi\-style bindings that inherit emacs\-style bindings in all modes"
    for mode in default insert visual
        fish_default_key_bindings \-M $mode
    end
    fish_vi_key_bindings \-\-no\-erase
end
set \-g fish_key_bindings fish_hybrid_key_bindings
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
While the key bindings included with fish include many of the shortcuts popular from the respective text editors, they are not a complete implementation. They include a shortcut to open the current command line in your preferred editor (\fBAlt\fP+\fBE\fP by default) if you need the full power of your editor.
.SS Shared bindings
.sp
Some bindings are common across Emacs and Vi mode, because they aren\(aqt text editing bindings, or because what Vi/Vim does for a particular key doesn\(aqt make sense for a shell.
.INDENT 0.0
.IP \(bu 2
\fBTab\fP \fI\%completes\fP the current token. \fBShift\fP+\fBTab\fP completes the current token and starts the pager\(aqs search mode.
.IP \(bu 2
\fB←\fP (Left) and \fB→\fP (Right) move the cursor left or right by one character. If the cursor is already at the end of the line, and an autosuggestion is available, \fB→\fP accepts the autosuggestion.
.IP \(bu 2
\fBEnter\fP executes the current commandline or inserts a newline if it\(aqs not complete yet (e.g. a \fB)\fP or \fBend\fP is missing).
.IP \(bu 2
\fBAlt\fP+\fBEnter\fP inserts a newline at the cursor position.
.IP \(bu 2
\fBAlt\fP+\fB←\fP and \fBAlt\fP+\fB→\fP move the cursor one word left or right (to the next space or punctuation mark), or moves forward/backward in the directory history if the command line is empty. If the cursor is already at the end of the line, and an autosuggestion is available, \fBAlt\fP+\fB→\fP (or \fBAlt\fP+\fBF\fP) accepts the first word in the suggestion.
.IP \(bu 2
\fBControl\fP+\fB←\fP and \fBControl\fP+\fB→\fP move the cursor one word left or right. These accept one word of the autosuggestion \- the part they\(aqd move over.
.IP \(bu 2
\fBShift\fP+\fB←\fP and \fBShift\fP+\fB→\fP move the cursor one word left or right, without stopping on punctuation. These accept one big word of the autosuggestion.
.IP \(bu 2
\fB↑\fP (Up) and \fB↓\fP (Down) (or \fBControl\fP+\fBP\fP and \fBControl\fP+\fBN\fP for emacs aficionados) search the command history for the previous/next command containing the string that was specified on the commandline before the search was started. If the commandline was empty when the search started, all commands match. See the \fI\%history\fP section for more information on history searching.
.IP \(bu 2
\fBAlt\fP+\fB↑\fP and \fBAlt\fP+\fB↓\fP search the command history for the previous/next token containing the token under the cursor before the search was started. If the commandline was not on a token when the search started, all tokens match. See the \fI\%history\fP section for more information on history searching.
.IP \(bu 2
\fBControl\fP+\fBC\fP cancels the entire line.
.IP \(bu 2
\fBControl\fP+\fBD\fP delete one character to the right of the cursor. If the command line is empty, \fBControl\fP+\fBD\fP will exit fish.
.IP \(bu 2
\fBControl\fP+\fBU\fP moves contents from the beginning of line to the cursor to the \fI\%killring\fP\&.
.IP \(bu 2
\fBControl\fP+\fBL\fP clears and repaints the screen.
.IP \(bu 2
\fBControl\fP+\fBR\fP searches the history if there is something in the commandline. This is mainly to ease the transition from other shells, where ctrl+r initiates the history search.
.IP \(bu 2
\fBControl\fP+\fBW\fP moves the previous path component (everything up to the previous "/", ":" or "@") to the \fI\%Copy and paste (Kill Ring)\fP\&.
.IP \(bu 2
\fBControl\fP+\fBX\fP copies the current buffer to the system\(aqs clipboard, \fBControl\fP+\fBV\fP inserts the clipboard contents.
.IP \(bu 2
\fBAlt\fP+\fBD\fP moves the next word to the \fI\%Copy and paste (Kill Ring)\fP\&.
.IP \(bu 2
\fBAlt\fP+\fBH\fP (or \fBF1\fP) shows the manual page for the current command, if one exists.
.IP \(bu 2
\fBAlt\fP+\fBL\fP lists the contents of the current directory, unless the cursor is over a directory argument, in which case the contents of that directory will be listed.
.IP \(bu 2
\fBAlt\fP+\fBO\fP opens the file at the cursor in a pager.
.IP \(bu 2
\fBAlt\fP+\fBP\fP adds the string \fB&| less;\fP to the end of the job under the cursor. The result is that the output of the command will be paged.
.IP \(bu 2
\fBAlt\fP+\fBW\fP prints a short description of the command under the cursor.
.IP \(bu 2
\fBAlt\fP+\fBE\fP edit the current command line in an external editor. The editor is chosen from the first available of the \fB$VISUAL\fP or \fB$EDITOR\fP variables.
.IP \(bu 2
\fBAlt\fP+\fBV\fP Same as \fBAlt\fP+\fBE\fP\&.
.IP \(bu 2
\fBAlt\fP+\fBS\fP Prepends \fBsudo\fP to the current commandline. If the commandline is empty, prepend \fBsudo\fP to the last commandline.
.IP \(bu 2
\fBControl\fP+\fBSpace\fP Inserts a space without expanding an \fI\%abbreviation\fP\&. For vi\-mode this only applies to insert\-mode.
.UNINDENT
.SS Emacs mode commands
.INDENT 0.0
.IP \(bu 2
\fBHome\fP or \fBControl\fP+\fBA\fP moves the cursor to the beginning of the line.
.IP \(bu 2
\fBEnd\fP or \fBControl\fP+\fBE\fP moves to the end of line. If the cursor is already at the end of the line, and an autosuggestion is available, \fBEnd\fP or \fBControl\fP+\fBE\fP accepts the autosuggestion.
.IP \(bu 2
\fBControl\fP+\fBB\fP, \fBControl\fP+\fBF\fP move the cursor one character left or right or accept the autosuggestion just like the \fB←\fP (Left) and \fB→\fP (Right) shared bindings (which are available as well).
.IP \(bu 2
\fBControl\fP+\fBN\fP, \fBControl\fP+\fBP\fP move the cursor up/down or through history, like the up and down arrow shared bindings.
.IP \(bu 2
\fBDelete\fP or \fBBackspace\fP removes one character forwards or backwards respectively.
.IP \(bu 2
\fBControl\fP+\fBK\fP moves contents from the cursor to the end of line to the \fI\%Copy and paste (Kill Ring)\fP\&.
.IP \(bu 2
\fBAlt\fP+\fBC\fP capitalizes the current word.
.IP \(bu 2
\fBAlt\fP+\fBU\fP makes the current word uppercase.
.IP \(bu 2
\fBControl\fP+\fBT\fP transposes the last two characters.
.IP \(bu 2
\fBAlt\fP+\fBT\fP transposes the last two words.
.IP \(bu 2
\fBControl\fP+\fBZ\fP, \fBControl\fP+\fB_\fP (\fBControl\fP+\fB/\fP on some terminals) undo the most recent edit of the line.
.IP \(bu 2
\fBAlt\fP+\fB/\fP reverts the most recent undo.
.UNINDENT
.sp
You can change these key bindings using the bind builtin.
.SS Vi mode commands
.sp
Vi mode allows for the use of Vi\-like commands at the prompt. Initially, \fI\%insert mode\fP is active. \fBEscape\fP enters \fI\%command mode\fP\&. The commands available in command, insert and visual mode are described below. Vi mode shares \fI\%some bindings\fP with \fI\%Emacs mode\fP\&.
.sp
It is also possible to add all emacs\-mode bindings to vi\-mode by using something like:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function fish_user_key_bindings
    # Execute this once per mode that emacs bindings should be used in
    fish_default_key_bindings \-M insert

    # Then execute the vi\-bindings so they take precedence when there\(aqs a conflict.
    # Without \-\-no\-erase fish_vi_key_bindings will default to
    # resetting all bindings.
    # The argument specifies the initial mode (insert, "default" or visual).
    fish_vi_key_bindings \-\-no\-erase insert
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
When in vi\-mode, the fish_mode_prompt function will display a mode indicator to the left of the prompt. To disable this feature, override it with an empty function. To display the mode elsewhere (like in your right prompt), use the output of the \fBfish_default_mode_prompt\fP function.
.sp
When a binding switches the mode, it will repaint the mode\-prompt if it exists, and the rest of the prompt only if it doesn\(aqt. So if you want a mode\-indicator in your \fBfish_prompt\fP, you need to erase \fBfish_mode_prompt\fP e.g. by adding an empty file at \fB~/.config/fish/functions/fish_mode_prompt.fish\fP\&. (Bindings that change the mode are supposed to call the \fIrepaint\-mode\fP bind function, see bind)
.sp
The \fBfish_vi_cursor\fP function will be used to change the cursor\(aqs shape depending on the mode in supported terminals. The following snippet can be used to manually configure cursors after enabling vi\-mode:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# Emulates vim\(aqs cursor shape behavior
# Set the normal and visual mode cursors to a block
set fish_cursor_default block
# Set the insert mode cursor to a line
set fish_cursor_insert line
# Set the replace mode cursor to an underscore
set fish_cursor_replace_one underscore
# The following variable can be used to configure cursor shape in
# visual mode, but due to fish_cursor_default, is redundant here
set fish_cursor_visual block
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Additionally, \fBblink\fP can be added after each of the cursor shape parameters to set a blinking cursor in the specified shape.
.sp
If the cursor shape does not appear to be changing after setting the above variables, it\(aqs likely your terminal emulator does not support the capabilities necessary to do this. It may also be the case, however, that \fBfish_vi_cursor\fP has not detected your terminal\(aqs features correctly (for example, if you are using \fBtmux\fP). If this is the case, you can force \fBfish_vi_cursor\fP to set the cursor shape by setting \fB$fish_vi_force_cursor\fP in \fBconfig.fish\fP\&. You\(aqll have to restart fish for any changes to take effect. If cursor shape setting remains broken after this, it\(aqs almost certainly an issue with your terminal emulator, and not fish.
.SS Command mode
.sp
Command mode is also known as normal mode.
.INDENT 0.0
.IP \(bu 2
\fBH\fP moves the cursor left.
.IP \(bu 2
\fBL\fP moves the cursor right.
.IP \(bu 2
\fBI\fP enters \fI\%insert mode\fP at the current cursor position.
.IP \(bu 2
\fBV\fP enters \fI\%visual mode\fP at the current cursor position.
.IP \(bu 2
\fBA\fP enters \fI\%insert mode\fP after the current cursor position.
.IP \(bu 2
\fBShift\fP+\fBA\fP enters \fI\%insert mode\fP at the end of the line.
.IP \(bu 2
\fB0\fP (zero) moves the cursor to beginning of line (remaining in command mode).
.IP \(bu 2
\fBD\fP+\fBD\fP deletes the current line and moves it to the \fI\%Copy and paste (Kill Ring)\fP\&.
.IP \(bu 2
\fBShift\fP+\fBD\fP deletes text after the current cursor position and moves it to the \fI\%Copy and paste (Kill Ring)\fP\&.
.IP \(bu 2
\fBP\fP pastes text from the \fI\%Copy and paste (Kill Ring)\fP\&.
.IP \(bu 2
\fBU\fP search history backwards.
.IP \(bu 2
\fB[\fP and \fB]\fP search the command history for the previous/next token containing the token under the cursor before the search was started. See the \fI\%history\fP section for more information on history searching.
.IP \(bu 2
\fBBackspace\fP moves the cursor left.
.UNINDENT
.SS Insert mode
.INDENT 0.0
.IP \(bu 2
\fBEscape\fP enters \fI\%command mode\fP\&.
.IP \(bu 2
\fBBackspace\fP removes one character to the left.
.UNINDENT
.SS Visual mode
.INDENT 0.0
.IP \(bu 2
\fB←\fP (Left) and \fB→\fP (Right) extend the selection backward/forward by one character.
.IP \(bu 2
\fBB\fP and \fBW\fP extend the selection backward/forward by one word.
.IP \(bu 2
\fBD\fP and \fBX\fP move the selection to the \fI\%Copy and paste (Kill Ring)\fP and enter \fI\%command mode\fP\&.
.IP \(bu 2
\fBEscape\fP and \fBControl\fP+\fBC\fP enter \fI\%command mode\fP\&.
.IP \(bu 2
\fBc\fP and \fBs\fP remove the selection and switch to insert mode
.IP \(bu 2
\fBd\fP and \fBx\fP remove the selection and switch to normal mode
.IP \(bu 2
\fBX\fP removes the entire line and switches to normal mode
.IP \(bu 2
\fBy\fP copies the selection and switches to normal mode
.IP \(bu 2
\fB~\fP toggles the case (upper/lower) on the selection and switches to normal mode
.IP \(bu 2
\fB"*y\fP copies the selection to the clipboard and switches to normal mode
.UNINDENT
.SS Custom bindings
.sp
In addition to the standard bindings listed here, you can also define your own with bind:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# Just clear the commandline on control\-c
bind \ecc \(aqcommandline \-r ""\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Put \fBbind\fP statements into config.fish or a function called \fBfish_user_key_bindings\fP\&.
.sp
The key sequence (the \fB\ecc\fP) here depends on your setup, in particular the terminal. To find out what the terminal sends use fish_key_reader:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> fish_key_reader # pressing control\-c
Press a key:
            hex:    3  char: \ecC
Press [ctrl\-C] again to exit
bind \ecC \(aqdo something\(aq

> fish_key_reader # pressing the right\-arrow
Press a key:
            hex:   1B  char: \ec[  (or \ee)
(  0.077 ms)  hex:   5B  char: [
(  0.037 ms)  hex:   43  char: C
bind \ee\e[C \(aqdo something\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Note that some key combinations are indistinguishable or unbindable. For instance control\-i \fIis the same\fP as the tab key. This is a terminal limitation that fish can\(aqt do anything about.
.sp
Also, \fBEscape\fP is the same thing as \fBAlt\fP in a terminal. To distinguish between pressing \fBEscape\fP and then another key, and pressing \fBAlt\fP and that key (or an escape sequence the key sends), fish waits for a certain time after seeing an escape character. This is configurable via the \fBfish_escape_delay_ms\fP variable.
.sp
If you want to be able to press \fBEscape\fP and then a character and have it count as \fBAlt\fP+that character, set it to a higher value, e.g.:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
set \-g fish_escape_delay_ms 100
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Copy and paste (Kill Ring)
.sp
Fish uses an Emacs\-style kill ring for copy and paste functionality. For example, use \fBControl\fP+\fBK\fP (\fIkill\-line\fP) to cut from the current cursor position to the end of the line. The string that is cut (a.k.a. killed in emacs\-ese) is inserted into a list of kills, called the kill ring. To paste the latest value from the kill ring (emacs calls this "yanking") use \fBControl\fP+\fBY\fP (the \fByank\fP input function). After pasting, use \fBAlt\fP+\fBY\fP (\fByank\-pop\fP) to rotate to the previous kill.
.sp
Copy and paste from outside are also supported, both via the \fBControl\fP+\fBX\fP / \fBControl\fP+\fBV\fP bindings (the \fBfish_clipboard_copy\fP and \fBfish_clipboard_paste\fP functions [1]) and via the terminal\(aqs paste function, for which fish enables "Bracketed Paste Mode", so it can tell a paste from manually entered text.
In addition, when pasting inside single quotes, pasted single quotes and backslashes are automatically escaped so that the result can be used as a single token simply by closing the quote after.
Kill ring entries are stored in \fBfish_killring\fP variable.
.IP [1] 5
These rely on external tools. Currently xsel, xclip, wl\-copy/wl\-paste and pbcopy/pbpaste are supported.
.SS Multiline editing
.sp
The fish commandline editor can be used to work on commands that are several lines long. There are three ways to make a command span more than a single line:
.INDENT 0.0
.IP \(bu 2
Pressing the \fBEnter\fP key while a block of commands is unclosed, such as when one or more block commands such as \fBfor\fP, \fBbegin\fP or \fBif\fP do not have a corresponding end command.
.IP \(bu 2
Pressing \fBAlt\fP+\fBEnter\fP instead of pressing the \fBEnter\fP key.
.IP \(bu 2
By inserting a backslash (\fB\e\fP) character before pressing the \fBEnter\fP key, escaping the newline.
.UNINDENT
.sp
The fish commandline editor works exactly the same in single line mode and in multiline mode. To move between lines use the left and right arrow keys and other such keyboard shortcuts.
.SS Searchable command history
.sp
After a command has been executed, it is remembered in the history list. Any duplicate history items are automatically removed. By pressing the up and down keys, you can search forwards and backwards in the history. If the current command line is not empty when starting a history search, only the commands containing the string entered into the command line are shown.
.sp
By pressing \fBAlt\fP+\fB↑\fP and \fBAlt\fP+\fB↓\fP, a history search is also performed, but instead of searching for a complete commandline, each commandline is broken into separate elements just like it would be before execution, and the history is searched for an element matching that under the cursor.
.sp
History searches are case\-insensitive unless the search string contains an uppercase character. You can stop a search to edit your search string by pressing \fBEsc\fP or \fBPage Down\fP\&.
.sp
Prefixing the commandline with a space will prevent the entire line from being stored in the history.
.sp
The command history is stored in the file \fB~/.local/share/fish/fish_history\fP (or
\fB$XDG_DATA_HOME/fish/fish_history\fP if that variable is set) by default. However, you can set the
\fBfish_history\fP environment variable to change the name of the history session (resulting in a
\fB<session>_history\fP file); both before starting the shell and while the shell is running.
.sp
See the history command for other manipulations.
.sp
Examples:
.sp
To search for previous entries containing the word \(aqmake\(aq, type \fBmake\fP in the console and press the up key.
.sp
If the commandline reads \fBcd m\fP, place the cursor over the \fBm\fP character and press \fBAlt\fP+\fB↑\fP to search for previously typed words containing \(aqm\(aq.
.SS Navigating directories
.sp
The current working directory can be displayed with the pwd command, or the \fB$PWD\fP special variable\&.
.SS Directory history
.sp
Fish automatically keeps a trail of the recent visited directories with cd by storing this history in the \fBdirprev\fP and \fBdirnext\fP variables.
.sp
Several commands are provided to interact with this directory history:
.INDENT 0.0
.IP \(bu 2
dirh prints the history
.IP \(bu 2
cdh displays a prompt to quickly navigate the history
.IP \(bu 2
prevd moves backward through the history. It is bound to \fBAlt\fP+\fB←\fP
.IP \(bu 2
nextd moves forward through the history. It is bound to \fBAlt\fP+\fB→\fP
.UNINDENT
.SS Directory stack
.sp
Another set of commands, usually also available in other shells like bash, deal with the directory stack. Stack handling is not automatic and needs explicit calls of the following commands:
.INDENT 0.0
.IP \(bu 2
dirs prints the stack
.IP \(bu 2
pushd adds a directory on top of the stack and makes it the current working directory
.IP \(bu 2
popd removes the directory on top of the stack and changes the current working directory
.UNINDENT
.SS The fish language
.sp
This document is a comprehensive overview of fish\(aqs scripting language.
.sp
For interactive features see Interactive use\&.
.SS Syntax overview
.sp
Shells like fish are used by giving them commands. A command is executed by writing the name of the command followed by any arguments. For example:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
echo hello world
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This calls the echo command. \fBecho\fP writes its arguments to the screen. In this example the output is \fBhello world\fP\&.
.sp
Everything in fish is done with commands. There are commands for repeating other commands, commands for assigning variables, commands for treating a group of commands as a single command, etc. All of these commands follow the same basic syntax.
.sp
To learn more about the \fBecho\fP command, read its manual page by typing \fBman echo\fP\&. \fBman\fP is a command for displaying a manual page on a given topic. It takes the name of the manual page to display as an argument. There are manual pages for almost every command. There are also manual pages for many other things, such as system libraries and important files.
.sp
Every program on your computer can be used as a command in fish. If the program file is located in one of the \fI\%PATH\fP directories, you can just type the name of the program to use it. Otherwise the whole filename, including the directory (like \fB/home/me/code/checkers/checkers\fP or \fB\&../checkers\fP) is required.
.sp
Here is a list of some useful commands:
.INDENT 0.0
.IP \(bu 2
cd: Change the current directory
.IP \(bu 2
\fBls\fP: List files and directories
.IP \(bu 2
\fBman\fP: Display a manual page
.IP \(bu 2
\fBmv\fP: Move (rename) files
.IP \(bu 2
\fBcp\fP: Copy files
.IP \(bu 2
open: Open files with the default application associated with each filetype
.IP \(bu 2
\fBless\fP: Display the contents of files
.UNINDENT
.sp
Commands and arguments are separated by the space character \fB\(aq \(aq\fP\&. Every command ends with either a newline (by pressing the return key) or a semicolon \fB;\fP\&. Multiple commands can be written on the same line by separating them with semicolons.
.sp
A switch is a very common special type of argument. Switches almost always start with one or more hyphens \fB\-\fP and alter the way a command operates. For example, the \fBls\fP command usually lists the names of all files and directories in the current working directory. By using the \fB\-l\fP switch, the behavior of \fBls\fP is changed to not only display the filename, but also the size, permissions, owner, and modification time of each file.
.sp
Switches differ between commands and are usually documented on a command\(aqs manual page. There are some switches, however, that are common to most commands. For example, \fB\-\-help\fP will usually display a help text, \fB\-\-version\fP will usually display the command version, and \fB\-i\fP will often turn on interactive prompting before taking action.
.SS Terminology
.sp
Here we define some of the terms used on this page and throughout the rest of the fish documentation:
.INDENT 0.0
.IP \(bu 2
\fBArgument\fP: A parameter given to a command.
.IP \(bu 2
\fBBuiltin\fP: A command that is implemented by the shell. Builtins are so closely tied to the operation of the shell that it is impossible to implement them as external commands.
.IP \(bu 2
\fBCommand\fP: A program that the shell can run, or more specifically an external program that the shell runs in another process.
.IP \(bu 2
\fBFunction\fP: A block of commands that can be called as if they were a single command. By using functions, it is possible to string together multiple simple commands into one more advanced command.
.IP \(bu 2
\fBJob\fP: A running pipeline or command.
.IP \(bu 2
\fBPipeline\fP: A set of commands strung together so that the output of one command is the input of the next command.
.IP \(bu 2
\fBRedirection\fP: An operation that changes one of the input or output streams associated with a job.
.IP \(bu 2
\fBSwitch\fP or \fBOption\fP: A special kind of argument that alters the behavior of a command. A switch almost always begins with one or two hyphens.
.UNINDENT
.SS Quotes
.sp
Sometimes features like \fI\%parameter expansion\fP and \fI\%character escapes\fP get in the way. When that happens, you can use quotes, either single (\fB\(aq\fP) or double (\fB"\fP). Between single quotes, fish performs no expansions. Between double quotes, fish only performs \fI\%variable expansion\fP\&. No other kind of expansion (including \fI\%brace expansion\fP or parameter expansion) is performed, and escape sequences (for example, \fB\en\fP) are ignored. Within quotes, whitespace is not used to separate arguments, allowing quoted arguments to contain spaces.
.sp
The only meaningful escape sequences in single quotes are \fB\e\(aq\fP, which escapes a single quote and \fB\e\e\fP, which escapes the backslash symbol. The only meaningful escapes in double quotes are \fB\e"\fP, which escapes a double quote, \fB\e$\fP, which escapes a dollar character, \fB\e\fP followed by a newline, which deletes the backslash and the newline, and \fB\e\e\fP, which escapes the backslash symbol.
.sp
Single quotes have no special meaning within double quotes and vice versa.
.sp
Example:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
rm "cumbersome filename.txt"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
removes the file \fBcumbersome filename.txt\fP, while
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
rm cumbersome filename.txt
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
removes two files, \fBcumbersome\fP and \fBfilename.txt\fP\&.
.sp
Another example:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
grep \(aqenabled)$\(aq foo.txt
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
searches for lines ending in \fBenabled)\fP in \fBfoo.txt\fP (the \fB$\fP is special to \fBgrep\fP: it matches the end of the line).
.SS Escaping Characters
.sp
Some characters cannot be written directly on the command line. For these characters, so\-called escape sequences are provided. These are:
.INDENT 0.0
.IP \(bu 2
\fB\ea\fP represents the alert character.
.IP \(bu 2
\fB\ee\fP represents the escape character.
.IP \(bu 2
\fB\ef\fP represents the form feed character.
.IP \(bu 2
\fB\en\fP represents a newline character.
.IP \(bu 2
\fB\er\fP represents the carriage return character.
.IP \(bu 2
\fB\et\fP represents the tab character.
.IP \(bu 2
\fB\ev\fP represents the vertical tab character.
.IP \(bu 2
\fB\exHH\fP, where \fBHH\fP is a hexadecimal number, represents the ASCII character with the specified value. For example, \fB\ex9\fP is the tab character.
.IP \(bu 2
\fB\eXHH\fP, where \fBHH\fP is a hexadecimal number, represents a byte of data with the specified value. If you are using a multibyte encoding, this can be used to enter invalid strings. Only use this if you know what you are doing.
.IP \(bu 2
\fB\eooo\fP, where \fBooo\fP is an octal number, represents the ASCII character with the specified value. For example, \fB\e011\fP is the tab character.
.IP \(bu 2
\fB\euXXXX\fP, where \fBXXXX\fP is a hexadecimal number, represents the 16\-bit Unicode character with the specified value. For example, \fB\eu9\fP is the tab character.
.IP \(bu 2
\fB\eUXXXXXXXX\fP, where \fBXXXXXXXX\fP is a hexadecimal number, represents the 32\-bit Unicode character with the specified value. For example, \fB\eU9\fP is the tab character.
.IP \(bu 2
\fB\ecX\fP, where \fBX\fP is a letter of the alphabet, represents the control sequence generated by pressing the control key and the specified letter. For example, \fB\eci\fP is the tab character
.UNINDENT
.sp
Some characters have special meaning to the shell. For example, an apostrophe \fB\(aq\fP disables expansion (see \fI\%Quotes\fP). To tell the shell to treat these characters literally, escape them with a backslash. For example, the command:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
echo \e\(aqhello world\e\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
outputs \fB\(aqhello world\(aq\fP (including the apostrophes), while the command:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
echo \(aqhello world\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
outputs \fBhello world\fP (without the apostrophes). In the former case the shell treats the apostrophes as literal \fB\(aq\fP characters, while in the latter case it treats them as special expansion modifiers.
.sp
The special characters and their escape sequences are:
.INDENT 0.0
.IP \(bu 2
\fB\e \fP (backslash space) escapes the space character. This keeps the shell from splitting arguments on the escaped space.
.IP \(bu 2
\fB\e$\fP escapes the dollar character.
.IP \(bu 2
\fB\e\e\fP escapes the backslash character.
.IP \(bu 2
\fB\e*\fP escapes the star character.
.IP \(bu 2
\fB\e?\fP escapes the question mark character (this is not necessary if the \fBqmark\-noglob\fP \fI\%feature flag\fP is enabled).
.IP \(bu 2
\fB\e~\fP escapes the tilde character.
.IP \(bu 2
\fB\e#\fP escapes the hash character.
.IP \(bu 2
\fB\e(\fP escapes the left parenthesis character.
.IP \(bu 2
\fB\e)\fP escapes the right parenthesis character.
.IP \(bu 2
\fB\e{\fP escapes the left curly bracket character.
.IP \(bu 2
\fB\e}\fP escapes the right curly bracket character.
.IP \(bu 2
\fB\e[\fP escapes the left bracket character.
.IP \(bu 2
\fB\e]\fP escapes the right bracket character.
.IP \(bu 2
\fB\e<\fP escapes the less than character.
.IP \(bu 2
\fB\e>\fP escapes the more than character.
.IP \(bu 2
\fB\e^\fP escapes the circumflex character.
.IP \(bu 2
\fB\e&\fP escapes the ampersand character.
.IP \(bu 2
\fB\e|\fP escapes the vertical bar character.
.IP \(bu 2
\fB\e;\fP escapes the semicolon character.
.IP \(bu 2
\fB\e"\fP escapes the quote character.
.IP \(bu 2
\fB\e\(aq\fP escapes the apostrophe character.
.UNINDENT
.SS Input/Output Redirection
.sp
Most programs use three input/output (I/O) streams:
.INDENT 0.0
.IP \(bu 2
Standard input (stdin) for reading. Defaults to reading from the keyboard.
.IP \(bu 2
Standard output (stdout) for writing output. Defaults to writing to the screen.
.IP \(bu 2
Standard error (stderr) for writing errors and warnings. Defaults to writing to the screen.
.UNINDENT
.sp
Each stream has a number called the file descriptor (FD): 0 for stdin, 1 for stdout, and 2 for stderr.
.sp
The destination of a stream can be changed using something called \fIredirection\fP\&. For example, \fBecho hello > output.txt\fP, redirects the standard output of the \fBecho\fP command to a text file.
.INDENT 0.0
.IP \(bu 2
To read standard input from a file, use \fB<SOURCE_FILE\fP\&.
.IP \(bu 2
To write standard output to a file, use \fB>DESTINATION\fP\&.
.IP \(bu 2
To write standard error to a file, use \fB2>DESTINATION\fP\&. [1]
.IP \(bu 2
To append standard output to a file, use \fB>>DESTINATION_FILE\fP\&.
.IP \(bu 2
To append standard error to a file, use \fB2>>DESTINATION_FILE\fP\&.
.IP \(bu 2
To not overwrite ("clobber") an existing file, use \fB>?DESTINATION\fP or \fB2>?DESTINATION\fP\&. This is known as the "noclobber" redirection.
.UNINDENT
.sp
\fBDESTINATION\fP can be one of the following:
.INDENT 0.0
.IP \(bu 2
A filename. The output will be written to the specified file. Often \fB>/dev/null\fP to silence output by writing it to the special "sinkhole" file.
.IP \(bu 2
An ampersand (\fB&\fP) followed by the number of another file descriptor like \fB&2\fP for standard error. The output will be written to the destination descriptor.
.IP \(bu 2
An ampersand followed by a minus sign (\fB&\-\fP). The file descriptor will be closed.
.UNINDENT
.sp
As a convenience, the redirection \fB&>\fP can be used to direct both stdout and stderr to the same destination. For example, \fBecho hello &> all_output.txt\fP redirects both stdout and stderr to the file \fBall_output.txt\fP\&. This is equivalent to \fBecho hello > all_output.txt 2>&1\fP\&.
.sp
Any arbitrary file descriptor can used in a redirection by prefixing the redirection with the FD number.
.INDENT 0.0
.IP \(bu 2
To redirect the input of descriptor N, use \fBN<DESTINATION\fP\&.
.IP \(bu 2
To redirect the output of descriptor N, use \fBN>DESTINATION\fP\&.
.IP \(bu 2
To append the output of descriptor N to a file, use \fBN>>DESTINATION_FILE\fP\&.
.UNINDENT
.sp
For example, \fBecho hello 2> output.stderr\fP writes the standard error (file descriptor 2) to \fBoutput.stderr\fP\&.
.sp
It is an error to redirect a builtin, function, or block to a file descriptor above 2. However this is supported for external commands.
.IP [1] 5
Previous versions of fish also allowed specifying this as \fB^DESTINATION\fP, but that made another character special so it was deprecated and will be removed in the future. See \fI\%feature flags\fP\&.
.SS Piping
.sp
Another way to redirect streams is a \fIpipe\fP\&. A pipe connects streams with each other. Usually the standard output of one command is connected with the standard input of another. This is done by separating commands with the pipe character \fB|\fP\&. For example:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
cat foo.txt | head
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The command \fBcat foo.txt\fP sends the contents of \fBfoo.txt\fP to stdout. This output is provided as input for the \fBhead\fP program, which prints the first 10 lines of its input.
.sp
It is possible to pipe a different output file descriptor by prepending its FD number and the output redirect symbol to the pipe. For example:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
make fish 2>| less
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
will attempt to build \fBfish\fP, and any errors will be shown using the \fBless\fP pager. [2]
.sp
As a convenience, the pipe \fB&|\fP redirects both stdout and stderr to the same process. This is different from bash, which uses \fB|&\fP\&.
.IP [2] 5
A "pager" here is a program that takes output and "paginates" it. \fBless\fP doesn\(aqt just do pages, it allows arbitrary scrolling (even back!).
.SS Job control
.sp
When you start a job in fish, fish itself will pause, and give control of the terminal to the program just started. Sometimes, you want to continue using the commandline, and have the job run in the background. To create a background job, append an & (ampersand) to your command. This will tell fish to run the job in the background. Background jobs are very useful when running programs that have a graphical user interface.
.sp
Example:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
emacs &
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
will start the emacs text editor in the background. fg can be used to bring it into the foreground again when needed.
.sp
Most programs allow you to suspend the program\(aqs execution and return control to fish by pressing \fBControl\fP+\fBZ\fP (also referred to as \fB^Z\fP). Once back at the fish commandline, you can start other programs and do anything you want. If you then want you can go back to the suspended command by using the fg (foreground) command.
.sp
If you instead want to put a suspended job into the background, use the bg command.
.sp
To get a listing of all currently started jobs, use the jobs command.
These listed jobs can be removed with the disown command.
.sp
At the moment, functions cannot be started in the background. Functions that are stopped and then restarted in the background using the bg command will not execute correctly.
.SS Functions
.sp
Functions are programs written in the fish syntax. They group together various commands and their arguments using a single name.
.sp
For example, here\(aqs a simple function to list directories:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function ll
    ls \-l $argv
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The first line tells fish to define a function by the name of \fBll\fP, so it can be used by simply writing \fBll\fP on the commandline. The second line tells fish that the command \fBls \-l $argv\fP should be called when \fBll\fP is invoked. \fI\%$argv\fP is a \fI\%list variable\fP, which always contains all arguments sent to the function. In the example above, these are simply passed on to the \fBls\fP command. The \fBend\fP on the third line ends the definition.
.sp
Calling this as \fBll /tmp/\fP will end up running \fBls \-l /tmp/\fP, which will list the contents of /tmp.
.sp
This is a kind of function known as a \fI\%wrapper\fP or "alias".
.sp
Fish\(aqs prompt is also defined in a function, called fish_prompt\&. It is run when the prompt is about to be displayed and its output forms the prompt:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function fish_prompt
    # A simple prompt. Displays the current directory
    # (which fish stores in the $PWD variable)
    # and then a user symbol \- a \(aq►\(aq for a normal user and a \(aq#\(aq for root.
    set \-l user_char \(aq►\(aq
    if fish_is_root_user
        set user_char \(aq#\(aq
    end

    echo (set_color yellow)$PWD (set_color purple)$user_char
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
To edit a function, you can use funced, and to save a function funcsave\&. This will store it in a function file that fish will \fI\%autoload\fP when needed.
.sp
The functions builtin can show a function\(aqs current definition (and type will also do if given a function).
.sp
For more information on functions, see the documentation for the function builtin.
.SS Defining aliases
.sp
One of the most common uses for functions is to slightly alter the behavior of an already existing command. For example, one might want to redefine the \fBls\fP command to display colors. The switch for turning on colors on GNU systems is \fB\-\-color=auto\fP\&. An alias, or wrapper, around \fBls\fP might look like this:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function ls
    command ls \-\-color=auto $argv
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
There are a few important things that need to be noted about aliases:
.INDENT 0.0
.IP \(bu 2
Always take care to add the \fI\%$argv\fP variable to the list of parameters to the wrapped command. This makes sure that if the user specifies any additional parameters to the function, they are passed on to the underlying command.
.IP \(bu 2
If the alias has the same name as the aliased command, you need to prefix the call to the program with \fBcommand\fP to tell fish that the function should not call itself, but rather a command with the same name. If you forget to do so, the function would call itself until the end of time. Usually fish is smart enough to figure this out and will refrain from doing so (which is hopefully in your interest).
.IP \(bu 2
Autoloading isn\(aqt applicable to aliases. Since, by definition, the function is created at the time the alias command is executed. You cannot autoload aliases.
.UNINDENT
.sp
To easily create a function of this form, you can use the alias command. Unlike other shells, this just makes functions \- fish has no separate concept of an "alias", we just use the word for a function wrapper like this.
.sp
For an alternative, try abbreviations\&. These are words that are expanded while you type, instead of being actual functions inside the shell.
.SS Autoloading functions
.sp
Functions can be defined on the commandline or in a configuration file, but they can also be automatically loaded. This has some advantages:
.INDENT 0.0
.IP \(bu 2
An autoloaded function becomes available automatically to all running shells.
.IP \(bu 2
If the function definition is changed, all running shells will automatically reload the altered version, after a while.
.IP \(bu 2
Startup time and memory usage is improved, etc.
.UNINDENT
.sp
When fish needs to load a function, it searches through any directories in the \fI\%list variable\fP \fB$fish_function_path\fP for a file with a name consisting of the name of the function plus the suffix \fB\&.fish\fP and loads the first it finds.
.sp
For example if you try to execute something called \fBbanana\fP, fish will go through all directories in $fish_function_path looking for a file called \fBbanana.fish\fP and load the first one it finds.
.sp
By default \fB$fish_function_path\fP contains the following:
.INDENT 0.0
.IP \(bu 2
A directory for users to keep their own functions, usually \fB~/.config/fish/functions\fP (controlled by the \fBXDG_CONFIG_HOME\fP environment variable).
.IP \(bu 2
A directory for functions for all users on the system, usually \fB/etc/fish/functions\fP (really \fB$__fish_sysconfdir/functions\fP).
.IP \(bu 2
Directories for other software to put their own functions. These are in the directories in the \fBXDG_DATA_DIRS\fP environment variable, in a subdirectory called \fBfish/vendor_functions.d\fP\&. The default is usually \fB/usr/share/fish/vendor_functions.d\fP and \fB/usr/local/share/fish/vendor_functions.d\fP\&.
.IP \(bu 2
The functions shipped with fish, usually installed in \fB/usr/share/fish/functions\fP (really \fB$__fish_data_dir/functions\fP).
.UNINDENT
.sp
If you are unsure, your functions probably belong in \fB~/.config/fish/functions\fP\&.
.sp
As we\(aqve explained, autoload files are loaded \fIby name\fP, so, while you can put multiple functions into one file, the file will only be loaded automatically once you try to execute the one that shares the name.
.sp
Autoloading also won\(aqt work for \fI\%event handlers\fP, since fish cannot know that a function is supposed to be executed when an event occurs when it hasn\(aqt yet loaded the function. See the \fI\%event handlers\fP section for more information.
.sp
If a file of the right name doesn\(aqt define the function, fish will not read other autoload files, instead it will go on to try builtins and finally commands. This allows masking a function defined later in $fish_function_path, e.g. if your administrator has put something into /etc/fish/functions that you want to skip.
.sp
If you are developing another program and want to install fish functions for it, install them to the "vendor" functions directory. As this path varies from system to system, you can use \fBpkgconfig\fP to discover it with the output of \fBpkg\-config \-\-variable functionsdir fish\fP\&. Your installation system should support a custom path to override the pkgconfig path, as other distributors may need to alter it easily.
.SS Comments
.sp
Anything after a \fB#\fP until the end of the line is a comment. That means it\(aqs purely for the reader\(aqs benefit, fish ignores it.
.sp
This is useful to explain what and why you are doing something:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function ls
    # The function is called ls,
    # so we have to explicitly call \(gacommand ls\(ga to avoid calling ourselves.
    command ls \-\-color=auto $argv
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
There are no multiline comments. If you want to make a comment span multiple lines, simply start each line with a \fB#\fP\&.
.sp
Comments can also appear after a line like so:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
set \-gx EDITOR emacs # I don\(aqt like vim.
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Conditions
.sp
Fish has some builtins that let you execute commands only if a specific criterion is met: if, switch, and and or, and also the familiar &&/|| syntax.
.sp
The switch command is used to execute one of possibly many blocks of commands depending on the value of a string. See the documentation for switch for more information.
.sp
The other conditionals use the \fI\%exit status\fP of a command to decide if a command or a block of commands should be executed.
.sp
Unlike programming languages you might know, if doesn\(aqt take a \fIcondition\fP, it takes a \fIcommand\fP\&. If that command returned a successful \fI\%exit status\fP (that\(aqs 0), the \fBif\fP branch is taken, otherwise the else branch.
.sp
Some examples:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# Just see if the file contains the string "fish" anywhere.
# This executes the \(gagrep\(ga command, which searches for a string,
# and if it finds it returns a status of 0.
# The \(ga\-q\(ga switch stops it from printing any matches.
if grep \-q fish myanimals
    echo "You have fish!"
else
    echo "You don\(aqt have fish!"
end

# $XDG_CONFIG_HOME is a standard place to store configuration.
# If it\(aqs not set applications should use ~/.config.
set \-q XDG_CONFIG_HOME; and set \-l configdir $XDG_CONFIG_HOME
or set \-l configdir ~/.config
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
For more, see the documentation for the builtins or the Conditionals section of the tutorial.
.SS Loops and blocks
.sp
Like most programming language, fish also has the familiar while and for loops.
.sp
\fBwhile\fP works like a repeated if:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
while true
    echo Still running
    sleep 1
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
will print "Still running" once a second. You can abort it with ctrl\-c.
.sp
\fBfor\fP loops work like in other shells, which is more like python\(aqs for\-loops than e.g. C\(aqs:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
for file in *
    echo file: $file
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
will print each file in the current directory. The part after the \fBin\fP is just a list of arguments, so you can use any \fI\%expansions\fP there:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
set moreanimals bird fox
for animal in {cat,}fish dog $moreanimals
   echo I like the $animal
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If you need a list of numbers, you can use the \fBseq\fP command to create one:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
for i in (seq 1 5)
    echo $i
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
break is available to break out of a loop, and continue to jump to the next iteration.
.sp
\fI\%Input and output redirections\fP (including \fI\%pipes\fP) can also be applied to loops:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
while read \-l line
    echo line: $line
end < file
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
In addition there\(aqs a begin block that just groups commands together so you can redirect to a block or use a new \fI\%variable scope\fP without any repetition:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
begin
   set \-l foo bar # this variable will only be available in this block!
end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Parameter expansion
.sp
When fish is given a commandline, it expands the parameters before sending them to the command. There are multiple different kinds of expansions:
.INDENT 0.0
.IP \(bu 2
\fI\%Wildcards\fP, to create filenames from patterns
.IP \(bu 2
\fI\%Variable expansion\fP, to use the value of a variable
.IP \(bu 2
\fI\%Command substitution\fP, to use the output of another command
.IP \(bu 2
\fI\%Brace expansion\fP, to write lists with common pre\- or suffixes in a shorter way
.IP \(bu 2
\fI\%Tilde expansion\fP, to turn the \fB~\fP at the beginning of paths into the path to the home directory
.UNINDENT
.sp
Parameter expansion is limited to 524288 items. There is a limit to how many arguments the operating system allows for any command, and 524288 is far above it. This is a measure to stop the shell from hanging doing useless computation.
.SS Wildcards ("Globbing")
.sp
When a parameter includes an \fI\%unquoted\fP \fB*\fP star (or "asterisk") or a \fB?\fP question mark, fish uses it as a wildcard to match files.
.INDENT 0.0
.IP \(bu 2
\fB*\fP matches any number of characters (including zero) in a file name, not including \fB/\fP\&.
.IP \(bu 2
\fB**\fP matches any number of characters (including zero), and also descends into subdirectories. If \fB**\fP is a segment by itself, that segment may match zero times, for compatibility with other shells.
.IP \(bu 2
\fB?\fP can match any single character except \fB/\fP\&. This is deprecated and can be disabled via the \fBqmark\-noglob\fP \fI\%feature flag\fP, so \fB?\fP will just be an ordinary character.
.UNINDENT
.sp
Other shells, such as zsh, have a much richer glob syntax, like \fB**(.)\fP to only match regular files. Fish does not. Instead of reinventing the wheel, use programs like \fBfind\fP to look for files. For example:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function ff \-\-description \(aqLike ** but only returns plain files.\(aq
    # This also ignores .git directories.
    find . \e( \-name .git \-type d \-prune \e) \-o \-type f | \e
        sed \-n \-e \(aq/^\e.\e/\e.git$/n\(aq \-e \(aqs/^\e.\e///p\(aq
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
You would then use it in place of \fB**\fP like this, \fBmy_prog (ff)\fP, to pass only regular files in or below $PWD to \fBmy_prog\fP\&. [3]
.sp
Wildcard matches are sorted case insensitively. When sorting matches containing numbers, they are naturally sorted, so that the strings \(aq1\(aq \(aq5\(aq and \(aq12\(aq would be sorted like 1, 5, 12.
.sp
Hidden files (where the name begins with a dot) are not considered when wildcarding unless the wildcard string has a dot in that place.
.sp
Examples:
.INDENT 0.0
.IP \(bu 2
\fBa*\fP matches any files beginning with an \(aqa\(aq in the current directory.
.IP \(bu 2
\fB???\fP matches any file in the current directory whose name is exactly three characters long.
.IP \(bu 2
\fB**\fP matches any files and directories in the current directory and all of its subdirectories.
.IP \(bu 2
\fB~/.*\fP matches all hidden files (also known as "dotfiles") and directories in your home directory.
.UNINDENT
.sp
For most commands, if any wildcard fails to expand, the command is not executed, \fI\%$status\fP is set to nonzero, and a warning is printed. This behavior is like what bash does with \fBshopt \-s failglob\fP\&. There are exactly 4 exceptions, namely set, overriding variables in \fI\%overrides\fP, count and for\&. Their globs will instead expand to zero arguments (so the command won\(aqt see them at all), like with \fBshopt \-s nullglob\fP in bash.
.sp
Examples:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# List the .foo files, or warns if there aren\(aqt any.
ls *.foo

# List the .foo files, if any.
set foos *.foo
if count $foos >/dev/null
    ls $foos
end
.ft P
.fi
.UNINDENT
.UNINDENT
.IP [3] 5
Technically, unix allows filenames with newlines, and this splits the \fBfind\fP output on newlines. If you want to avoid that, use find\(aqs \fB\-print0\fP option and string split0\&.
.SS Variable expansion
.sp
One of the most important expansions in fish is the "variable expansion". This is the replacing of a dollar sign (\fB$\fP) followed by a variable name with the _value_ of that variable. For more on shell variables, read the \fI\%Shell variables\fP section.
.sp
In the simplest case, this is just something like:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
echo $HOME
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
which will replace \fB$HOME\fP with the home directory of the current user, and pass it to echo, which will then print it.
.sp
Some variables like \fB$HOME\fP are already set because fish sets them by default or because fish\(aqs parent process passed them to fish when it started it. You can define your own variables by setting them with set:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
set my_directory /home/cooluser/mystuff
ls $my_directory
# shows the contents of /home/cooluser/mystuff
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
For more on how setting variables works, see \fI\%Shell variables\fP and the following sections.
.sp
Sometimes a variable has no value because it is undefined or empty, and it expands to nothing:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
echo $nonexistentvariable
# Prints no output.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
To separate a variable name from text you can encase the variable within double\-quotes or braces:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
set WORD cat
echo The plural of $WORD is "$WORD"s
# Prints "The plural of cat is cats" because $WORD is set to "cat".
echo The plural of $WORD is {$WORD}s
# ditto
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Without the quotes or braces, fish will try to expand a variable called \fB$WORDs\fP, which may not exist.
.sp
The latter syntax \fB{$WORD}\fP is a special case of \fI\%brace expansion\fP\&.
.sp
If $WORD here is undefined or an empty list, the "s" is not printed. However, it is printed if $WORD is the empty string (like after \fBset WORD ""\fP).
.sp
Unlike all the other expansions, variable expansion also happens in double quoted strings. Inside double quotes (\fB"these"\fP), variables will always expand to exactly one argument. If they are empty or undefined, it will result in an empty string. If they have one element, they\(aqll expand to that element. If they have more than that, the elements will be joined with spaces, unless the variable is a \fI\%path variable\fP \- in that case it will use a colon (\fI:\fP) instead [4]\&.
.sp
Outside of double quotes, variables will expand to as many arguments as they have elements. That means an empty list will expand to nothing, a variable with one element will expand to that element, and a variable with multiple elements will expand to each of those elements separately.
.sp
If a variable expands to nothing, it will cancel out any other strings attached to it. See the \fI\%cartesian product\fP section for more information.
.sp
The \fB$\fP symbol can also be used multiple times, as a kind of "dereference" operator (the \fB*\fP in C or C++), like in the following code:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
set foo a b c
set a 10; set b 20; set c 30
for i in (seq (count $$foo))
    echo $$foo[$i]
end

# Output is:
# 10
# 20
# 30
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB$$foo[$i]\fP is "the value of the variable named by \fB$foo[$i]\fP\&.
.sp
When using this feature together with list brackets, the brackets will be used from the inside out. \fB$$foo[5]\fP will use the fifth element of \fB$foo\fP as a variable name, instead of giving the fifth element of all the variables $foo refers to. That would instead be expressed as \fB$$foo[1][5]\fP (take the first element of \fB$foo\fP, use it as a variable name, then give the fifth element of that).
.IP [4] 5
Unlike bash or zsh, which will join with the first character of $IFS (which usually is space).
.SS Command substitution
.sp
The output of a command (or an entire \fI\%pipeline\fP) can be used as the arguments to another command.
.sp
When you write a command in parenthesis like \fBoutercommand (innercommand)\fP, the \fBinnercommand\fP will be executed first. Its output will be taken and each line given as a separate argument to \fBoutercommand\fP, which will then be executed. [5]
.sp
If the output is piped to string split or string split0 as the last step, those splits are used as they appear instead of splitting lines.
.sp
The exit status of the last run command substitution is available in the \fI\%status\fP variable if the substitution happens in the context of a set command (so \fBif set \-l (something)\fP checks if \fBsomething\fP returned true).
.sp
Only part of the output can be used, see \fI\%index range expansion\fP for details.
.sp
Fish has a default limit of 100 MiB on the data it will read in a command sustitution. If that limit is reached the command (all of it, not just the command substitution \- the outer command won\(aqt be executed at all) fails and \fB$status\fP is set to 122. This is so command substitutions can\(aqt cause the system to go out of memory, because typically your operating system has a much lower limit, so reading more than that would be useless and harmful. This limit can be adjusted with the \fBfish_read_limit\fP variable (\fI0\fP meaning no limit). This limit also affects the read command.
.sp
Examples:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# Outputs \(aqimage.png\(aq.
echo (basename image.jpg .jpg).png

# Convert all JPEG files in the current directory to the
# PNG format using the \(aqconvert\(aq program.
for i in *.jpg; convert $i (basename $i .jpg).png; end

# Set the \(ga\(gadata\(ga\(ga variable to the contents of \(aqdata.txt\(aq
# without splitting it into a list.
begin; set \-l IFS; set data (cat data.txt); end

# Set \(ga\(ga$data\(ga\(ga to the contents of data, splitting on NUL\-bytes.
set data (cat data | string split0)
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Sometimes you want to pass the output of a command to another command that only accepts files. If it\(aqs just one file, you can usually just pass it via a pipe, like:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
grep fish myanimallist1 | wc \-l
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
but if you need multiple or the command doesn\(aqt read from standard input, "process substitution" is useful. Other shells [6] allow this via \fBfoo <(bar) <(baz)\fP, and fish uses the psub command:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# Compare just the lines containing "fish" in two files:
diff \-u (grep fish myanimallist1 | psub) (grep fish myanimallist2 | psub)
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This creates a temporary file, stores the output of the command in that file and prints the filename, so it is given to the outer command.
.IP [5] 5
Setting \fB$IFS\fP to empty will disable line splitting. This is deprecated, use string split instead.
.IP [6] 5
Bash and Zsh at least, though it is a POSIX extension
.SS Brace expansion
.sp
Curly braces can be used to write comma\-separated lists. They will be expanded with each element becoming a new parameter, with the surrounding string attached. This is useful to save on typing, and to separate a variable name from surrounding text.
.sp
Examples:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> echo input.{c,h,txt}
input.c input.h input.txt

# Move all files with the suffix \(aq.c\(aq or \(aq.h\(aq to the subdirectory src.
> mv *.{c,h} src/

# Make a copy of \(gafile\(ga at \(gafile.bak\(ga.
> cp file{,.bak}

> set \-l dogs hot cool cute "good "
> echo {$dogs}dog
hotdog cooldog cutedog good dog
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If there is no "," or variable expansion between the curly braces, they will not be expanded:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# This {} isn\(aqt special
> echo foo\-{}
foo\-{}
# This passes "HEAD@{2}" to git
> git reset \-\-hard HEAD@{2}
> echo {{a,b}}
{a} {b} # because the inner brace pair is expanded, but the outer isn\(aqt.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If after expansion there is nothing between the braces, the argument will be removed (see \fI\%the cartesian product section\fP):
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> echo foo\-{$undefinedvar}
# Output is an empty line, just like a bare \(gaecho\(ga.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If there is nothing between a brace and a comma or two commas, it\(aqs interpreted as an empty element:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> echo {,,/usr}/bin
/bin /bin /usr/bin
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
To use a "," as an element, \fI\%quote\fP or \fI\%escape\fP it.
.SS Combining lists (Cartesian Product)
.sp
When lists are expanded with other parts attached, they are expanded with these parts still attached. Even if two lists are attached to each other, they are expanded in all combinations. This is referred to as the \fIcartesian product\fP (like in mathematics), and works basically like \fI\%brace expansion\fP\&.
.sp
Examples:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# Brace expansion is the most familiar:
# All elements in the brace combine with the parts outside of the braces
>_ echo {good,bad}" apples"
good apples bad apples

# The same thing happens with variable expansion.
>_ set \-l a x y z
>_ set \-l b 1 2 3

# $a is {x,y,z}, $b is {1,2,3},
# so this is \(gaecho {x,y,z}{1,2,3}\(ga
>_ echo $a$b
x1 y1 z1 x2 y2 z2 x3 y3 z3

# Same thing if something is between the lists
>_ echo $a"\-"$b
x\-1 y\-1 z\-1 x\-2 y\-2 z\-2 x\-3 y\-3 z\-3

# Or a brace expansion and a variable
>_ echo {x,y,z}$b
x1 y1 z1 x2 y2 z2 x3 y3 z3

# A combined brace\-variable expansion
>_ echo {$b}word
1word 2word 3word

# Special case: If $c has no elements, this expands to nothing
>_ echo {$c}word
# Output is an empty line
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Sometimes this may be unwanted, especially that tokens can disappear after expansion. In those cases, you should double\-quote variables \- \fBecho "$c"word\fP\&.
.sp
This also happens after \fI\%command substitution\fP\&. To avoid tokens disappearing there, make the inner command return a trailing newline, or store the output in a variable and double\-quote it.
.sp
E.g.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>_ set b 1 2 3
>_ echo (echo x)$b
x1 x2 x3
>_ echo (printf \(aq%s\(aq \(aq\(aq)banana
# the printf prints nothing, so this is nothing times "banana",
# which is nothing.
>_ echo (printf \(aq%s\en\(aq \(aq\(aq)banana
# the printf prints a newline,
# so the command substitution expands to an empty string,
# so this is \(ga\(aq\(aqbanana\(ga
banana
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This can be quite useful. For example, if you want to go through all the files in all the directories in $PATH, use:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
for file in $PATH/*
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Because \fI\%$PATH\fP is a list, this expands to all the files in all the directories in it. And if there are no directories in $PATH, the right answer here is to expand to no files.
.SS Index range expansion
.sp
Sometimes it\(aqs necessary to access only some of the elements of a \fI\%list\fP (all fish variables are lists), or some of the lines a \fI\%command substitution\fP outputs. Both are possible in fish by writing a set of indices in brackets, like:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# Make $var a list of four elements
set var one two three four
# Print the second:
echo $var[2]
# prints "two"
# or print the first three:
echo $var[1..3]
# prints "one two three"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
In index brackets, fish understands ranges written like \fBa..b\fP (\(aqa\(aq and \(aqb\(aq being indices). They are expanded into a sequence of indices from a to b (so \fBa a+1 a+2 ... b\fP), going up if b is larger and going down if a is larger. Negative indices can also be used \- they are taken from the end of the list, so \fB\-1\fP is the last element, and \fB\-2\fP the one before it. If an index doesn\(aqt exist the range is clamped to the next possible index.
.sp
If a list has 5 elements the indices go from 1 to 5, so a range of \fB2..16\fP will only go from element 2 to element 5.
.sp
If the end is negative the range always goes up, so \fB2..\-2\fP will go from element 2 to 4, and \fB2..\-16\fP won\(aqt go anywhere because there is no way to go from the second element to one that doesn\(aqt exist, while going up.
If the start is negative the range always goes down, so \fB\-2..1\fP will go from element 4 to 1, and \fB\-16..2\fP won\(aqt go anywhere because there is no way to go from an element that doesn\(aqt exist to the second element, while going down.
.sp
A missing starting index in a range defaults to 1. This is allowed if the range is the first index expression of the sequence. Similarly, a missing ending index, defaulting to \-1 is allowed for the last index range in the sequence.
.sp
Multiple ranges are also possible, separated with a space.
.sp
Some examples:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
echo (seq 10)[1 2 3]
# Prints: 1 2 3

# Limit the command substitution output
echo (seq 10)[2..5]
# Uses elements from 2 to 5
# Output is: 2 3 4 5

echo (seq 10)[7..]
# Prints: 7 8 9 10

# Use overlapping ranges:
echo (seq 10)[2..5 1..3]
# Takes elements from 2 to 5 and then elements from 1 to 3
# Output is: 2 3 4 5 1 2 3

# Reverse output
echo (seq 10)[\-1..1]
# Uses elements from the last output line to
# the first one in reverse direction
# Output is: 10 9 8 7 6 5 4 3 2 1

# The command substitution has only one line,
# so these will result in empty output:
echo (echo one)[2..\-1]
echo (echo one)[\-3..1]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The same works when setting or expanding variables:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# Reverse path variable
set PATH $PATH[\-1..1]
# or
set PATH[\-1..1] $PATH

# Use only n last items of the PATH
set n \-3
echo $PATH[$n..\-1]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Variables can be used as indices for expansion of variables, like so:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
set index 2
set letters a b c d
echo $letters[$index] # returns \(aqb\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
However using variables as indices for command substitution is currently not supported, so:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
echo (seq 5)[$index] # This won\(aqt work

set sequence (seq 5) # It needs to be written on two lines like this.
echo $sequence[$index] # returns \(aq2\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
When using indirect variable expansion with multiple \fB$\fP (\fB$$name\fP), you have to give all indices up to the variable you want to slice:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> set \-l list 1 2 3 4 5
> set \-l name list
> echo $$name[1]
1 2 3 4 5
> echo $$name[1..\-1][1..3] # or $$name[1][1..3], since $name only has one element.
1 2 3
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Home directory expansion
.sp
The \fB~\fP (tilde) character at the beginning of a parameter, followed by a username, is expanded into the home directory of the specified user. A lone \fB~\fP, or a \fB~\fP followed by a slash, is expanded into the home directory of the process owner:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ls ~/Music # lists my music directory

echo ~root # prints root\(aqs home directory, probably "/root"
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Combining different expansions
.sp
All of the above expansions can be combined. If several expansions result in more than one parameter, all possible combinations are created.
.sp
When combining multiple parameter expansions, expansions are performed in the following order:
.INDENT 0.0
.IP \(bu 2
Command substitutions
.IP \(bu 2
Variable expansions
.IP \(bu 2
Bracket expansion
.IP \(bu 2
Wildcard expansion
.UNINDENT
.sp
Expansions are performed from right to left, nested bracket expansions are performed from the inside and out.
.sp
Example:
.sp
If the current directory contains the files \(aqfoo\(aq and \(aqbar\(aq, the command \fBecho a(ls){1,2,3}\fP will output \fBabar1 abar2 abar3 afoo1 afoo2 afoo3\fP\&.
.SS Shell variables
.sp
Variables are a way to save data and pass it around. They can be used just by the shell, or they can be "\fI\%exported\fP", so that a copy of the variable is available to any external command the shell starts. An exported variable is referred to as an "environment variable".
.sp
To set a variable value, use the set command. A variable name can not be empty and can contain only letters, digits, and underscores. It may begin and end with any of those characters.
.sp
Example:
.sp
To set the variable \fBsmurf_color\fP to the value \fBblue\fP, use the command \fBset smurf_color blue\fP\&.
.sp
After a variable has been set, you can use the value of a variable in the shell through \fI\%variable expansion\fP\&.
.sp
Example:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
set smurf_color blue
echo Smurfs are usually $smurf_color
set pants_color red
echo Papa smurf, who is $smurf_color, wears $pants_color pants
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
So you set a variable with \fBset\fP, and use it with a \fB$\fP and the name.
.SS Variable scope
.sp
There are three kinds of variables in fish: universal, global and local variables.
.INDENT 0.0
.IP \(bu 2
Universal variables are shared between all fish sessions a user is running on one computer.
.IP \(bu 2
Global variables are specific to the current fish session, and will never be erased unless explicitly requested by using \fBset \-e\fP\&.
.IP \(bu 2
Local variables are specific to the current fish session, and associated with a specific block of commands, and automatically erased when a specific block goes out of scope. A block of commands is a series of commands that begins with one of the commands \fBfor\fP, \fBwhile\fP , \fBif\fP, \fBfunction\fP, \fBbegin\fP or \fBswitch\fP, and ends with the command \fBend\fP\&.
.UNINDENT
.sp
Variables can be explicitly set to be universal with the \fB\-U\fP or \fB\-\-universal\fP switch, global with the \fB\-g\fP or \fB\-\-global\fP switch, or local with the \fB\-l\fP or \fB\-\-local\fP switch.  The scoping rules when creating or updating a variable are:
.INDENT 0.0
.IP \(bu 2
When a scope is explicitly given, it will be used. If a variable of the same name exists in a different scope, that variable will not be changed.
.IP \(bu 2
When no scope is given, but a variable of that name exists, the variable of the smallest scope will be modified. The scope will not be changed.
.IP \(bu 2
As a special case, when no scope is given and no variable has been defined the variable will belong to the scope of the currently executing \fIfunction\fP\&. This is different from the \fB\-\-local\fP flag, which would make the variable local to the current \fIblock\fP\&.
.UNINDENT
.sp
There can be many variables with the same name, but different scopes. When you \fI\%use a variable\fP, the smallest scoped variable of that name will be used. If a local variable exists, it will be used instead of the global or universal variable of the same name.
.sp
Example:
.sp
There are a few possible uses for different scopes.
.sp
Typically inside funcions you should use local scope:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function something
    set \-l file /path/to/my/file
    if not test \-e "$file"
        set file /path/to/my/otherfile
    end
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If you want to set something in config.fish, or set something in a function and have it available for the rest of the session, global scope is a good choice:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# Don\(aqt shorten the working directory in the prompt
set \-g fish_prompt_pwd_dir_length 0

# Set my preferred cursor style:
function setcursors
   set \-g fish_cursor_default block
   set \-g fish_cursor_insert line
   set \-g fish_cursor_visual underscore
end

# Set my language
set \-gx LANG de_DE.UTF\-8
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If you want to set some personal customization, universal variables are nice:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# Typically you\(aqd run this interactively, fish takes care of keeping it.
set \-U fish_color_autosuggestion 555
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Here is an example of local vs function\-scoped variables:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
begin
    # This is a nice local scope where all variables will die
    set \-l pirate \(aqThere be treasure in them thar hills\(aq
    set captain Space, the final frontier
end

echo $pirate
# This will not output anything, since the pirate was local
echo $captain
# This will output the good Captain\(aqs speech since $captain had function\-scope.
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Overriding variables for a single command
.sp
If you want to override a variable for a single command, you can use "var=val" statements before the command:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# Call git status on another directory
# (can also be done via \(gagit \-C somerepo status\(ga)
GIT_DIR=somerepo git status
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Unlike other shells, fish will first set the variable and then perform other expansions on the line, so:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
set foo banana
foo=gagaga echo $foo # prints gagaga, while in other shells it might print "banana"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Multiple elements can be given in a \fI\%brace expansion\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# Call bash with a reasonable default path.
PATH={/usr,}/{s,}bin bash
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Or with a \fI\%glob\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# Run vlc on all mp3 files in the current directory
# If no file exists it will still be run with no arguments
mp3s=*.mp3 vlc $mp3s
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Unlike other shells, this does \fInot\fP inhibit any lookup (aliases or similar). Calling a command after setting a variable override will result in the exact same command being run.
.sp
This syntax is supported since fish 3.1.
.SS More on universal variables
.sp
Universal variables are variables that are shared between all the user\(aqs fish sessions on the computer. Fish stores many of its configuration options as universal variables. This means that in order to change fish settings, all you have to do is change the variable value once, and it will be automatically updated for all sessions, and preserved across computer reboots and login/logout.
.sp
To see universal variables in action, start two fish sessions side by side, and issue the following command in one of them \fBset fish_color_cwd blue\fP\&. Since \fBfish_color_cwd\fP is a universal variable, the color of the current working directory listing in the prompt will instantly change to blue on both terminals.
.sp
\fI\%Universal variables\fP are stored in the file \fB\&.config/fish/fish_variables\fP\&. Do not edit this file directly, as your edits may be overwritten. Edit the variables through fish scripts or by using fish interactively instead.
.sp
Do not append to universal variables in config.fish, because these variables will then get longer with each new shell instance. Instead, simply set them once at the command line.
.SS Variable scope for functions
.sp
When calling a function, all current local variables temporarily disappear. This shadowing of the local scope is needed since the variable namespace would become cluttered, making it very easy to accidentally overwrite variables from another function.
.sp
For example:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function shiver
    set phrase \(aqShiver me timbers\(aq
end

function avast
    set \-\-local phrase \(aqAvast, mateys\(aq
    # Calling the shiver function here can not
    # change any variables in the local scope
    shiver
    echo $phrase
end
avast

# Outputs "Avast, mateys"
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Exporting variables
.sp
Variables in fish can be "exported", so they will be inherited by any commands started by fish. In particular, this is necessary for variables used to configure external commands like $LESS or $GOPATH, but also for variables that contain general system settings like $PATH or $LANGUAGE. If an external command needs to know a variable, it needs to be exported.
.sp
This also applies to fish \- when it starts up, it receives environment variables from its parent (usually the terminal). These typically include system configuration like \fI\%$PATH\fP and \fI\%locale variables\fP\&.
.sp
Variables can be explicitly set to be exported with the \fB\-x\fP or \fB\-\-export\fP switch, or not exported with the \fB\-u\fP or \fB\-\-unexport\fP switch.  The exporting rules when setting a variable are identical to the scoping rules for variables:
.INDENT 0.0
.IP \(bu 2
If a variable is explicitly set to either be exported or not exported, that setting will be honored.
.IP \(bu 2
If a variable is not explicitly set to be exported or not exported, but has been previously defined, the previous exporting rule for the variable is kept.
.IP \(bu 2
Otherwise, by default, the variable will not be exported.
.IP \(bu 2
If a variable has local scope and is exported, any function called receives a \fIcopy\fP of it, so any changes it makes to the variable disappear once the function returns.
.IP \(bu 2
Global variables are accessible to functions whether they are exported or not.
.UNINDENT
.sp
As a naming convention, exported variables are in uppercase and unexported variables are in lowercase.
.sp
For example:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
set \-gx ANDROID_HOME ~/.android # /opt/android\-sdk
set \-gx CDPATH . ~ (test \-e ~/Videos; and echo ~/Videos)
set \-gx EDITOR emacs \-nw
set \-gx GOPATH ~/dev/go
set \-gx GTK2_RC_FILES "$XDG_CONFIG_HOME/gtk\-2.0/gtkrc"
set \-gx LESSHISTFILE "\-"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Note: Exporting is not a \fI\%scope\fP, but an additional state. It typically makes sense to make exported variables global as well, but local\-exported variables can be useful if you need something more specific than \fI\%Overrides\fP\&. They are \fIcopied\fP to functions so the function can\(aqt alter them outside, and still available to commands.
.SS Lists
.sp
Fish can store a list (or an "array" if you wish) of multiple strings inside of a variable:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> set mylist first second third
> printf \(aq%s\en\(aq $mylist # prints each element on its own line
first
second
third
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
To access one element of a list, use the index of the element inside of square brackets, like this:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
echo $PATH[3]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
List indices start at 1 in fish, not 0 like in other languages. This is because it requires less subtracting of 1 and many common Unix tools like \fBseq\fP work better with it (\fBseq 5\fP prints 1 to 5, not 0 to 5). An invalid index is silently ignored resulting in no value (not even an empty string, just no argument at all).
.sp
If you don\(aqt use any brackets, all the elements of the list will be passed to the command as separate items. This means you can iterate over a list with \fBfor\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
for i in $PATH
    echo $i is in the path
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This goes over every directory in $PATH separately and prints a line saying it is in the path.
.sp
To create a variable \fBsmurf\fP, containing the items \fBblue\fP and \fBsmall\fP, simply write:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
set smurf blue small
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
It is also possible to set or erase individual elements of a list:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# Set smurf to be a list with the elements \(aqblue\(aq and \(aqsmall\(aq
set smurf blue small

# Change the second element of smurf to \(aqevil\(aq
set smurf[2] evil

# Erase the first element
set \-e smurf[1]

# Output \(aqevil\(aq
echo $smurf
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If you specify a negative index when expanding or assigning to a list variable, the index will be taken from the \fIend\fP of the list. For example, the index \-1 is the last element of the list:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> set fruit apple orange banana
> echo $fruit[\-1]
banana

> echo $fruit[\-2..\-1]
orange
banana

> echo $fruit[\-1..1] # reverses the list
banana
orange
apple
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
As you see, you can use a range of indices, see \fI\%index range expansion\fP for details.
.sp
All lists are one\-dimensional and can\(aqt contain other lists, although it is possible to fake nested lists using dereferencing \- see \fI\%variable expansion\fP\&.
.sp
When a list is exported as an environment variable, it is either space or colon delimited, depending on whether it is a \fI\%path variable\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> set \-x smurf blue small
> set \-x smurf_PATH forest mushroom
> env | grep smurf
smurf=blue small
smurf_PATH=forest:mushroom
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Fish automatically creates lists from all environment variables whose name ends in PATH (like $PATH, $CDPATH or $MANPATH), by splitting them on colons. Other variables are not automatically split.
.sp
Lists can be inspected with the count or the contains commands:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
count $smurf
# 2

contains blue $smurf
# key found, exits with status 0

> contains \-i blue $smurf
1
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
A nice thing about lists is that they are passed to commands one element as one argument, so once you\(aqve set your list, you can just pass it:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
set \-l grep_args \-r "my string"
grep $grep_args . # will run the same as \(gagrep \-r "my string"\(ga .
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Unlike other shells, fish does not do "word splitting" \- elements in a list stay as they are, even if they contain spaces or tabs.
.SS Argument Handling
.sp
An important list is \fB$argv\fP, which contains the arguments to a function or script. For example:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function myfunction
    echo $argv[1]
    echo $argv[3]
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This function takes whatever arguments it gets and prints the first and third:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> myfunction first second third
first
third

> myfunction apple cucumber banana
apple
banana
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Commandline tools often get various options and flags and positional arguments, and $argv would contain all of these.
.sp
A more robust approach to argument handling is argparse, which checks the defined options and puts them into various variables, leaving only the positional arguments in $argv. Here\(aqs a simple example:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function mybetterfunction
    argparse h/help s/second \-\- $argv
    or return # exit if argparse failed because it found an option it didn\(aqt recognize \- it will print an error

    # If \-h or \-\-help is given, we print a little help text and return
    if set \-q _flag_help
        echo "mybetterfunction [\-h|\-\-help] [\-s|\-\-second] [ARGUMENTS...]"
        return 0
    end

    # If \-s or \-\-second is given, we print the second argument,
    # not the first and third.
    if set \-q _flag_second
        echo $argv[2]
    else
        echo $argv[1]
        echo $argv[3]
    end
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The options will be \fIremoved\fP from $argv, so $argv[2] is the second \fIpositional\fP argument now:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> mybetterfunction first \-s second third
second
.ft P
.fi
.UNINDENT
.UNINDENT
.SS PATH variables
.sp
Path variables are a special kind of variable used to support colon\-delimited path lists including PATH, CDPATH, MANPATH, PYTHONPATH, etc. All variables that end in "PATH" (case\-sensitive) become PATH variables.
.sp
PATH variables act as normal lists, except they are implicitly joined and split on colons.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
set MYPATH 1 2 3
echo "$MYPATH"
# 1:2:3
set MYPATH "$MYPATH:4:5"
echo $MYPATH
# 1 2 3 4 5
echo "$MYPATH"
# 1:2:3:4:5
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Variables can be marked or unmarked as PATH variables via the \fB\-\-path\fP and \fB\-\-unpath\fP options to \fBset\fP\&.
.SS Special variables
.sp
You can change the settings of fish by changing the values of certain variables.
.INDENT 0.0
.IP \(bu 2
\fBPATH\fP, a list of directories in which to search for commands
.IP \(bu 2
\fBCDPATH\fP, a list of directories in which the cd builtin looks for a new directory.
.IP \(bu 2
The locale variables \fBLANG\fP, \fBLC_ALL\fP, \fBLC_COLLATE\fP, \fBLC_CTYPE\fP, \fBLC_MESSAGES\fP, \fBLC_MONETARY\fP, \fBLC_NUMERIC\fP and \fBLC_TIME\fP set the language option for the shell and subprograms. See the section \fI\%Locale variables\fP for more information.
.IP \(bu 2
A number of variable starting with the prefixes \fBfish_color\fP and \fBfish_pager_color\fP\&. See Variables for changing highlighting colors for more information.
.IP \(bu 2
\fBfish_ambiguous_width\fP controls the computed width of ambiguous\-width characters. This should be set to 1 if your terminal renders these characters as single\-width (typical), or 2 if double\-width.
.IP \(bu 2
\fBfish_emoji_width\fP controls whether fish assumes emoji render as 2 cells or 1 cell wide. This is necessary because the correct value changed from 1 to 2 in Unicode 9, and some terminals may not be aware. Set this if you see graphical glitching related to emoji (or other "special" characters). It should usually be auto\-detected.
.IP \(bu 2
\fBFISH_DEBUG\fP and \fBFISH_DEBUG_OUTPUT\fP control what debug output fish generates and where it puts it, analogous to the \fB\-\-debug\fP and \fB\-\-debug\-output\fP options. These have to be set on startup, via e.g. \fBFISH_DEBUG=\(aqreader*\(aq FISH_DEBUG_OUTPUT=/tmp/fishlog fish\fP\&.
.IP \(bu 2
\fBfish_escape_delay_ms\fP sets how long fish waits for another key after seeing an escape, to distinguish pressing the escape key from the start of an escape sequence. The default is 30ms. Increasing it increases the latency but allows pressing escape instead of alt for alt+character bindings. For more information, see the chapter in the bind documentation\&.
.IP \(bu 2
\fBfish_greeting\fP, the greeting message printed on startup. This is printed by a function of the same name that can be overridden for more complicated changes (see funced
.IP \(bu 2
\fBfish_handle_reflow\fP, determines whether fish should try to repaint the commandline when the terminal resizes. In terminals that reflow text this should be disabled. Set it to 1 to enable, anything else to disable.
.IP \(bu 2
\fBfish_history\fP, the current history session name. If set, all subsequent commands within an
interactive fish session will be logged to a separate file identified by the value of the
variable. If unset, the default session name "fish" is used. If set to an
empty string, history is not saved to disk (but is still available within the interactive
session).
.IP \(bu 2
\fBfish_key_bindings\fP, the name of the function that sets up the keyboard shortcuts for the command\-line editor\&.
.IP \(bu 2
\fBfish_trace\fP, if set and not empty, will cause fish to print commands before they execute, similar to \fBset \-x\fP in bash. The trace is printed to the path given by the \-\-debug\-output option to fish (stderr by default).
.IP \(bu 2
\fBfish_user_paths\fP, a list of directories that are prepended to \fBPATH\fP\&. This can be a universal variable.
.IP \(bu 2
\fBumask\fP, the current file creation mask. The preferred way to change the umask variable is through the umask function. An attempt to set umask to an invalid value will always fail.
.IP \(bu 2
\fBBROWSER\fP, your preferred web browser. If this variable is set, fish will use the specified browser instead of the system default browser to display the fish documentation.
.UNINDENT
.sp
Fish also provides additional information through the values of certain environment variables. Most of these variables are read\-only and their value can\(aqt be changed with \fBset\fP\&.
.INDENT 0.0
.IP \(bu 2
\fB_\fP, the name of the currently running command (though this is deprecated, and the use of \fBstatus current\-command\fP is preferred).
.IP \(bu 2
\fBargv\fP, a list of arguments to the shell or function. \fBargv\fP is only defined when inside a function call, or if fish was invoked with a list of arguments, like \fBfish myscript.fish foo bar\fP\&. This variable can be changed.
.IP \(bu 2
\fBCMD_DURATION\fP, the runtime of the last command in milliseconds.
.IP \(bu 2
\fBCOLUMNS\fP and \fBLINES\fP, the current size of the terminal in height and width. These values are only used by fish if the operating system does not report the size of the terminal. Both variables must be set in that case otherwise a default of 80x24 will be used. They are updated when the window size changes.
.IP \(bu 2
\fBfish_kill_signal\fP, the signal that terminated the last foreground job, or 0 if the job exited normally.
.IP \(bu 2
\fBfish_pid\fP, the process ID (PID) of the shell.
.IP \(bu 2
\fBhistory\fP, a list containing the last commands that were entered.
.IP \(bu 2
\fBHOME\fP, the user\(aqs home directory. This variable can be changed.
.IP \(bu 2
\fBhostname\fP, the machine\(aqs hostname.
.IP \(bu 2
\fBIFS\fP, the internal field separator that is used for word splitting with the read builtin. Setting this to the empty string will also disable line splitting in \fI\%command substitution\fP\&. This variable can be changed.
.IP \(bu 2
\fBlast_pid\fP, the process ID (PID) of the last background process.
.IP \(bu 2
\fBPWD\fP, the current working directory.
.IP \(bu 2
\fBpipestatus\fP, a list of exit statuses of all processes that made up the last executed pipe. See \fI\%exit status\fP\&.
.IP \(bu 2
\fBSHLVL\fP, the level of nesting of shells. Fish increments this in interactive shells, otherwise it simply passes it along.
.IP \(bu 2
\fBstatus\fP, the \fI\%exit status\fP of the last foreground job to exit. If the job was terminated through a signal, the exit status will be 128 plus the signal number.
.IP \(bu 2
\fBstatus_generation\fP, the "generation" count of \fB$status\fP\&. This will be incremented only when the previous command produced an explicit status. (For example, background jobs will not increment this).
.IP \(bu 2
\fBUSER\fP, the current username. This variable can be changed.
.IP \(bu 2
\fBversion\fP, the version of the currently running fish (also available as \fBFISH_VERSION\fP for backward compatibility).
.IP \(bu 2
\fBfish_killring\fP, list of entries in fish kill ring.
.UNINDENT
.sp
As a convention, an uppercase name is usually used for exported variables, while lowercase variables are not exported. (\fBCMD_DURATION\fP is an exception for historical reasons). This rule is not enforced by fish, but it is good coding practice to use casing to distinguish between exported and unexported variables.
.sp
Fish also uses some variables internally, their name usually starting with \fB__fish\fP\&. These are internal and should not typically be modified directly.
.SS The status variable
.sp
Whenever a process exits, an exit status is returned to the program that started it (usually the shell). This exit status is an integer number, which tells the calling application how the execution of the command went. In general, a zero exit status means that the command executed without problem, but a non\-zero exit status means there was some form of problem.
.sp
Fish stores the exit status of the last process in the last job to exit in the \fBstatus\fP variable.
.sp
If fish encounters a problem while executing a command, the status variable may also be set to a specific value:
.INDENT 0.0
.IP \(bu 2
0 is generally the exit status of commands if they successfully performed the requested operation.
.IP \(bu 2
1 is generally the exit status of commands if they failed to perform the requested operation.
.IP \(bu 2
121 is generally the exit status of commands if they were supplied with invalid arguments.
.IP \(bu 2
123 means that the command was not executed because the command name contained invalid characters.
.IP \(bu 2
124 means that the command was not executed because none of the wildcards in the command produced any matches.
.IP \(bu 2
125 means that while an executable with the specified name was located, the operating system could not actually execute the command.
.IP \(bu 2
126 means that while a file with the specified name was located, it was not executable.
.IP \(bu 2
127 means that no function, builtin or command with the given name could be located.
.UNINDENT
.sp
If a process exits through a signal, the exit status will be 128 plus the number of the signal.
.sp
The status can be negated with not (or \fB!\fP), which is useful in a \fI\%condition\fP\&. This turns a status of 0 into 1 and any non\-zero status into 0.
.sp
There is also \fB$pipestatus\fP, which is a list of all \fBstatus\fP values of processes in a pipe. One difference is that not applies to \fB$status\fP, but not \fB$pipestatus\fP, because it loses information.
.sp
For example:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
not cat file | grep \-q fish
echo status is: $status pipestatus is $pipestatus
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Here \fB$status\fP reflects the status of \fBgrep\fP, which returns 0 if it found something, negated with \fBnot\fP (so 1 if it found something, 0 otherwise). \fB$pipestatus\fP reflects the status of \fBcat\fP (which returns non\-zero for example when it couldn\(aqt find the file) and \fBgrep\fP, without the negation.
.sp
So if both \fBcat\fP and \fBgrep\fP succeeded, \fB$status\fP would be 1 because of the \fBnot\fP, and \fB$pipestatus\fP would be 0 and 0.
.SS Locale variables
.sp
The "locale" of a program is its set of language and regional settings. In UNIX, there are a few separate variables to control separate things \- \fBLC_CTYPE\fP defines the text encoding while \fBLC_TIME\fP defines the time format.
.sp
The locale variables are: \fBLANG\fP, \fBLC_ALL\fP, \fBLC_COLLATE\fP, \fBLC_CTYPE\fP, \fBLC_MESSAGES\fP,  \fBLC_MONETARY\fP, \fBLC_NUMERIC\fP and \fBLC_TIME\fP\&. These variables work as follows: \fBLC_ALL\fP forces all the aspects of the locale to the specified value. If \fBLC_ALL\fP is set, all other locale variables will be ignored (this is typically not recommended!). The other \fBLC_\fP variables set the specified aspect of the locale information. \fBLANG\fP is a fallback value, it will be used if none of the \fBLC_\fP variables are specified.
.sp
The most common way to set the locale to use a command like \fBset \-gx LANG en_GB.utf8\fP, which sets the current locale to be the English language, as used in Great Britain, using the UTF\-8 character set. That way any program that requires one setting differently can easily override just that and doesn\(aqt have to resort to LC_ALL. For a list of available locales on your system, try \fBlocale \-a\fP\&.
.sp
Because it needs to handle output that might include multibyte characters (like e.g. emojis), fish will try to set its own internal LC_CTYPE to one that is UTF8\-capable even if given an effective LC_CTYPE of "C" (the default). This prevents issues with e.g. filenames given in autosuggestions even if the user started fish with LC_ALL=C. To turn this handling off, set \fBfish_allow_singlebyte_locale\fP to "1".
.SS Builtin commands
.sp
Fish includes a number of commands in the shell directly. We call these "builtins". These include:
.INDENT 0.0
.IP \(bu 2
Builtins that manipulate the shell state \- cd changes directory, set sets variables
.IP \(bu 2
Builtins for dealing with data, like string for strings and math for numbers, count for counting lines or arguments
.IP \(bu 2
status for asking about the shell\(aqs status
.IP \(bu 2
printf and echo for creating output
.IP \(bu 2
test for checking conditions
.IP \(bu 2
argparse for parsing function arguments
.IP \(bu 2
source to read a script in the current shell (so changes to variables stay) and eval to execute a string as script
.IP \(bu 2
random to get random numbers or pick a random element from a list
.UNINDENT
.sp
For a list of all builtins, use \fBbuiltin \-n\fP\&.
.sp
For a list of all builtins, functions and commands shipped with fish, see the list of commands\&. The documentation is also available by using the \fB\-\-help\fP switch.
.SS Shell variable and function names
.sp
The names given to variables and functions (so called "identifiers") have to follow certain rules:
.INDENT 0.0
.IP \(bu 2
A variable name cannot be empty. It can contain only letters, digits, and underscores. It may begin and end with any of those characters.
.IP \(bu 2
A function name cannot be empty. It may not begin with a hyphen ("\-") and may not contain a slash ("/"). All other characters, including a space, are valid.
.IP \(bu 2
A bind mode name (e.g., \fBbind \-m abc ...\fP) must be a valid variable name.
.UNINDENT
.sp
Other things have other restrictions. For instance what is allowed for file names depends on your system, but at the very least they cannot contain a "/" (because that is the path separator) or NULL byte (because that is how UNIX ends strings).
.SS Future feature flags
.sp
Feature flags are how fish stages changes that might break scripts. Breaking changes are introduced as opt\-in, in a few releases they become opt\-out, and eventually the old behavior is removed.
.sp
You can see the current list of features via \fBstatus features\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> status features
stderr\-nocaret  on     3.0      ^ no longer redirects stderr
qmark\-noglob    off    3.0      ? no longer globs
regex\-easyesc   off    3.1      string replace \-r needs fewer \e\e\(aqs
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
There are two breaking changes in fish 3.0: caret \fB^\fP no longer redirects stderr, and question mark \fB?\fP is no longer a glob.
.sp
There is one breaking change in fish 3.1: \fBstring replace \-r\fP does a superfluous round of escaping for the replacement, so escaping backslashes would look like \fBstring replace \-ra \(aq([ab])\(aq \(aq\e\e\e\e\e\e\e$1\(aq a\fP\&. This flag removes that if turned on, so \fB\(aq\e\e\e\e$1\(aq\fP is enough.
.sp
These changes are off by default. They can be enabled on a per session basis:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> fish \-\-features qmark\-noglob,stderr\-nocaret
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
or opted into globally for a user:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> set \-U fish_features stderr\-nocaret qmark\-noglob
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Features will only be set on startup, so this variable will only take effect if it is universal or exported.
.sp
You can also use the version as a group, so \fB3.0\fP is equivalent to "stderr\-nocaret" and "qmark\-noglob".
.sp
Prefixing a feature with \fBno\-\fP turns it off instead.
.SS Event handlers
.sp
When defining a new function in fish, it is possible to make it into an event handler, i.e. a function that is automatically run when a specific event takes place. Events that can trigger a handler currently are:
.INDENT 0.0
.IP \(bu 2
When a signal is delivered
.IP \(bu 2
When a job exits
.IP \(bu 2
When the value of a variable is updated
.IP \(bu 2
When the prompt is about to be shown
.UNINDENT
.sp
Example:
.sp
To specify a signal handler for the WINCH signal, write:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function my_signal_handler \-\-on\-signal WINCH
    echo Got WINCH signal!
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Please note that event handlers only become active when a function is loaded, which means you need to otherwise source or execute a function instead of relying on \fI\%autoloading\fP\&. One approach is to put it into your configuration file\&.
.sp
For more information on how to define new event handlers, see the documentation for the function command.
.SS Debugging fish scripts
.sp
Fish includes a built in debugging facility. The debugger allows you to stop execution of a script at an arbitrary point. When this happens you are presented with an interactive prompt. At this prompt you can execute any fish command (there are no debug commands as such). For example, you can check or change the value of any variables using printf and set\&. As another example, you can run status print\-stack\-trace to see how this breakpoint was reached. To resume normal execution of the script, simply type exit or \fBControl\fP+\fBD\fP\&.
.sp
To start a debug session simply run the builtin command breakpoint at the point in a function or script where you wish to gain control. Also, the default action of the TRAP signal is to call this builtin. So a running script can be debugged by sending it the TRAP signal with the \fBkill\fP command. Once in the debugger, it is easy to insert new breakpoints by using the funced function to edit the definition of a function.
.SS Commands
.sp
fish ships with the following commands:
.SS _ \- call fish\(aqs translations
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
_ STRING...
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fB_\fP translates its arguments into the current language, if possible.
.sp
It is equivalent to \fBgettext fish STRING\fP, meaning it can only be used to look up fish\(aqs own translations.
.sp
It requires fish to be built with gettext support. If that support is disabled, or there is no translation it will simply echo the argument back.
.sp
The language depends on the current locale, set with \fB$LANG\fP and \fB$LC_MESSAGES\fP\&.
.SS Options
.sp
\fB_\fP has no options.
.SS Examples
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> _ File
Datei
.ft P
.fi
.UNINDENT
.UNINDENT
.SS abbr \- manage fish abbreviations
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
abbr \-\-add [SCOPE] WORD EXPANSION
abbr \-\-erase WORD...
abbr \-\-rename [SCOPE] OLD_WORD NEW_WORD
abbr \-\-show
abbr \-\-list
abbr \-\-query WORD...
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBabbr\fP manages abbreviations \- user\-defined words that are replaced with longer phrases after they are entered.
.sp
For example, a frequently\-run command like \fBgit checkout\fP can be abbreviated to \fBgco\fP\&. After entering \fBgco\fP and pressing \fBSpace\fP or \fBEnter\fP, the full text \fBgit checkout\fP will appear in the command line.
.SS Options
.sp
The following options are available:
.INDENT 0.0
.IP \(bu 2
\fB\-a WORD EXPANSION\fP or \fB\-\-add WORD EXPANSION\fP Adds a new abbreviation, causing WORD to be expanded to EXPANSION.
.IP \(bu 2
\fB\-r OLD_WORD NEW_WORD\fP or \fB\-\-rename OLD_WORD NEW_WORD\fP Renames an abbreviation, from OLD_WORD to NEW_WORD.
.IP \(bu 2
\fB\-s\fP or \fB\-\-show\fP Show all abbreviations in a manner suitable for export and import.
.IP \(bu 2
\fB\-l\fP or \fB\-\-list\fP Lists all abbreviated words.
.IP \(bu 2
\fB\-e WORD\fP or \fB\-\-erase WORD...\fP Erase the given abbreviations.
.IP \(bu 2
\fB\-q\fP or \fB\-\-query\fP Return 0 (true) if one of the WORDs is an abbreviation.
.UNINDENT
.sp
In addition, when adding or renaming abbreviations:
.INDENT 0.0
.IP \(bu 2
\fB\-g\fP or \fB\-\-global\fP to use a global variable.
.IP \(bu 2
\fB\-U\fP or \fB\-\-universal\fP to use a universal variable (default).
.UNINDENT
.sp
See the "Internals" section for more on them.
.SS Examples
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
abbr \-a \-g gco git checkout
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Add a new abbreviation where \fBgco\fP will be replaced with \fBgit checkout\fP global to the current shell. This abbreviation will not be automatically visible to other shells unless the same command is run in those shells (such as when executing the commands in config.fish).
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
abbr \-a \-U l less
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Add a new abbreviation where \fBl\fP will be replaced with \fBless\fP universal so all shells. Note that you omit the \fB\-U\fP since it is the default.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
abbr \-r gco gch
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Renames an existing abbreviation from \fBgco\fP to \fBgch\fP\&.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
abbr \-e gco
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Erase the \fBgco\fP abbreviation.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ssh another_host abbr \-s | source
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Import the abbreviations defined on another_host over SSH.
.SS Internals
.sp
Each abbreviation is stored in its own global or universal variable. The name consists of the prefix \fB_fish_abbr_\fP followed by the WORD after being transformed by \fBstring escape style=var\fP\&. The WORD cannot contain a space but all other characters are legal.
.sp
Defining an abbreviation with global scope is slightly faster than universal scope (which is the default). But in general you\(aqll only want to use the global scope when defining abbreviations in a startup script like \fB~/.config/fish/config.fish\fP like this:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
if status \-\-is\-interactive
    abbr \-\-add \-\-global first \(aqecho my first abbreviation\(aq
    abbr \-\-add \-\-global second \(aqecho my second abbreviation\(aq
    abbr \-\-add \-\-global gco git checkout
    # etcetera
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
You can create abbreviations interactively and they will be visible to other fish sessions if you use the \fB\-U\fP or \fB\-\-universal\fP flag or don\(aqt explicitly specify the scope and the abbreviation isn\(aqt already defined with global scope. If you want it to be visible only to the current shell use the \fB\-g\fP or \fB\-\-global\fP flag.
.SS alias \- create a function
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
alias
alias [OPTIONS] NAME DEFINITION
alias [OPTIONS] NAME=DEFINITION
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBalias\fP is a simple wrapper for the \fBfunction\fP builtin, which creates a function wrapping a command. It has similar syntax to POSIX shell \fBalias\fP\&. For other uses, it is recommended to define a function\&.
.sp
\fBfish\fP marks functions that have been created by \fBalias\fP by including the command used to create them in the function description. You can list \fBalias\fP\-created functions by running \fBalias\fP without arguments. They must be erased using \fBfunctions \-e\fP\&.
.INDENT 0.0
.IP \(bu 2
\fBNAME\fP is the name of the alias
.IP \(bu 2
\fBDEFINITION\fP is the actual command to execute. The string \fB$argv\fP will be appended.
.UNINDENT
.sp
You cannot create an alias to a function with the same name. Note that spaces need to be escaped in the call to \fBalias\fP just like at the command line, \fIeven inside quoted parts\fP\&.
.sp
The following options are available:
.INDENT 0.0
.IP \(bu 2
\fB\-h\fP or \fB\-\-help\fP displays help about using this command.
.IP \(bu 2
\fB\-s\fP or \fB\-\-save\fP Automatically save the function created by the alias into your fish configuration directory using funcsave\&.
.UNINDENT
.SS Example
.sp
The following code will create \fBrmi\fP, which runs \fBrm\fP with additional arguments on every invocation.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
alias rmi="rm \-i"

# This is equivalent to entering the following function:
function rmi \-\-wraps rm \-\-description \(aqalias rmi=rm \-i\(aq
    rm \-i $argv
end

# This needs to have the spaces escaped or "Chrome.app..."
# will be seen as an argument to "/Applications/Google":
alias chrome=\(aq/Applications/Google\e Chrome.app/Contents/MacOS/Google\e Chrome banana\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS See more
.INDENT 0.0
.IP 1. 3
The function builtin this builds on.
.IP 2. 3
Functions\&.
.IP 3. 3
Function wrappers\&.
.UNINDENT
.SS and \- conditionally execute a command
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
COMMAND1; and COMMAND2
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBand\fP is used to execute a command if the previous command was successful (returned a status of 0).
.sp
\fBand\fP statements may be used as part of the condition in an while or if block.
.sp
\fBand\fP does not change the current exit status itself, but the command it runs most likely will. The exit status of the last foreground command to exit can always be accessed using the $status variable.
.SS Example
.sp
The following code runs the \fBmake\fP command to build a program. If the build succeeds, \fBmake\fP\(aqs exit status is 0, and the program is installed. If either step fails, the exit status is 1, and \fBmake clean\fP is run, which removes the files created by the build process.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
make; and make install; or make clean
.ft P
.fi
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
or command
.UNINDENT
.SS argparse \- parse options passed to a fish script or function
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
argparse [OPTIONS] OPTION_SPEC... \-\- [ARG...]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
This command makes it easy for fish scripts and functions to handle arguments like how fish builtin commands handle their arguments. You pass arguments that define the known options, followed by a literal \fB\-\-\fP, then the arguments to be parsed (which might also include a literal \fB\-\-\fP). \fBargparse\fP then sets variables to indicate the passed options with their values, and sets $argv (and always $argv) to the remaining arguments. More on this in the \fI\%usage\fP section below.
.sp
Each option specification (\fBOPTION_SPEC\fP) is written in the \fI\%domain specific language\fP described below. All OPTION_SPECs must appear after any argparse flags and before the \fB\-\-\fP that separates them from the arguments to be parsed.
.sp
Each option that is seen in the ARG list will result in variables named \fB_flag_X\fP, where \fBX\fP is the short flag letter and the long flag name (if they are defined). For example a \fB\-\-help\fP option could cause argparse to define one variable called \fB_flag_h\fP and another called \fB_flag_help\fP\&.
.sp
The variables will be set with local scope (i.e., as if the script had done \fBset \-l _flag_X\fP). If the flag is a boolean (that is, it just is passed or not, it doesn\(aqt have a value) the values are the short and long flags seen. If the option is not a boolean the values will be zero or more values corresponding to the values collected when the ARG list is processed. If the flag was not seen the flag variable will not be set.
.SS Options
.sp
The following \fBargparse\fP options are available. They must appear before all OPTION_SPECs:
.INDENT 0.0
.IP \(bu 2
\fB\-n\fP or \fB\-\-name\fP is the command name for use in error messages. By default the current function name will be used, or \fBargparse\fP if run outside of a function.
.IP \(bu 2
\fB\-x\fP or \fB\-\-exclusive\fP should be followed by a comma separated list of short or long options that are mutually exclusive. You can use this more than once to define multiple sets of mutually exclusive options.
.IP \(bu 2
\fB\-N\fP or \fB\-\-min\-args\fP is followed by an integer that defines the minimum number of acceptable non\-option arguments. The default is zero.
.IP \(bu 2
\fB\-X\fP or \fB\-\-max\-args\fP is followed by an integer that defines the maximum number of acceptable non\-option arguments. The default is infinity.
.IP \(bu 2
\fB\-i\fP or \fB\-\-ignore\-unknown\fP ignores unknown options, keeping them and their arguments in $argv instead.
.IP \(bu 2
\fB\-s\fP or \fB\-\-stop\-nonopt\fP causes scanning the arguments to stop as soon as the first non\-option argument is seen. Among other things, this is useful to implement subcommands that have their own options.
.IP \(bu 2
\fB\-h\fP or \fB\-\-help\fP displays help about using this command.
.UNINDENT
.SS Usage
.sp
To use this command, pass the option specifications (\fBOPTION_SPEC\fP), then a mandatory \fB\-\-\fP, and then the arguments you want to have parsed.
.sp
A simple example:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
argparse \-\-name=my_function \(aqh/help\(aq \(aqn/name=\(aq \-\- $argv
or return
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If \fB$argv\fP is empty then there is nothing to parse and \fBargparse\fP returns zero to indicate success. If \fB$argv\fP is not empty then it is checked for flags \fB\-h\fP, \fB\-\-help\fP, \fB\-n\fP and \fB\-\-name\fP\&. If they are found they are removed from the arguments and local variables called \fB_flag_OPTION\fP are set so the script can determine which options were seen. If \fB$argv\fP doesn\(aqt have any errors, like a missing mandatory value for an option, then \fBargparse\fP exits with a status of zero. Otherwise it writes appropriate error messages to stderr and exits with a status of one.
.sp
The \fBor return\fP means that the function returns \fBargparse\fP\(aqs status if it failed, so if it goes on \fBargparse\fP succeeded.
.sp
The \fB\-\-\fP argument is required. You do not have to include any arguments after the \fB\-\-\fP but you must include the \fB\-\-\fP\&. For example, this is acceptable:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
set \-l argv
argparse \(aqh/help\(aq \(aqn/name\(aq \-\- $argv
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
But this is not:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
set \-l argv
argparse \(aqh/help\(aq \(aqn/name\(aq $argv
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The first \fB\-\-\fP seen is what allows the \fBargparse\fP command to reliably separate the option specifications and options to \fBargparse\fP itself (like \fB\-\-ignore\-unknown\fP) from the command arguments, so it is required.
.SS Option Specifications
.sp
Each option specification consists of:
.INDENT 0.0
.IP \(bu 2
An optional alphanumeric short flag letter, followed by a \fB/\fP if the short flag can be used by someone invoking your command or, for backwards compatibility, a \fB\-\fP if it should not be exposed as a valid short flag (in which case it will also not be exposed as a flag variable).
.IP \(bu 2
An optional long flag name. If not present then only the short flag letter can be used, and if that is not present either it\(aqs an error.
.IP \(bu 2
Nothing if the flag is a boolean that takes no argument or is an integer flag, or
.IP \(bu 2
\fB=\fP if it requires a value and only the last instance of the flag is saved, or
.IP \(bu 2
\fB=?\fP it takes an optional value and only the last instance of the flag is saved, or
.IP \(bu 2
\fB=+\fP if it requires a value and each instance of the flag is saved.
.IP \(bu 2
Optionally a \fB!\fP followed by fish script to validate the value. Typically this will be a function to run. If the exit status is zero the value for the flag is valid. If non\-zero the value is invalid. Any error messages should be written to stdout (not stderr). See the section on \fI\%Flag Value Validation\fP for more information.
.UNINDENT
.sp
See the fish_opt command for a friendlier but more verbose way to create option specifications.
.sp
If a flag is not seen when parsing the arguments then the corresponding _flag_X var(s) will not be set.
.SS Integer flag
.sp
Sometimes commands take numbers directly as options, like \fBfoo \-55\fP\&. To allow this one option spec can have the \fB#\fP modifier so that any integer will be understood as this flag, and the last number will be given as its value (as if \fB=\fP was used).
.sp
The \fB#\fP must follow the short flag letter (if any), and other modifiers like \fB=\fP are not allowed, except for \fB\-\fP (for backwards compatibility):
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
m#maximum
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This does not read numbers given as \fB+NNN\fP, only those that look like flags \- \fB\-NNN\fP\&.
.SS Note: Optional arguments
.sp
An option defined with \fB=?\fP can take optional arguments. Optional arguments have to be \fIdirectly attached\fP to the option they belong to.
.sp
That means the argument will only be used for the option if you use it like:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
cmd \-\-flag=value
# or
cmd  \-fvalue
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
but not if used like:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
cmd \-\-flag value
# "value" here will be used as a positional argument
# and "\-\-flag" won\(aqt have an argument.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If this weren\(aqt the case, using an option without an optional argument would be difficult if you also wanted to use positional arguments.
.sp
For example:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
grep \-\-color auto
# Here "auto" will be used as the search string,
# "color" will not have an argument and will fall back to the default,
# which also *happens to be* auto.
grep \-\-color always
# Here grep will still only use color "auto"matically
# and search for the string "always".
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This isn\(aqt specific to argparse but common to all things using \fBgetopt(3)\fP (if they have optional arguments at all). That \fBgrep\fP example is how GNU grep actually behaves.
.SS Flag Value Validation
.sp
Sometimes you need to validate the option values. For example, that it is a valid integer within a specific range, or an ip address, or something entirely different. You can always do this after \fBargparse\fP returns but you can also request that \fBargparse\fP perform the validation by executing arbitrary fish script. To do so simply append an \fB!\fP (exclamation\-mark) then the fish script to be run. When that code is executed three vars will be defined:
.INDENT 0.0
.IP \(bu 2
\fB_argparse_cmd\fP will be set to the value of the value of the \fBargparse \-\-name\fP value.
.IP \(bu 2
\fB_flag_name\fP will be set to the short or long flag that being processed.
.IP \(bu 2
\fB_flag_value\fP will be set to the value associated with the flag being processed.
.UNINDENT
.sp
These variables are passed to the function as local exported variables.
.sp
The script should write any error messages to stdout, not stderr. It should return a status of zero if the flag value is valid otherwise a non\-zero status to indicate it is invalid.
.sp
Fish ships with a \fB_validate_int\fP function that accepts a \fB\-\-min\fP and \fB\-\-max\fP flag. Let\(aqs say your command accepts a \fB\-m\fP or \fB\-\-max\fP flag and the minimum allowable value is zero and the maximum is 5. You would define the option like this: \fBm/max=!_validate_int \-\-min 0 \-\-max 5\fP\&. The default if you just call \fB_validate_int\fP without those flags is to simply check that the value is a valid integer with no limits on the min or max value allowed.
.SS Example OPTION_SPECs
.sp
Some OPTION_SPEC examples:
.INDENT 0.0
.IP \(bu 2
\fBh/help\fP means that both \fB\-h\fP and \fB\-\-help\fP are valid. The flag is a boolean and can be used more than once. If either flag is used then \fB_flag_h\fP and \fB_flag_help\fP will be set to the count of how many times either flag was seen.
.IP \(bu 2
\fBhelp\fP means that only \fB\-\-help\fP is valid. The flag is a boolean and can be used more than once. If it is used then \fB_flag_help\fP will be set to the count of how many times the long flag was seen. Also \fBh\-help\fP (with an arbitrary short letter) for backwards compatibility.
.IP \(bu 2
\fBlongonly=\fP is a flag \fB\-\-longonly\fP that requires an option, there is no short flag or even short flag variable.
.IP \(bu 2
\fBn/name=\fP means that both \fB\-n\fP and \fB\-\-name\fP are valid. It requires a value and can be used at most once. If the flag is seen then \fB_flag_n\fP and \fB_flag_name\fP will be set with the single mandatory value associated with the flag.
.IP \(bu 2
\fBn/name=?\fP means that both \fB\-n\fP and \fB\-\-name\fP are valid. It accepts an optional value and can be used at most once. If the flag is seen then \fB_flag_n\fP and \fB_flag_name\fP will be set with the value associated with the flag if one was provided else it will be set with no values.
.IP \(bu 2
\fBname=+\fP means that only \fB\-\-name\fP is valid. It requires a value and can be used more than once. If the flag is seen then \fB_flag_name\fP will be set with the values associated with each occurrence.
.IP \(bu 2
\fBx\fP means that only \fB\-x\fP is valid. It is a boolean that can be used more than once. If it is seen then \fB_flag_x\fP will be set to the count of how many times the flag was seen.
.IP \(bu 2
\fBx=\fP, \fBx=?\fP, and \fBx=+\fP are similar to the n/name examples above but there is no long flag alternative to the short flag \fB\-x\fP\&.
.IP \(bu 2
\fB#max\fP (or \fB#\-max\fP) means that flags matching the regex "^\-\-?\ed+$" are valid. When seen they are assigned to the variable \fB_flag_max\fP\&. This allows any valid positive or negative integer to be specified by prefixing it with a single "\-". Many commands support this idiom. For example \fBhead \-3 /a/file\fP to emit only the first three lines of /a/file.
.IP \(bu 2
\fBn#max\fP means that flags matching the regex "^\-\-?\ed+$" are valid. When seen they are assigned to the variables \fB_flag_n\fP and \fB_flag_max\fP\&. This allows any valid positive or negative integer to be specified by prefixing it with a single "\-". Many commands support this idiom. For example \fBhead \-3 /a/file\fP to emit only the first three lines of /a/file. You can also specify the value using either flag: \fB\-n NNN\fP or \fB\-\-max NNN\fP in this example.
.IP \(bu 2
\fB#longonly\fP causes the last integer option to be stored in \fB_flag_longonly\fP\&.
.UNINDENT
.sp
After parsing the arguments the \fBargv\fP variable is set with local scope to any values not already consumed during flag processing. If there are no unbound values the variable is set but \fBcount $argv\fP will be zero.
.sp
If an error occurs during argparse processing it will exit with a non\-zero status and print error messages to stderr.
.SS begin \- start a new block of code
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
begin; [COMMANDS...;] end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBbegin\fP is used to create a new block of code.
.sp
A block allows the introduction of a new variable scope, redirection of the input or output of a set of commands as a group, or to specify precedence when using the conditional commands like \fBand\fP\&.
.sp
The block is unconditionally executed. \fBbegin; ...; end\fP is equivalent to \fBif true; ...; end\fP\&.
.sp
\fBbegin\fP does not change the current exit status itself. After the block has completed, \fB$status\fP will be set to the status returned by the most recent command.
.SS Example
.sp
The following code sets a number of variables inside of a block scope. Since the variables are set inside the block and have local scope, they will be automatically deleted when the block ends.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
begin
    set \-l PIRATE Yarrr

    ...
end

echo $PIRATE
# This will not output anything, since the PIRATE variable
# went out of scope at the end of the block
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
In the following code, all output is redirected to the file out.html.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
begin
    echo $xml_header
    echo $html_header
    if test \-e $file
        ...
    end
    ...
end > out.html
.ft P
.fi
.UNINDENT
.UNINDENT
.SS bg \- send jobs to background
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
bg [PID...]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBbg\fP sends jobs to the background, resuming them if they are stopped.
.sp
A background job is executed simultaneously with fish, and does not have access to the keyboard. If no job is specified, the last job to be used is put in the background. If \fBPID\fP is specified, the jobs containing the specified process IDs are put in the background.
.sp
For compatibility with other shells, job expansion syntax is supported for \fBbg\fP\&. A PID of the format \fB%1\fP will be interpreted as the PID of job 1. Job numbers can be seen in the output of jobs\&.
.sp
When at least one of the arguments isn\(aqt a valid job specifier,
\fBbg\fP will print an error without backgrounding anything.
.sp
When all arguments are valid job specifiers, \fBbg\fP will background all matching jobs that exist.
.SS Example
.sp
\fBbg 123 456 789\fP will background the jobs that contain processes 123, 456 and 789.
.sp
If only 123 and 789 exist, it will still background them and print an error about 456.
.sp
\fBbg 123 banana\fP or \fBbg banana 123\fP will complain that "banana" is not a valid job specifier.
.sp
\fBbg %1\fP will background job 1.
.SS bind \- handle fish key bindings
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
bind [(\-M | \-\-mode) MODE] [(\-m | \-\-sets\-mode) NEW_MODE] [\-\-preset | \-\-user] [(\-s | \-\-silent)] [(\-k | \-\-key)] SEQUENCE COMMAND [COMMAND...]
bind [(\-M | \-\-mode) MODE] [(\-k | \-\-key)] [\-\-preset] [\-\-user] SEQUENCE
bind (\-K | \-\-key\-names) [(\-a | \-\-all)] [\-\-preset] [\-\-user]
bind (\-f | \-\-function\-names)
bind (\-L | \-\-list\-modes)
bind (\-e | \-\-erase) [(\-M | \-\-mode) MODE] [\-\-preset] [\-\-user] (\-a | \-\-all | [(\-k | \-\-key)] SEQUENCE [SEQUENCE...])
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBbind\fP manages bindings.
.sp
It can add bindings if given a SEQUENCE of characters to bind to. These should be written as fish escape sequences\&. The most important of these are \fB\ec\fP for the control key, and \fB\ee\fP for escape, and because of historical reasons also the Alt key (sometimes also called "Meta").
.sp
For example, \fBAlt\fP+\fBW\fP can be written as \fB\eew\fP, and \fBControl\fP+\fBX\fP (^X) can be written as \fB\ecx\fP\&. Note that Alt\-based key bindings are case sensitive and Control\-based key bindings are not. This is a constraint of text\-based terminals, not \fBfish\fP\&.
.sp
The generic key binding that matches if no other binding does can be set by specifying a \fBSEQUENCE\fP of the empty string (that is, \fB\(aq\(aq\fP ). For most key bindings, it makes sense to bind this to the \fBself\-insert\fP function (i.e. \fBbind \(aq\(aq self\-insert\fP). This will insert any keystrokes not specifically bound to into the editor. Non\-printable characters are ignored by the editor, so this will not result in control sequences being inserted.
.sp
If the \fB\-k\fP switch is used, the name of a key (such as \(aqdown\(aq, \(aqup\(aq or \(aqbackspace\(aq) is used instead of a sequence. The names used are the same as the corresponding curses variables, but without the \(aqkey_\(aq prefix. (See \fBterminfo(5)\fP for more information, or use \fBbind \-\-key\-names\fP for a list of all available named keys). Normally this will print an error if the current \fB$TERM\fP entry doesn\(aqt have a given key, unless the \fB\-s\fP switch is given.
.sp
To find out what sequence a key combination sends, you can use fish_key_reader\&.
.sp
\fBCOMMAND\fP can be any fish command, but it can also be one of a set of special input functions. These include functions for moving the cursor, operating on the kill\-ring, performing tab completion, etc. Use \fBbind \-\-function\-names\fP for a complete list of these input functions.
.sp
When \fBCOMMAND\fP is a shellscript command, it is a good practice to put the actual code into a function and simply bind to the function name. This way it becomes significantly easier to test the function while editing, and the result is usually more readable as well.
.sp
If a script produces output, it should finish by calling \fBcommandline \-f repaint\fP to tell fish that a repaint is in order.
.sp
Note that special input functions cannot be combined with ordinary shell script commands. The commands must be entirely a sequence of special input functions (from \fBbind \-f\fP) or all shell script commands (i.e., valid fish script).
.sp
If no \fBSEQUENCE\fP is provided, all bindings (or just the bindings in the given \fBMODE\fP) are printed. If \fBSEQUENCE\fP is provided but no \fBCOMMAND\fP, just the binding matching that sequence is printed.
.sp
To save custom keybindings, put the \fBbind\fP statements into config.fish\&. Alternatively, fish also automatically executes a function called \fBfish_user_key_bindings\fP if it exists.
.sp
Key bindings may use "modes", which mimics Vi\(aqs modal input behavior. The default mode is "default", and every bind applies to a single mode. The mode can be viewed/changed with the \fB$fish_bind_mode\fP variable.
.SS Options
.sp
The following options are available:
.INDENT 0.0
.IP \(bu 2
\fB\-k\fP or \fB\-\-key\fP Specify a key name, such as \(aqleft\(aq or \(aqbackspace\(aq instead of a character sequence
.IP \(bu 2
\fB\-K\fP or \fB\-\-key\-names\fP Display a list of available key names. Specifying \fB\-a\fP or \fB\-\-all\fP includes keys that don\(aqt have a known mapping
.IP \(bu 2
\fB\-f\fP or \fB\-\-function\-names\fP Display a list of available input functions
.IP \(bu 2
\fB\-L\fP or \fB\-\-list\-modes\fP Display a list of defined bind modes
.IP \(bu 2
\fB\-M MODE\fP or \fB\-\-mode MODE\fP Specify a bind mode that the bind is used in. Defaults to "default"
.IP \(bu 2
\fB\-m NEW_MODE\fP or \fB\-\-sets\-mode NEW_MODE\fP Change the current mode to \fBNEW_MODE\fP after this binding is executed
.IP \(bu 2
\fB\-e\fP or \fB\-\-erase\fP Erase the binding with the given sequence and mode instead of defining a new one. Multiple sequences can be specified with this flag. Specifying \fB\-a\fP or \fB\-\-all\fP with \fB\-M\fP or \fB\-\-mode\fP erases all binds in the given mode regardless of sequence. Specifying \fB\-a\fP or \fB\-\-all\fP without \fB\-M\fP or \fB\-\-mode\fP erases all binds in all modes regardless of sequence.
.IP \(bu 2
\fB\-a\fP or \fB\-\-all\fP See \fB\-\-erase\fP and \fB\-\-key\-names\fP
.IP \(bu 2
\fB\-\-preset\fP and \fB\-\-user\fP specify if bind should operate on user or preset bindings. User bindings take precedence over preset bindings when fish looks up mappings. By default, all \fBbind\fP invocations work on the "user" level except for listing, which will show both levels. All invocations except for inserting new bindings can operate on both levels at the same time (if both \fB\-\-preset\fP and \fB\-\-user\fP are given). \fB\-\-preset\fP should only be used in full binding sets (like when working on \fBfish_vi_key_bindings\fP).
.UNINDENT
.SS Special input functions
.sp
The following special input functions are available:
.INDENT 0.0
.IP \(bu 2
\fBand\fP, only execute the next function if the previous succeeded (note: only some functions report success)
.IP \(bu 2
\fBaccept\-autosuggestion\fP, accept the current autosuggestion completely
.IP \(bu 2
\fBbackward\-char\fP, moves one character to the left
.IP \(bu 2
\fBbackward\-bigword\fP, move one whitespace\-delimited word to the left
.IP \(bu 2
\fBbackward\-delete\-char\fP, deletes one character of input to the left of the cursor
.IP \(bu 2
\fBbackward\-kill\-bigword\fP, move the whitespace\-delimited word to the left of the cursor to the killring
.IP \(bu 2
\fBbackward\-kill\-line\fP, move everything from the beginning of the line to the cursor to the killring
.IP \(bu 2
\fBbackward\-kill\-path\-component\fP, move one path component to the left of the cursor to the killring. A path component is everything likely to belong to a path component, i.e. not any of the following: \fI/={,}\(aq":@ |;<>&\fP, plus newlines and tabs.
.IP \(bu 2
\fBbackward\-kill\-word\fP, move the word to the left of the cursor to the killring. The "word" here is everything up to punctuation or whitespace.
.IP \(bu 2
\fBbackward\-word\fP, move one word to the left
.IP \(bu 2
\fBbeginning\-of\-buffer\fP, moves to the beginning of the buffer, i.e. the start of the first line
.IP \(bu 2
\fBbeginning\-of\-history\fP, move to the beginning of the history
.IP \(bu 2
\fBbeginning\-of\-line\fP, move to the beginning of the line
.IP \(bu 2
\fBbegin\-selection\fP, start selecting text
.IP \(bu 2
\fBcancel\fP, cancel the current commandline and replace it with a new empty one
.IP \(bu 2
\fBcancel\-commandline\fP, cancel the current commandline and replace it with a new empty one, leaving the old one in place with a marker to show that it was cancelled
.IP \(bu 2
\fBcapitalize\-word\fP, make the current word begin with a capital letter
.IP \(bu 2
\fBcomplete\fP, guess the remainder of the current token
.IP \(bu 2
\fBcomplete\-and\-search\fP, invoke the searchable pager on completion options (for convenience, this also moves backwards in the completion pager)
.IP \(bu 2
\fBdelete\-char\fP, delete one character to the right of the cursor
.IP \(bu 2
\fBdelete\-or\-exit\fP, deletes one character to the right of the cursor or exits the shell if the commandline is empty.
.IP \(bu 2
\fBdown\-line\fP, move down one line
.IP \(bu 2
\fBdowncase\-word\fP, make the current word lowercase
.IP \(bu 2
\fBend\-of\-buffer\fP, moves to the end of the buffer, i.e. the end of the first line
.IP \(bu 2
\fBend\-of\-history\fP, move to the end of the history
.IP \(bu 2
\fBend\-of\-line\fP, move to the end of the line
.IP \(bu 2
\fBend\-selection\fP, end selecting text
.IP \(bu 2
\fBexpand\-abbr\fP, expands any abbreviation currently under the cursor
.IP \(bu 2
\fBexecute\fP, run the current commandline
.IP \(bu 2
\fBexit\fP, exit the shell
.IP \(bu 2
\fBforward\-bigword\fP, move one whitespace\-delimited word to the right
.IP \(bu 2
\fBforward\-char\fP, move one character to the right
.IP \(bu 2
\fBforward\-single\-char\fP, move one character to the right; if an autosuggestion is available, only take a single char from it
.IP \(bu 2
\fBforward\-word\fP, move one word to the right
.IP \(bu 2
\fBhistory\-search\-backward\fP, search the history for the previous match
.IP \(bu 2
\fBhistory\-search\-forward\fP, search the history for the next match
.IP \(bu 2
\fBhistory\-prefix\-search\-backward\fP, search the history for the previous prefix match
.IP \(bu 2
\fBhistory\-prefix\-search\-forward\fP, search the history for the next prefix match
.IP \(bu 2
\fBhistory\-token\-search\-backward\fP, search the history for the previous matching argument
.IP \(bu 2
\fBhistory\-token\-search\-forward\fP, search the history for the next matching argument
.IP \(bu 2
\fBforward\-jump\fP and \fBbackward\-jump\fP, read another character and jump to its next occurence after/before the cursor
.IP \(bu 2
\fBforward\-jump\-till\fP and \fBbackward\-jump\-till\fP, jump to right \fIbefore\fP the next occurence
.IP \(bu 2
\fBrepeat\-jump\fP and \fBrepeat\-jump\-reverse\fP, redo the last jump in the same/opposite direction
.IP \(bu 2
\fBkill\-bigword\fP, move the next whitespace\-delimited word to the killring
.IP \(bu 2
\fBkill\-line\fP, move everything from the cursor to the end of the line to the killring
.IP \(bu 2
\fBkill\-selection\fP, move the selected text to the killring
.IP \(bu 2
\fBkill\-whole\-line\fP, move the line to the killring
.IP \(bu 2
\fBkill\-word\fP, move the next word to the killring
.IP \(bu 2
\fBor\fP, only execute the next function if the previous succeeded (note: only some functions report success)
.IP \(bu 2
\fBpager\-toggle\-search\fP, toggles the search field if the completions pager is visible.
.IP \(bu 2
\fBrepaint\fP, reexecutes the prompt functions and redraws the prompt (also \fBforce\-repaint\fP for backwards\-compatibility)
.IP \(bu 2
\fBrepaint\-mode\fP, reexecutes the fish_mode_prompt and redraws the prompt. This is useful for vi\-mode. If no \fBfish_mode_prompt\fP exists or it prints nothing, it acts like a normal repaint.
.IP \(bu 2
\fBself\-insert\fP, inserts the matching sequence into the command line
.IP \(bu 2
\fBself\-insert\-notfirst\fP, inserts the matching sequence into the command line, unless the cursor is at the beginning
.IP \(bu 2
\fBsuppress\-autosuggestion\fP, remove the current autosuggestion. Returns true if there was a suggestion to remove.
.IP \(bu 2
\fBswap\-selection\-start\-stop\fP, go to the other end of the highlighted text without changing the selection
.IP \(bu 2
\fBtranspose\-chars\fP, transpose two characters to the left of the cursor
.IP \(bu 2
\fBtranspose\-words\fP, transpose two words to the left of the cursor
.IP \(bu 2
\fBtogglecase\-char\fP, toggle the capitalisation (case) of the character under the cursor
.IP \(bu 2
\fBtogglecase\-selection\fP, toggle the capitalisation (case) of the selection
.IP \(bu 2
\fBinsert\-line\-under\fP, add a new line under the current line
.IP \(bu 2
\fBinsert\-line\-over\fP, add a new line over the current line
.IP \(bu 2
\fBup\-line\fP, move up one line
.IP \(bu 2
\fBundo\fP and \fBredo\fP, revert or redo the most recent edits on the command line
.IP \(bu 2
\fBupcase\-word\fP, make the current word uppercase
.IP \(bu 2
\fByank\fP, insert the latest entry of the killring into the buffer
.IP \(bu 2
\fByank\-pop\fP, rotate to the previous entry of the killring
.UNINDENT
.SS Additional functions
.sp
The following functions are included as normal functions, but are particularly useful for input editing:
.INDENT 0.0
.IP \(bu 2
\fBup\-or\-search\fP and \fBdown\-or\-search\fP,  which move the cursor or search the history depending on the cursor position and current mode
.IP \(bu 2
\fBedit_command_buffer\fP, open the visual editor (controlled by the \fBVISUAL\fP or \fBEDITOR\fP environment variables) with the current command\-line contents
.IP \(bu 2
\fBdelete\-or\-exit\fP, quit the shell if the current command\-line is empty, or delete the character under the cursor if not
.IP \(bu 2
\fBfish_clipboard_copy\fP, copy the current selection to the system clipboard
.IP \(bu 2
\fBfish_clipboard_paste\fP, paste the current selection from the system clipboard before the cursor
.IP \(bu 2
\fBfish_commandline_append\fP, append the argument to the command\-line. If the command\-line already ends with the argument, this removes the suffix instead. Starts with the last command from history if the command\-line is empty.
.IP \(bu 2
\fBfish_commandline_prepend\fP, prepend the argument to the command\-line. If the command\-line already starts with the argument, this removes the prefix instead. Starts with the last command from history if the command\-line is empty.
.UNINDENT
.SS Examples
.sp
Exit the shell when \fBControl\fP+\fBD\fP is pressed:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
bind \ecd \(aqexit\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Perform a history search when \fBPage Up\fP is pressed:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
bind \-k ppage history\-search\-backward
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Turn on Vi key bindings and rebind \fBControl\fP+\fBC\fP to clear the input line:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
set \-g fish_key_bindings fish_vi_key_bindings
bind \-M insert \ecc kill\-whole\-line repaint
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Launch \fBgit diff\fP and repaint the commandline afterwards when \fBControl\fP+\fBG\fP is pressed:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
bind \ecg \(aqgit diff; commandline \-f repaint\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Terminal Limitations
.sp
Unix terminals, like the ones fish operates in, are at heart 70s technology. They have some limitations that applications running inside them can\(aqt workaround.
.sp
For instance, the control key modifies a character by setting the top three bits to 0. This means:
.INDENT 0.0
.IP \(bu 2
Many characters + control are indistinguishable from other keys. \fBControl\fP+\fBI\fP \fIis\fP tab, \fBControl\fP+\fBJ\fP \fIis\fP newline (\fIn\fP).
.IP \(bu 2
Control and shift don\(aqt work simultaneously
.UNINDENT
.sp
Other keys don\(aqt have a direct encoding, and are sent as escape sequences. For example \fB→\fP (Right) often sends \fB\ee\e[C\fP\&. These can differ from terminal to terminal, and the mapping is typically available in \fIterminfo(5)\fP\&. Sometimes however a terminal identifies as e.g. \fBxterm\-256color\fP for compatibility, but then implements xterm\(aqs sequences incorrectly.
.SS Special Case: The Escape Character
.sp
The escape key can be used standalone, for example, to switch from insertion mode to normal mode when using Vi keybindings. Escape can also be used as a "meta" key, to indicate the start of an escape sequence, like for function or arrow keys. Custom bindings can also be defined that begin with an escape character.
.sp
Holding alt and something else also typically sends escape, for example holding alt+a will send an escape character and then an "a".
.sp
fish waits for a period after receiving the escape character, to determine whether it is standalone or part of an escape sequence. While waiting, additional key presses make the escape key behave as a meta key. If no other key presses come in, it is handled as a standalone escape. The waiting period is set to 30 milliseconds (0.03 seconds). It can be configured by setting the \fBfish_escape_delay_ms\fP variable to a value between 10 and 5000 ms. This can be a universal variable that you set once from an interactive session.
.SS block \- temporarily block delivery of events
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
block [OPTIONS...]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBblock\fP prevents events triggered by \fBfish\fP or the emit command from being delivered and acted upon while the block is in place.
.sp
In functions, \fBblock\fP can be useful while performing work that should not be interrupted by the shell.
.sp
The block can be removed. Any events which triggered while the block was in place will then be delivered.
.sp
Event blocks should not be confused with code blocks, which are created with \fBbegin\fP, \fBif\fP, \fBwhile\fP or \fBfor\fP
.sp
The following parameters are available:
.INDENT 0.0
.IP \(bu 2
\fB\-l\fP or \fB\-\-local\fP Release the block automatically at the end of the current innermost code block scope
.IP \(bu 2
\fB\-g\fP or \fB\-\-global\fP Never automatically release the lock
.IP \(bu 2
\fB\-e\fP or \fB\-\-erase\fP Release global block
.UNINDENT
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# Create a function that listens for events
function \-\-on\-event foo foo; echo \(aqfoo fired\(aq; end

# Block the delivery of events
block \-g

emit foo
# No output will be produced

block \-e
# \(aqfoo fired\(aq will now be printed
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Notes
.sp
Note that events are only received from the current fish process as there is no way to send events from one fish process to another.
.SS break \- stop the current inner loop
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
LOOP_CONSTRUCT; [COMMANDS...] break; [COMMANDS...] end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBbreak\fP halts a currently running loop, such as a switch, for or while loop. It is usually added inside of a conditional block such as an if block.
.sp
There are no parameters for \fBbreak\fP\&.
.SS Example
.sp
The following code searches all .c files for "smurf", and halts at the first occurrence.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
for i in *.c
    if grep smurf $i
        echo Smurfs are present in $i
        break
    end
end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
the continue command, to skip the remainder of the current iteration of the current inner loop
.UNINDENT
.SS breakpoint \- launch debug mode
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
breakpoint
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBbreakpoint\fP is used to halt a running script and launch an interactive debugging prompt.
.sp
For more details, see Debugging fish scripts in the \fBfish\fP manual.
.sp
There are no parameters for \fBbreakpoint\fP\&.
.SS builtin \- run a builtin command
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
builtin [OPTIONS...] BUILTINNAME
builtin \-\-query BUILTINNAMES...
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBbuiltin\fP forces the shell to use a builtin command, rather than a function or program.
.sp
The following parameters are available:
.INDENT 0.0
.IP \(bu 2
\fB\-n\fP or \fB\-\-names\fP List the names of all defined builtins
.IP \(bu 2
\fB\-q\fP or \fB\-\-query\fP tests if any of the specified builtins exists
.UNINDENT
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
builtin jobs
# executes the jobs builtin, even if a function named jobs exists
.ft P
.fi
.UNINDENT
.UNINDENT
.SS case \- conditionally execute a block of commands
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
switch VALUE; [case [WILDCARD...]; [COMMANDS...]; ...] end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBswitch\fP executes one of several blocks of commands, depending on whether a specified value matches one of several values. \fBcase\fP is used together with the \fBswitch\fP statement in order to determine which block should be executed.
.sp
Each \fBcase\fP command is given one or more parameters. The first \fBcase\fP command with a parameter that matches the string specified in the switch command will be evaluated. \fBcase\fP parameters may contain wildcards. These need to be escaped or quoted in order to avoid regular wildcard expansion using filenames.
.sp
Note that fish does not fall through on case statements. Only the first matching case is executed.
.sp
Note that command substitutions in a case statement will be evaluated even if its body is not taken. All substitutions, including command substitutions, must be performed before the value can be compared against the parameter.
.SS Example
.sp
Say $animal contains the name of an animal. Then this code would classify it:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
switch $animal
    case cat
        echo evil
    case wolf dog human moose dolphin whale
        echo mammal
    case duck goose albatross
        echo bird
    case shark trout stingray
        echo fish
    # Note that the next case has a wildcard which is quoted
    case \(aq*\(aq
        echo I have no idea what a $animal is
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If the above code was run with \fB$animal\fP set to \fBwhale\fP, the output
would be \fBmammal\fP\&.
.sp
If \fB$animal\fP was set to "banana", it would print "I have no idea what a banana is".
.SS cd \- change directory
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
cd [DIRECTORY]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBcd\fP changes the current working directory.
.sp
If \fBDIRECTORY\fP is supplied, it will become the new directory. If no parameter is given, the contents of the \fBHOME\fP environment variable will be used.
.sp
If \fBDIRECTORY\fP is a relative path, the paths found in the \fBCDPATH\fP list will be tried as prefixes for the specified path, in addition to $PWD.
.sp
Note that the shell will attempt to change directory without requiring \fBcd\fP if the name of a directory is provided (starting with \fB\&.\fP, \fB/\fP or \fB~\fP, or ending with \fB/\fP).
.sp
Fish also ships a wrapper function around the builtin \fBcd\fP that understands \fBcd \-\fP as changing to the previous directory. See also prevd\&. This wrapper function maintains a history of the 25 most recently visited directories in the \fB$dirprev\fP and \fB$dirnext\fP global variables. If you make those universal variables your \fBcd\fP history is shared among all fish instances.
.sp
As a special case, \fBcd .\fP is equivalent to \fBcd $PWD\fP, which is useful in cases where a mountpoint has been recycled or a directory has been removed and recreated.
.SS Examples
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
cd
# changes the working directory to your home directory.

cd /usr/src/fish\-shell
# changes the working directory to /usr/src/fish\-shell
.ft P
.fi
.UNINDENT
.UNINDENT
.SS See Also
.sp
Navigate directories using the directory history or the directory stack
.SS cdh \- change to a recently visited directory
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
cdh [ directory ]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBcdh\fP with no arguments presents a list of recently visited directories\&. You can then select one of the entries by letter or number. You can also press \fBTab\fP to use the completion pager to select an item from the list. If you give it a single argument it is equivalent to \fBcd directory\fP\&.
.sp
Note that the \fBcd\fP command limits directory history to the 25 most recently visited directories. The history is stored in the \fB$dirprev\fP and \fB$dirnext\fP variables which this command manipulates. If you make those universal variables your \fBcd\fP history is shared among all fish instances.
.SS See Also
.INDENT 0.0
.IP \(bu 2
the dirh command to print the directory history
.IP \(bu 2
the prevd command to move backward
.IP \(bu 2
the nextd command to move forward
.UNINDENT
.SS command \- run a program
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
command [OPTIONS] COMMANDNAME [ARGS...]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBcommand\fP forces the shell to execute the program \fBCOMMANDNAME\fP and ignore any functions or builtins with the same name.
.sp
The following options are available:
.INDENT 0.0
.IP \(bu 2
\fB\-a\fP or \fB\-\-all\fP returns all the external COMMANDNAMEs that are found in \fB$PATH\fP in the order they are found.
.IP \(bu 2
\fB\-q\fP or \fB\-\-query\fP, silences the output and prints nothing, setting only the exit status. Implies \fB\-\-search\fP\&. For compatibility with old fish versions this is also \fB\-\-quiet\fP (but this is deprecated).
.IP \(bu 2
\fB\-s\fP or \fB\-\-search\fP returns the name of the external command that would be executed, or nothing if no file with the specified name could be found in the \fB$PATH\fP\&.
.UNINDENT
.sp
With the \fB\-s\fP option, \fBcommand\fP treats every argument as a separate command to look up and sets the exit status to 0 if any of the specified commands were found, or 1 if no commands could be found. Additionally passing a \fB\-q\fP or \fB\-\-quiet\fP option prevents any paths from being printed, like \fBtype \-q\fP, for testing only the exit status.
.sp
For basic compatibility with POSIX \fBcommand\fP, the \fB\-v\fP flag is recognized as an alias for \fB\-s\fP\&.
.SS Examples
.sp
\fBcommand ls\fP causes fish to execute the \fBls\fP program, even if an \fBls\fP function exists.
.sp
\fBcommand \-s ls\fP returns the path to the \fBls\fP program.
.sp
\fBcommand \-q git; and command git log\fP runs \fBgit log\fP only if \fBgit\fP exists.
.SS commandline \- set or get the current command line buffer
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
commandline [OPTIONS] [CMD]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBcommandline\fP can be used to set or get the current contents of the command line buffer.
.sp
With no parameters, \fBcommandline\fP returns the current value of the command line.
.sp
With \fBCMD\fP specified, the command line buffer is erased and replaced with the contents of \fBCMD\fP\&.
.sp
The following options are available:
.INDENT 0.0
.IP \(bu 2
\fB\-C\fP or \fB\-\-cursor\fP set or get the current cursor position, not the contents of the buffer. If no argument is given, the current cursor position is printed, otherwise the argument is interpreted as the new cursor position. If one of the options \fB\-j\fP, \fB\-p\fP or \fB\-t\fP is given, the position is relative to the respective substring instead of the entire command line buffer.
.IP \(bu 2
\fB\-f\fP or \fB\-\-function\fP causes any additional arguments to be interpreted as input functions, and puts them into the queue, so that they will be read before any additional actual key presses are. This option cannot be combined with any other option. See bind for a list of input functions.
.UNINDENT
.sp
The following options change the way \fBcommandline\fP updates the command line buffer:
.INDENT 0.0
.IP \(bu 2
\fB\-a\fP or \fB\-\-append\fP do not remove the current commandline, append the specified string at the end of it
.IP \(bu 2
\fB\-i\fP or \fB\-\-insert\fP do not remove the current commandline, insert the specified string at the current cursor position
.IP \(bu 2
\fB\-r\fP or \fB\-\-replace\fP remove the current commandline and replace it with the specified string (default)
.UNINDENT
.sp
The following options change what part of the commandline is printed or updated:
.INDENT 0.0
.IP \(bu 2
\fB\-b\fP or \fB\-\-current\-buffer\fP select the entire commandline, not including any displayed autosuggestion (default)
.IP \(bu 2
\fB\-j\fP or \fB\-\-current\-job\fP select the current job \- a \fIjob\fP here is one pipeline. It stops at logical operators or terminators (\fB;\fP, \fB&\fP or newlines).
.IP \(bu 2
\fB\-p\fP or \fB\-\-current\-process\fP select the current process \- a \fIprocess\fP here is one simple command. It stops at logical operators, terminators or pipes.
.IP \(bu 2
\fB\-s\fP or \fB\-\-current\-selection\fP selects the current selection
.IP \(bu 2
\fB\-t\fP or \fB\-\-current\-token\fP select the current token
.UNINDENT
.sp
The following options change the way \fBcommandline\fP prints the current commandline buffer:
.INDENT 0.0
.IP \(bu 2
\fB\-c\fP or \fB\-\-cut\-at\-cursor\fP only print selection up until the current cursor position
.IP \(bu 2
\fB\-o\fP or \fB\-\-tokenize\fP tokenize the selection and print one string\-type token per line
.UNINDENT
.sp
If \fBcommandline\fP is called during a call to complete a given string using \fBcomplete \-C STRING\fP, \fBcommandline\fP will consider the specified string to be the current contents of the command line.
.sp
The following options output metadata about the commandline state:
.INDENT 0.0
.IP \(bu 2
\fB\-L\fP or \fB\-\-line\fP print the line that the cursor is on, with the topmost line starting at 1
.IP \(bu 2
\fB\-S\fP or \fB\-\-search\-mode\fP evaluates to true if the commandline is performing a history search
.IP \(bu 2
\fB\-P\fP or \fB\-\-paging\-mode\fP evaluates to true if the commandline is showing pager contents, such as tab completions
.UNINDENT
.SS Example
.sp
\fBcommandline \-j $history[3]\fP replaces the job under the cursor with the third item from the command line history.
.sp
If the commandline contains
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>_ echo $flounder >&2 | less; and echo $catfish
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
(with the cursor on the "o" of "flounder")
.sp
The \fBecho $flounder >&\fP is the first process, \fBless\fP the second and \fBand echo $catfish\fP the third.
.sp
\fBecho $flounder >&2 | less\fP is the first job, \fBand echo $catfish\fP the second.
.sp
\fB$flounder\fP is the current token.
.sp
More examples:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>_ commandline \-t
$flounder
>_ commandline \-ct
$fl
>_ commandline \-b # or just commandline
echo $flounder >&2 | less; and echo $catfish
>_ commandline \-p
echo $flounder >&2
>_ commandline \-j
echo $flounder >&2 | less
.ft P
.fi
.UNINDENT
.UNINDENT
.SS complete \- edit command specific tab\-completions
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
complete [( \-c | \-\-command | \-p | \-\-path )] COMMAND
        [( \-c | \-\-command | \-p | \-\-path ) COMMAND]...
        [( \-e | \-\-erase )]
        [( \-s | \-\-short\-option ) SHORT_OPTION]...
        [( \-l | \-\-long\-option | \-o | \-\-old\-option ) LONG_OPTION]...
        [( \-a | \-\-arguments ) ARGUMENTS]
        [( \-k | \-\-keep\-order )]
        [( \-f | \-\-no\-files )]
        [( \-F | \-\-force\-files )]
        [( \-r | \-\-require\-parameter )]
        [( \-x | \-\-exclusive )]
        [( \-w | \-\-wraps ) WRAPPED_COMMAND]...
        [( \-n | \-\-condition ) CONDITION]
        [( \-d | \-\-description ) DESCRIPTION]
complete ( \-C [STRING] | \-\-do\-complete[=STRING] )
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBcomplete\fP defines, removes or lists completions for a command.
.sp
For an introduction to writing your own completions, see Writing your own completions in
the fish manual.
.INDENT 0.0
.IP \(bu 2
\fB\-c COMMAND\fP or \fB\-\-command COMMAND\fP specifies that \fBCOMMAND\fP is the name of the command. If there is no \fB\-c\fP or \fB\-p\fP, one non\-option argument will be used as the command.
.IP \(bu 2
\fB\-p COMMAND\fP or \fB\-\-path COMMAND\fP specifies that \fBCOMMAND\fP is the absolute path of the command (optionally containing wildcards).
.IP \(bu 2
\fB\-e\fP or \fB\-\-erase\fP deletes the specified completion.
.IP \(bu 2
\fB\-s SHORT_OPTION\fP or \fB\-\-short\-option=SHORT_OPTION\fP adds a short option to the completions list.
.IP \(bu 2
\fB\-l LONG_OPTION\fP or \fB\-\-long\-option=LONG_OPTION\fP adds a GNU style long option to the completions list.
.IP \(bu 2
\fB\-o LONG_OPTION\fP or \fB\-\-old\-option=LONG_OPTION\fP adds an old style long option to the completions list (See below for details).
.IP \(bu 2
\fB\-a ARGUMENTS\fP or \fB\-\-arguments=ARGUMENTS\fP adds the specified option arguments to the completions list.
.IP \(bu 2
\fB\-k\fP or \fB\-\-keep\-order\fP keeps the order of \fBARGUMENTS\fP instead of sorting alphabetically. Multiple \fBcomplete\fP calls with \fB\-k\fP result in arguments of the later ones displayed first.
.IP \(bu 2
\fB\-f\fP or \fB\-\-no\-files\fP says that this completion may not be followed by a filename.
.IP \(bu 2
\fB\-F\fP or \fB\-\-force\-files\fP says that this completion may be followed by a filename, even if another applicable \fBcomplete\fP specified \fB\-\-no\-files\fP\&.
.IP \(bu 2
\fB\-r\fP or \fB\-\-require\-parameter\fP says that this completion must have an option argument, i.e. may not be followed by another option.
.IP \(bu 2
\fB\-x\fP or \fB\-\-exclusive\fP is short for \fB\-r\fP and \fB\-f\fP\&.
.IP \(bu 2
\fB\-w WRAPPED_COMMAND\fP or \fB\-\-wraps=WRAPPED_COMMAND\fP causes the specified command to inherit completions from the wrapped command (See below for details).
.IP \(bu 2
\fB\-n CONDITION\fP or \fB\-\-condition CONDITION\fP specifies that this completion should only be used if the CONDITION (a shell command) returns 0. This makes it possible to specify completions that should only be used in some cases.
.IP \(bu 2
\fB\-C STRING\fP or \fB\-\-do\-complete=STRING\fP makes complete try to find all possible completions for the specified string. If there is no STRING, the current commandline is used instead.
.UNINDENT
.sp
Command specific tab\-completions in \fBfish\fP are based on the notion of options and arguments. An option is a parameter which begins with a hyphen, such as \fB\-h\fP, \fB\-help\fP or \fB\-\-help\fP\&. Arguments are parameters that do not begin with a hyphen. Fish recognizes three styles of options, the same styles as the GNU getopt library. These styles are:
.INDENT 0.0
.IP \(bu 2
Short options, like \fB\-a\fP\&. Short options are a single character long, are preceded by a single hyphen and can be grouped together (like \fB\-la\fP, which is equivalent to \fB\-l \-a\fP). Option arguments may be specified in the following parameter (\fB\-w 32\fP) or by appending the option with the value (\fB\-w32\fP).
.IP \(bu 2
Old style long options, like \fB\-Wall\fP or \fB\-name\fP\&. Old style long options can be more than one character long, are preceded by a single hyphen and may not be grouped together. Option arguments are specified in the following parameter (\fB\-ao null\fP).
.IP \(bu 2
GNU style long options, like \fB\-\-colors\fP\&. GNU style long options can be more than one character long, are preceded by two hyphens, and can\(aqt be grouped together. Option arguments may be specified in the following parameter (\fB\-\-quoting\-style shell\fP) or after a \fB=\fP (\fB\-\-quoting\-style=shell\fP).
.UNINDENT
.sp
Multiple commands and paths can be given in one call to define the same completions for multiple commands.
.sp
Multiple command switches and wrapped commands can also be given to define multiple completions in one call.
.sp
Invoking \fBcomplete\fP multiple times for the same command adds the new definitions on top of any existing completions defined for the command.
.sp
When \fB\-a\fP or \fB\-\-arguments\fP is specified in conjunction with long, short, or old style options, the specified arguments are only completed as arguments for any of the specified options. If \fB\-a\fP or \fB\-\-arguments\fP is specified without any long, short, or old style options, the specified arguments are used when completing non\-option arguments to the command (except when completing an option argument that was specified with \fB\-r\fP or \fB\-\-require\-parameter\fP).
.sp
Command substitutions found in \fBARGUMENTS\fP should return a newline\-separated list of arguments, and each argument may optionally have a tab character followed by the argument description. Description given this way override a description given with \fB\-d\fP or \fB\-\-description\fP\&.
.sp
The \fB\-w\fP or \fB\-\-wraps\fP options causes the specified command to inherit completions from another command, "wrapping" the other command. The wrapping command can also have additional completions. A command can wrap multiple commands, and wrapping is transitive: if A wraps B, and B wraps C, then A automatically inherits all of C\(aqs completions. Wrapping can be removed using the \fB\-e\fP or \fB\-\-erase\fP options. Wrapping only works for completions specified with \fB\-c\fP or \fB\-\-command\fP and are ignored when specifying completions with \fB\-p\fP or \fB\-\-path\fP\&.
.sp
When erasing completions, it is possible to either erase all completions for a specific command by specifying \fBcomplete \-c COMMAND \-e\fP, or by specifying a specific completion option to delete.
.sp
When \fBcomplete\fP is called without anything that would define or erase completions (options, arguments, wrapping, ...), it shows matching completions instead. So \fBcomplete\fP without any arguments shows all loaded completions, \fBcomplete \-c foo\fP shows all loaded completions for \fBfoo\fP\&. Since completions are autoloaded, you will have to trigger them first.
.SS Examples
.sp
The short style option \fB\-o\fP for the \fBgcc\fP command needs a file argument:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
complete \-c gcc \-s o \-r
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The short style option \fB\-d\fP for the \fBgrep\fP command requires one of \fBread\fP, \fBskip\fP or \fBrecurse\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
complete \-c grep \-s d \-x \-a "read skip recurse"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The \fBsu\fP command takes any username as an argument. Usernames are given as the first colon\-separated field in the file /etc/passwd. This can be specified as:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
complete \-x \-c su \-d "Username" \-a "(cat /etc/passwd | cut \-d : \-f 1)"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The \fBrpm\fP command has several different modes. If the \fB\-e\fP or \fB\-\-erase\fP flag has been specified, \fBrpm\fP should delete one or more packages, in which case several switches related to deleting packages are valid, like the \fBnodeps\fP switch.
.sp
This can be written as:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
complete \-c rpm \-n "__fish_contains_opt \-s e erase" \-l nodeps \-d "Don\(aqt check dependencies"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
where \fB__fish_contains_opt\fP is a function that checks the command line buffer for the presence of a specified set of options.
.sp
To implement an alias, use the \fB\-w\fP or \fB\-\-wraps\fP option:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
complete \-c hub \-w git
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Now hub inherits all of the completions from git. Note this can also be specified in a function declaration (\fBfunction thing \-w otherthing\fP).
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
complete \-c git
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Show all completions for \fBgit\fP\&.
.SS contains \- test if a word is present in a list
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
contains [OPTIONS] KEY [VALUES...]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBcontains\fP tests whether the set \fBVALUES\fP contains the string \fBKEY\fP\&. If so, \fBcontains\fP exits with status 0; if not, it exits with status 1.
.sp
The following options are available:
.INDENT 0.0
.IP \(bu 2
\fB\-i\fP or \fB\-\-index\fP print the word index
.UNINDENT
.sp
Note that, like GNU tools and most of fish\(aqs builtins, \fBcontains\fP interprets all arguments starting with a \fB\-\fP as options to contains, until it reaches an argument that is \fB\-\-\fP (two dashes). See the examples below.
.SS Example
.sp
If $animals is a list of animals, the following will test if it contains a cat:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
if contains cat $animals
   echo Your animal list is evil!
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This code will add some directories to $PATH if they aren\(aqt yet included:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
for i in ~/bin /usr/local/bin
    if not contains $i $PATH
        set PATH $PATH $i
    end
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
While this will check if \fBhasargs\fP was run with the \fB\-q\fP option:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function hasargs
    if contains \-\- \-q $argv
        echo \(aq$argv contains a \-q option\(aq
    end
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The \fB\-\-\fP here stops \fBcontains\fP from treating \fB\-q\fP to an option to itself. Instead it treats it as a normal string to check.
.SS continue \- skip the remainder of the current iteration of the current inner loop
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
LOOP_CONSTRUCT; [COMMANDS...;] continue; [COMMANDS...;] end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBcontinue\fP skips the remainder of the current iteration of the current inner loop, such as a for loop or a while loop. It is usually added inside of a conditional block such as an if statement or a switch statement.
.SS Example
.sp
The following code removes all tmp files that do not contain the word smurf.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
for i in *.tmp
    if grep smurf $i
        continue
    end
    # This "rm" is skipped over if "continue" is executed.
    rm $i
    # As is this "echo"
    echo $i
end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
the break command, to stop the current inner loop
.UNINDENT
.SS count \- count the number of elements of a list
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
count $VARIABLE
COMMAND | count
count < FILE
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBcount\fP prints the number of arguments that were passed to it, plus the number of newlines passed to it via stdin. This is usually used to find out how many elements an environment variable list contains, or how many lines there are in a text file.
.sp
\fBcount\fP does not accept any options, not even \fB\-h\fP or \fB\-\-help\fP\&.
.sp
\fBcount\fP exits with a non\-zero exit status if no arguments were passed to it, and with zero if at least one argument was passed.
.sp
Note that, like \fBwc \-l\fP, reading from stdin counts newlines, so \fBecho \-n foo | count\fP will print 0.
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
count $PATH
# Returns the number of directories in the users PATH variable.

count *.txt
# Returns the number of files in the current working directory
# ending with the suffix \(aq.txt\(aq.

git ls\-files \-\-others \-\-exclude\-standard | count
# Returns the number of untracked files in a git repository

printf \(aq%s\en\(aq foo bar | count baz
# Returns 3 (2 lines from stdin plus 1 argument)

count < /etc/hosts
# Counts the number of entries in the hosts file
.ft P
.fi
.UNINDENT
.UNINDENT
.SS dirh \- print directory history
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
dirh
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBdirh\fP prints the current directory history\&. The current position in the history is highlighted using the color defined in the \fBfish_color_history_current\fP environment variable.
.sp
\fBdirh\fP does not accept any parameters.
.sp
Note that the cd command limits directory history to the 25 most recently visited directories. The history is stored in the \fB$dirprev\fP and \fB$dirnext\fP variables.
.SS See Also
.INDENT 0.0
.IP \(bu 2
the cdh command to display a prompt to quickly navigate the history
.IP \(bu 2
the prevd command to move backward
.IP \(bu 2
the nextd command to move forward
.UNINDENT
.SS dirs \- print directory stack
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
dirs
dirs \-c
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBdirs\fP prints the current directory stack, as created by pushd and modified by popd\&.
.sp
With "\-c", it clears the directory stack instead.
.sp
\fBdirs\fP does not accept any parameters.
.SS See Also
.INDENT 0.0
.IP \(bu 2
the cdh command which provides a more intuitive way to navigate to recently visited directories.
.UNINDENT
.SS disown \- remove a process from the list of jobs
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
disown [ PID ... ]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBdisown\fP removes the specified job from the list of jobs. The job itself continues to exist, but fish does not keep track of it any longer.
.sp
Jobs in the list of jobs are sent a hang\-up signal when fish terminates, which usually causes the job to terminate; \fBdisown\fP allows these processes to continue regardless.
.sp
If no process is specified, the most recently\-used job is removed (like bg and fg).  If one or more PIDs are specified, jobs with the specified process IDs are removed from the job list. Invalid jobs are ignored and a warning is printed.
.sp
If a job is stopped, it is sent a signal to continue running, and a warning is printed. It is not possible to use the bg builtin to continue a job once it has been disowned.
.sp
\fBdisown\fP returns 0 if all specified jobs were disowned successfully, and 1 if any problems were encountered.
.SS Example
.sp
\fBfirefox &; disown\fP will start the Firefox web browser in the background and remove it from the job list, meaning it will not be closed when the fish process is closed.
.sp
\fBdisown (jobs \-p)\fP removes all jobs from the job list without terminating them.
.SS echo \- display a line of text
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
echo [OPTIONS] [STRING]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBecho\fP displays a string of text.
.sp
The following options are available:
.INDENT 0.0
.IP \(bu 2
\fB\-n\fP, Do not output a newline
.IP \(bu 2
\fB\-s\fP, Do not separate arguments with spaces
.IP \(bu 2
\fB\-E\fP, Disable interpretation of backslash escapes (default)
.IP \(bu 2
\fB\-e\fP, Enable interpretation of backslash escapes
.UNINDENT
.sp
Unlike other shells, this echo accepts \fB\-\-\fP to signal the end of the options.
.SS Escape Sequences
.sp
If \fB\-e\fP is used, the following sequences are recognized:
.INDENT 0.0
.IP \(bu 2
\fB\e\fP backslash
.IP \(bu 2
\fB\ea\fP alert (BEL)
.IP \(bu 2
\fB\eb\fP backspace
.IP \(bu 2
\fB\ec\fP produce no further output
.IP \(bu 2
\fB\ee\fP escape
.IP \(bu 2
\fB\ef\fP form feed
.IP \(bu 2
\fB\en\fP new line
.IP \(bu 2
\fB\er\fP carriage return
.IP \(bu 2
\fB\et\fP horizontal tab
.IP \(bu 2
\fB\ev\fP vertical tab
.IP \(bu 2
\fB\e0NNN\fP byte with octal value NNN (1 to 3 digits)
.IP \(bu 2
\fB\exHH\fP byte with hexadecimal value HH (1 to 2 digits)
.UNINDENT
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> echo \(aqHello World\(aq
Hello World

> echo \-e \(aqTop\enBottom\(aq
Top
Bottom

> echo \-\- \-n
\-n
.ft P
.fi
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
the printf command, for more control over output formatting
.UNINDENT
.SS else \- execute command if a condition is not met
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
if CONDITION; COMMANDS_TRUE...; [else; COMMANDS_FALSE...;] end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
if will execute the command \fBCONDITION\fP\&. If the condition\(aqs exit status is 0, the commands \fBCOMMANDS_TRUE\fP will execute. If it is not 0 and \fBelse\fP is given, \fBCOMMANDS_FALSE\fP will be executed.
.SS Example
.sp
The following code tests whether a file \fBfoo.txt\fP exists as a regular file.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
if test \-f foo.txt
    echo foo.txt exists
else
    echo foo.txt does not exist
end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS emit \- emit a generic event
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
emit EVENT_NAME [ARGUMENTS...]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBemit\fP emits, or fires, an event. Events are delivered to, or caught by, special functions called event handlers\&. The arguments are passed to the event handlers as function arguments.
.SS Example
.sp
The following code first defines an event handler for the generic event named \(aqtest_event\(aq, and then emits an event of that type.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function event_test \-\-on\-event test_event
    echo event test: $argv
end

emit test_event something
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Notes
.sp
Note that events are only sent to the current fish process as there is no way to send events from one fish process to another.
.SS end \- end a block of commands
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
begin; [COMMANDS...] end
function NAME [OPTIONS]; COMMANDS...; end
if CONDITION; COMMANDS_TRUE...; [else; COMMANDS_FALSE...;] end
switch VALUE; [case [WILDCARD...]; [COMMANDS...]; ...] end
while CONDITION; COMMANDS...; end
for VARNAME in [VALUES...]; COMMANDS...; end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBend\fP ends a block of commands started by one of the following commands:
.INDENT 0.0
.IP \(bu 2
begin to start a block of commands
.IP \(bu 2
function to define a function
.IP \(bu 2
if, switch to conditionally execute commands
.IP \(bu 2
while, for to perform commands multiple times
.UNINDENT
.sp
The \fBend\fP command does not change the current exit status. Instead, the status after it will be the status returned by the most recent command.
.SS eval \- evaluate the specified commands
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
eval [COMMANDS...]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBeval\fP evaluates the specified parameters as a command. If more than one parameter is specified, all parameters will be joined using a space character as a separator.
.sp
If your command does not need access to stdin, consider using source instead.
.sp
If no piping or other compound shell constructs are required, variable\-expansion\-as\-command, as in  \fBset cmd ls \-la; $cmd\fP, is also an option.
.SS Example
.sp
The following code will call the ls command and truncate each filename to the first 12 characters.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
set cmd ls \e| cut \-c 1\-12
eval $cmd
.ft P
.fi
.UNINDENT
.UNINDENT
.SS exec \- execute command in current process
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
exec COMMAND [OPTIONS...]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBexec\fP replaces the currently running shell with a new command. On successful completion, \fBexec\fP never returns. \fBexec\fP cannot be used inside a pipeline.
.SS Example
.sp
\fBexec emacs\fP starts up the emacs text editor, and exits \fBfish\fP\&. When emacs exits, the session will terminate.
.SS exit \- exit the shell
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
exit [STATUS]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBexit\fP causes fish to exit. If \fBSTATUS\fP is supplied, it will be converted to an integer and used as the exit status. Otherwise, the exit status will be that of the last command executed.
.sp
If exit is called while sourcing a file (using the source builtin) the rest of the file will be skipped, but the shell itself will not exit.
.SS false \- return an unsuccessful result
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
false
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBfalse\fP sets the exit status to 1.
.SS See Also
.INDENT 0.0
.IP \(bu 2
true command
.IP \(bu 2
$status variable
.UNINDENT
.SS fg \- bring job to foreground
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
fg [PID]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBfg\fP brings the specified job to the foreground, resuming it if it is stopped. While a foreground job is executed, fish is suspended. If no job is specified, the last job to be used is put in the foreground. If \fBPID\fP is specified, the job containing a process with the specified process ID is put in the foreground.
.sp
For compatibility with other shells, job expansion syntax is supported for \fBfg\fP\&. A \fBPID\fP of the format \fB%1\fP will foreground job 1. Job numbers can be seen in the output of jobs\&.
.SS Example
.sp
\fBfg\fP will put the last job in the foreground.
.sp
\fBfg %3\fP will put job 3 into the foreground.
.SS fish \- the friendly interactive shell
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
fish [OPTIONS] [\-c command] [FILE] [ARGUMENTS...]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
fish is a command\-line shell written mainly with interactive use in mind. This page briefly describes the options for invoking fish. The full manual is available in HTML by using the help command from inside fish, and in the \fIfish\-doc(1)\fP man page. The tutorial is available as HTML via \fBhelp tutorial\fP or in \fIfish\-tutorial(1)\fP\&.
.sp
The following options are available:
.INDENT 0.0
.IP \(bu 2
\fB\-c\fP or \fB\-\-command=COMMANDS\fP evaluate the specified commands instead of reading from the commandline, passing any additional positional arguments via $argv\&. Note that, unlike other shells, the first argument is \fInot\fP the name of the program (\fB$0\fP), but simply the first normal argument.
.IP \(bu 2
\fB\-C\fP or \fB\-\-init\-command=COMMANDS\fP evaluate the specified commands after reading the configuration, before running the command specified by \fB\-c\fP or reading interactive input
.IP \(bu 2
\fB\-d\fP or \fB\-\-debug=DEBUG_CATEGORIES\fP enable debug output and specify a pattern for matching debug categories. See \fI\%Debugging\fP below for details.
.IP \(bu 2
\fB\-o\fP or \fB\-\-debug\-output=DEBUG_FILE\fP specify a file path to receive the debug output, including categories and \fBfish_trace\fP\&. The default is stderr.
.IP \(bu 2
\fB\-i\fP or \fB\-\-interactive\fP specify that fish is to run in interactive mode
.IP \(bu 2
\fB\-l\fP or \fB\-\-login\fP specify that fish is to run as a login shell
.IP \(bu 2
\fB\-n\fP or \fB\-\-no\-execute\fP do not execute any commands, only perform syntax checking
.IP \(bu 2
\fB\-p\fP or \fB\-\-profile=PROFILE_FILE\fP when fish exits, output timing information on all executed commands to the specified file. This excludes time spent starting up and reading the configuration.
.IP \(bu 2
\fB\-\-profile\-startup=PROFILE_FILE\fP will write timing information for fish\(aqs startup to the specified file. This is useful to profile your configuration.
.IP \(bu 2
\fB\-P\fP or \fB\-\-private\fP enables private mode, so fish will not access old or store new history.
.IP \(bu 2
\fB\-\-print\-rusage\-self\fP when fish exits, output stats from getrusage
.IP \(bu 2
\fB\-\-print\-debug\-categories\fP outputs the list of debug categories, and then exits.
.IP \(bu 2
\fB\-v\fP or \fB\-\-version\fP display version and exit
.IP \(bu 2
\fB\-f\fP or \fB\-\-features=FEATURES\fP enables one or more feature flags (separated by a comma). These are how fish stages changes that might break scripts.
.UNINDENT
.sp
The fish exit status is generally the exit status of the last foreground command\&.
.SS Debugging
.sp
While fish provides extensive support for debugging fish scripts, it is also possible to debug and instrument its internals. Debugging can be enabled by passing the \fB\-\-debug\fP option. For example, the following command turns on debugging for background IO thread events, in addition to the default categories, i.e. \fIdebug\fP, \fIerror\fP, \fIwarning\fP, and \fIwarning\-path\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> fish \-\-debug=iothread
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Available categories are listed by \fBfish \-\-print\-debug\-categories\fP\&. The \fB\-\-debug\fP option accepts a comma\-separated list of categories, and supports glob syntax. The following command turns on debugging for \fIcomplete\fP, \fIhistory\fP, \fIhistory\-file\fP, and \fIprofile\-history\fP, as well as the default categories:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> fish \-\-debug=\(aqcomplete,*history*\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Debug messages output to stderr by default. Note that if \fBfish_trace\fP is set, execution tracing also outputs to stderr by default. You can output to a file using the \fB\-\-debug\-output\fP option:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> fish \-\-debug=\(aqcomplete,*history*\(aq \-\-debug\-output=/tmp/fish.log \-\-init\-command=\(aqset fish_trace on\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
These options can also be changed via the $FISH_DEBUG and $FISH_DEBUG_OUTPUT variables. The categories enabled via \fB\-\-debug\fP are \fIadded\fP to the ones enabled by $FISH_DEBUG, so they can be disabled by prefixing them with \fB\-\fP (\fBreader\-*,\-ast*\fP enables reader debugging and disables ast debugging).
.sp
The file given in \fB\-\-debug\-output\fP takes precedence over the file in $FISH_DEBUG_OUTPUT.
.SS fish_add_path \- add to the path
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
fish_add_path [paths...]
fish_add_path (\-h | \-\-help)
fish_add_path [(\-g | \-\-global) | (\-U | \-\-universal) | (\-P | \-\-path)] [(\-m | \-\-move)] [(\-a | \-\-append) | (\-p | \-\-prepend)] [(\-v | \-\-verbose) | (\-n | \-\-dry\-run)] [paths...]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBfish_add_path\fP is a simple way to add more components to fish\(aqs $PATH. It does this by adding the components either to $fish_user_paths or directly to $PATH (if the \fB\-\-path\fP switch is given).
.sp
It is (by default) safe to use \fBfish_add_path\fP in config.fish, or it can be used once, interactively, and the paths will stay in future because of universal variables\&. This is a "do what I mean" style command, if you need more control, consider modifying the variable yourself.
.sp
Components are normalized by realpath\&. This means that trailing slashes are ignored and relative paths are made absolute (but symlinks are not resolved). If a component already exists, it is not added again and stays in the same place unless the \fB\-\-move\fP switch is given.
.sp
Components are added in the order they are given, and they are prepended to the path unless \fB\-\-append\fP is given (if $fish_user_paths is used, that means they are last in $fish_user_paths, which is itself prepended to $PATH, so they still stay ahead of the system paths).
.sp
If no component is new, the variable ($fish_user_paths or $PATH) is not set again or otherwise modified, so variable handlers are not triggered.
.sp
If a component is not an existing directory, \fBfish_add_path\fP ignores it.
.SS Options
.INDENT 0.0
.IP \(bu 2
\fB\-a\fP or \fB\-\-append\fP causes the components to be added to the \fIend\fP of the variable
.IP \(bu 2
\fB\-p\fP or \fB\-\-prepend\fP causes the components to be added to the \fIfront\fP of the variable (this is the default)
.IP \(bu 2
\fB\-g\fP or \fB\-\-global\fP means to use a global $fish_user_paths
.IP \(bu 2
\fB\-U\fP or \fB\-\-universal\fP means to use a universal $fish_user_paths \- this is the default if it doesn\(aqt already exist
.IP \(bu 2
\fB\-P\fP or \fB\-\-path\fP means to use $PATH directly
.IP \(bu 2
\fB\-m\fP or \fB\-\-move\fP means to move already existing components to the place they would be added \- by default they would be left in place and not added again
.IP \(bu 2
\fB\-v\fP or \fB\-\-verbose\fP means to print the set command used
.IP \(bu 2
\fB\-n\fP or \fB\-\-dry\-run\fP means to print the \fBset\fP command that would be used without executing it
.UNINDENT
.sp
If \fB\-\-move\fP is used, it may of course lead to the path swapping order, so you should be careful doing that in config.fish.
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# I just installed mycoolthing and need to add it to the path to use it.
> fish_add_path /opt/mycoolthing/bin

# I want my ~/.local/bin to be checked first.
> fish_add_path \-m ~/.local/bin

# I prefer using a global fish_user_paths
> fish_add_path \-g ~/.local/bin ~/.otherbin /usr/local/sbin

# I want to append to the entire $PATH because this directory contains fallbacks
> fish_add_path \-aP /opt/fallback/bin

# I want to add the bin/ directory of my current $PWD (say /home/nemo/)
> fish_add_path \-v bin/
set fish_user_paths /home/nemo/bin /usr/bin /home/nemo/.local/bin

# I have installed ruby via homebrew
> fish_add_path /usr/local/opt/ruby/bin
.ft P
.fi
.UNINDENT
.UNINDENT
.SS fish_breakpoint_prompt \- define the prompt when stopped at a breakpoint
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function fish_breakpoint_prompt
    ...
end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBfish_breakpoint_prompt\fP is the prompt function when asking for input in response to a breakpoint command.
.sp
The exit status of commands within \fBfish_breakpoint_prompt\fP will not modify the value of $status outside of the \fBfish_breakpoint_prompt\fP function.
.sp
\fBfish\fP ships with a default version of this function that displays the function name and line number of the current execution context.
.SS Example
.sp
A simple prompt that is a simplified version of the default debugging prompt:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function fish_breakpoint_prompt \-d "Write out the debug prompt"
    set \-l function (status current\-function)
    set \-l line (status current\-line\-number)
    set \-l prompt "$function:$line >"
    echo \-ns (set_color $fish_color_status) "BP $prompt" (set_color normal) \(aq \(aq
end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS fish_command_not_found \- what to do when a command wasn\(aqt found
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function fish_command_not_found
    ...
end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
When fish tries to execute a command and can\(aqt find it, it invokes this function.
.sp
It can print a message to tell you about it, and it often also checks for a missing package that would include the command.
.sp
Fish ships multiple handlers for various operating systems and chooses from them when this function is loaded,
or you can define your own.
.sp
It receives the full commandline as one argument per token, so $argv[1] contains the missing command.
.sp
When you leave \fBfish_command_not_found\fP undefined (e.g. by adding an empty function file) or explicitly call \fB__fish_default_command_not_found_handler\fP, fish will just print a simple error.
.SS Example
.sp
A simple handler:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function fish_command_not_found
    echo Did not find command $argv[1]
end

> flounder
Did not find command flounder
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Or the handler for OpenSUSE\(aqs command\-not\-found:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function fish_command_not_found
    /usr/bin/command\-not\-found $argv[1]
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Or the simple default handler:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function fish_command_not_found
    __fish_default_command_not_found_handler $argv
end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Backwards compatibility
.sp
This command was introduced in fish 3.2.0. Previous versions of fish used the "fish_command_not_found" event instead.
.sp
To define a handler that works in older versions of fish as well, define it the old way:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function __fish_command_not_found_handler \-\-on\-event fish_command_not_found
     echo COMMAND WAS NOT FOUND MY FRIEND $argv[1]
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
in which case fish will define a \fBfish_command_not_found\fP that calls it,
or define a wrapper:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function fish_command_not_found
     echo "G\(aqday mate, could not find your command: $argv"
end

function __fish_command_not_found_handler \-\-on\-event fish_command_not_found
     fish_command_not_found $argv
end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS fish_config \- start the web\-based configuration interface
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
fish_config
fish_config browse
fish_config prompt (choose | list | save | show)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBfish_config\fP is used to configure fish.
.sp
Without arguments or with the \fBbrowse\fP command it starts the web\-based configuration interface. The web interface allows you to view your functions, variables and history, and to make changes to your prompt and color configuration. It starts a local web server and opens a browser window. When you are finished, close the browser window and press the Enter key to terminate the configuration session.
.sp
If the \fBBROWSER\fP environment variable is set, it will be used as the name of the web browser to open instead of the system default.
.sp
With the \fBprompt\fP command \fBfish_config\fP can be used to view and choose a prompt from fish\(aqs sample prompts inside the terminal directly.
.sp
Available subcommands for the \fBprompt\fP command:
.INDENT 0.0
.IP \(bu 2
\fBchoose\fP loads a sample prompt in the current session.
.IP \(bu 2
\fBlist\fP lists the names of the available sample prompts.
.IP \(bu 2
\fBsave\fP saves the current prompt to a file (via funcsave).
.IP \(bu 2
\fBshow\fP shows what the given sample prompts (or all) would look like.
.UNINDENT
.SS Example
.sp
\fBfish_config\fP or \fBfish_config browse\fP opens a new web browser window and allows you to configure certain fish settings.
.sp
\fBfish_config prompt show\fP demos the available sample prompts.
.sp
\fBfish_config prompt choose disco\fP makes the disco prompt the prompt for the current session. This can also be used in config.fish to set the prompt.
.sp
\fBfish_config prompt save\fP saves the current prompt to an autoloaded file.
.sp
\fBfish_config prompt save default\fP chooses the default prompt and saves it.
.SS fish_git_prompt \- output git information for use in a prompt
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function fish_prompt
     printf \(aq%s\(aq $PWD (fish_git_prompt) \(aq $ \(aq
end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
The \fBfish_git_prompt\fP function displays information about the current git repository, if any.
.sp
\fI\%Git\fP must be installed.
.sp
There are numerous customization options, which can be controlled with git options or fish variables. git options, where available, take precedence over the fish variable with the same function. git options can be set on a per\-repository or global basis. git options can be set with the \fBgit config\fP command, while fish variables can be set as usual with the set command.
.INDENT 0.0
.IP \(bu 2
\fB$__fish_git_prompt_show_informative_status\fP or the git option \fBbash.showInformativeStatus\fP can be set to enable the "informative" display, which will show a large amount of information \- the number of untracked files, dirty files, unpushed/unpulled commits, and more. In large repositories, this can take a lot of time, so it you may wish to disable it in these repositories with  \fBgit config \-\-local bash.showInformativeStatus false\fP\&. It also changes the characters the prompt uses to less plain ones (\fB✚\fP instead of \fB*\fP for the dirty state for example) , and if you are only interested in that, set \fB$__fish_git_prompt_use_informative_chars\fP instead.
.IP \(bu 2
\fB$__fish_git_prompt_showdirtystate\fP or the git option \fBbash.showDirtyState\fP can be set to show if the repository is "dirty", i.e. has uncommitted changes.
.IP \(bu 2
\fB$__fish_git_prompt_showuntrackedfiles\fP or the git option \fBbash.showUntrackedFiles\fP can be set to show if the repository has untracked files (that aren\(aqt ignored).
.IP \(bu 2
\fB$__fish_git_prompt_showupstream\fP can be set to a list of values to determine how changes between HEAD and upstream are shown:
.INDENT 2.0
.INDENT 3.5
.INDENT 0.0
.TP
.B \fBauto\fP
summarize the difference between HEAD and its upstream
.TP
.B \fBverbose\fP
show number of commits ahead/behind (+/\-) upstream
.TP
.B \fBname\fP
if verbose, then also show the upstream abbrev name
.TP
.B \fBinformative\fP
similar to verbose, but shows nothing when equal \- this is the default if informative status is enabled.
.TP
.B \fBgit\fP
always compare HEAD to @{upstream}
.TP
.B \fBsvn\fP
always compare HEAD to your SVN upstream
.TP
.B \fBnone\fP
disables (useful with informative status)
.UNINDENT
.UNINDENT
.UNINDENT
.IP \(bu 2
\fB$__fish_git_prompt_showstashstate\fP can be set to display the state of the stash.
.IP \(bu 2
\fB$__fish_git_prompt_shorten_branch_len\fP can be set to the number of characters that the branch name will be shortened to.
.IP \(bu 2
\fB$__fish_git_prompt_describe_style\fP can be set to one of the following styles to describe the current HEAD:
.INDENT 2.0
.INDENT 3.5
.INDENT 0.0
.TP
.B \fBcontains\fP
relative to newer annotated tag, such as \fB(v1.6.3.2~35)\fP
.TP
.B \fBbranch\fP
relative to newer tag or branch, such as \fB(master~4)\fP
.TP
.B \fBdescribe\fP
relative to older annotated tag, such as \fB(v1.6.3.1\-13\-gdd42c2f)\fP
.TP
.B \fBdefault\fP
an exactly matching tag (\fB(develop)\fP)
.UNINDENT
.sp
If none of these apply, the commit SHA shortened to 8 characters is used.
.UNINDENT
.UNINDENT
.IP \(bu 2
\fB$__fish_git_prompt_showcolorhints\fP can be set to enable coloring for the branch name and status symbols.
.UNINDENT
.sp
A number of variables set characters and color used as indicators. Many of these have a different default if used with informative status enabled, or \fB$__fish_git_prompt_use_informative_chars\fP set. The usual default is given first, then the informative default (if it is different). If no default for the colors is given, they default to \fB$__fish_git_prompt_color\fP\&.
.INDENT 0.0
.IP \(bu 2
\fB$__fish_git_prompt_char_stateseparator\fP (\(aq \(aq, \fB|\fP) \- the character to be used between the state characters
.IP \(bu 2
\fB$__fish_git_prompt_color\fP (no default)
.IP \(bu 2
\fB$__fish_git_prompt_color_prefix\fP \- the color of the \fB(\fP prefix
.IP \(bu 2
\fB$__fish_git_prompt_color_suffix\fP \- the color of the \fB)\fP suffix
.IP \(bu 2
\fB$__fish_git_prompt_color_bare\fP \- the color to use for a bare repository \- one without a working tree
.IP \(bu 2
\fB$__fish_git_prompt_color_merging\fP \- the color when a merge/rebase/revert/bisect or cherry\-pick is in progress
.UNINDENT
.sp
Some variables are only used in some modes, like when informative status is enabled:
.INDENT 0.0
.IP \(bu 2
\fB$__fish_git_prompt_char_cleanstate\fP (✔) \- the character to be used when nothing else applies
.IP \(bu 2
\fB$__fish_git_prompt_color_cleanstate\fP
.UNINDENT
.sp
Variables used with \fBshowdirtystate\fP:
.INDENT 0.0
.IP \(bu 2
\fB$__fish_git_prompt_char_dirtystate\fP (\fI*\fP, ✚) \- the number of "dirty" changes, i.e. unstaged files with changes
.IP \(bu 2
\fB$__fish_git_prompt_char_invalidstate\fP (#, ✖) \- the number of "unmerged" changes, e.g. additional changes to already added files
.IP \(bu 2
\fB$__fish_git_prompt_char_stagedstate\fP (+, ●) \- the number of staged files without additional changes
.IP \(bu 2
\fB$__fish_git_prompt_color_dirtystate\fP (red with showcolorhints, same as color_flags otherwise)
.IP \(bu 2
\fB$__fish_git_prompt_color_invalidstate\fP
.IP \(bu 2
\fB$__fish_git_prompt_color_stagedstate\fP (green with showcolorhints, color_flags otherwise)
.UNINDENT
.sp
Variables used with \fBshowstashstate\fP:
.INDENT 0.0
.IP \(bu 2
\fB$__fish_git_prompt_char_stashstate\fP (\fB$\fP, ⚑)
.IP \(bu 2
\fB$__fish_git_prompt_color_stashstate\fP (same as color_flags)
.UNINDENT
.sp
Variables used with \fBshowuntrackedfiles\fP:
.INDENT 0.0
.IP \(bu 2
\fB$__fish_git_prompt_char_untrackedfiles\fP (%, …) \- the symbol for untracked files
.IP \(bu 2
\fB$__fish_git_prompt_color_untrackedfiles\fP (same as color_flags)
.UNINDENT
.sp
Variables used with \fBshowupstream\fP (also implied by informative status):
.INDENT 0.0
.IP \(bu 2
\fB$__fish_git_prompt_char_upstream_ahead\fP (>, ↑) \- the character for the commits this repository is ahead of upstream
.IP \(bu 2
\fB$__fish_git_prompt_char_upstream_behind\fP (<, ↓) \- the character for the commits this repository is behind upstream
.IP \(bu 2
\fB$__fish_git_prompt_char_upstream_diverged\fP (<>) \- the symbol if this repository is both ahead and behind upstream
.IP \(bu 2
\fB$__fish_git_prompt_char_upstream_equal\fP (=) \- the symbol if this repo is equal to upstream
.IP \(bu 2
\fB$__fish_git_prompt_char_upstream_prefix\fP (\(aq\(aq)
.IP \(bu 2
\fB$__fish_git_prompt_color_upstream\fP
.UNINDENT
.sp
Colors used with \fBshowcolorhints\fP:
.INDENT 0.0
.IP \(bu 2
\fB$__fish_git_prompt_color_branch\fP (green) \- the color of the branch
.IP \(bu 2
\fB$__fish_git_prompt_color_branch_detached\fP (red) the color of the branch if it\(aqs detached (e.g. a commit is checked out)
.IP \(bu 2
\fB$__fish_git_prompt_color_flags\fP (\-\-bold blue) \- the default color for dirty/staged/stashed/untracked state
.UNINDENT
.sp
Note that all colors can also have a corresponding \fB_done\fP color. For example, the contents of \fB$__fish_git_prompt_color_upstream_done\fP is printed right _after_ the upstream.
.sp
See also fish_vcs_prompt, which will call all supported version control prompt functions, including git, Mercurial and Subversion.
.SS Example
.sp
A simple prompt that displays git info:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function fish_prompt
    # ...
    set \-g __fish_git_prompt_showupstream auto
    printf \(aq%s %s$\(aq $PWD (fish_git_prompt)
end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS fish_greeting \- display a welcome message in interactive shells
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function fish_greeting
    ...
end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
When an interactive fish starts, it executes fish_greeting and displays its output.
.sp
The default fish_greeting is a function that prints a variable of the same name (\fB$fish_greeting\fP), so you can also just change that if you just want to change the text.
.sp
While you could also just put \fBecho\fP calls into config.fish, fish_greeting takes care of only being used in interactive shells, so it won\(aqt be used e.g. with \fBscp\fP (which executes a shell), which prevents some errors.
.SS Example
.sp
A simple greeting:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function fish_greeting
    echo Hello friend!
    echo The time is (set_color yellow; date +%T; set_color normal) and this machine is called $hostname
end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS fish_hg_prompt \- output Mercurial information for use in a prompt
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function fish_prompt
     printf \(aq%s\(aq $PWD (fish_hg_prompt) \(aq $ \(aq
end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
The fish_hg_prompt function displays information about the current Mercurial repository, if any.
.sp
\fI\%Mercurial\fP (\fBhg\fP) must be installed.
.sp
By default, only the current branch is shown because \fBhg status\fP can be slow on a large repository. You can enable a more informative prompt by setting the variable \fB$fish_prompt_hg_show_informative_status\fP, for example:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
set \-\-universal fish_prompt_hg_show_informative_status
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If you enabled the informative status, there are numerous customization options, which can be controlled with fish variables.
.INDENT 0.0
.IP \(bu 2
\fB$fish_color_hg_clean\fP, \fB$fish_color_hg_modified\fP and \fB$fish_color_hg_dirty\fP are colors used when the repository has the respective status.
.UNINDENT
.sp
Some colors for status symbols:
.INDENT 0.0
.IP \(bu 2
\fB$fish_color_hg_added\fP
.IP \(bu 2
\fB$fish_color_hg_renamed\fP
.IP \(bu 2
\fB$fish_color_hg_copied\fP
.IP \(bu 2
\fB$fish_color_hg_deleted\fP
.IP \(bu 2
\fB$fish_color_hg_untracked\fP
.IP \(bu 2
\fB$fish_color_hg_unmerged\fP
.UNINDENT
.sp
The status symbols themselves:
.INDENT 0.0
.IP \(bu 2
\fB$fish_prompt_hg_status_added\fP, default \(aq✚\(aq
.IP \(bu 2
\fB$fish_prompt_hg_status_modified\fP, default \(aq*\(aq
.IP \(bu 2
\fB$fish_prompt_hg_status_copied\fP, default \(aq⇒\(aq
.IP \(bu 2
\fB$fish_prompt_hg_status_deleted\fP, default \(aq✖\(aq
.IP \(bu 2
\fB$fish_prompt_hg_status_untracked\fP, default \(aq?\(aq
.IP \(bu 2
\fB$fish_prompt_hg_status_unmerged\fP, default \(aq!\(aq
.UNINDENT
.sp
Finally, \fB$fish_prompt_hg_status_order\fP, which can be used to change the order the status symbols appear in. It defaults to \fBadded modified copied deleted untracked unmerged\fP\&.
.sp
See also fish_vcs_prompt, which will call all supported version control prompt functions, including git, Mercurial and Subversion.
.SS Example
.sp
A simple prompt that displays hg info:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function fish_prompt
    ...
    set \-g fish_prompt_hg_show_informative_status
    printf \(aq%s %s$\(aq $PWD (fish_hg_prompt)
end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS fish_indent \- indenter and prettifier
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
fish_indent [OPTIONS] [FILE...]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBfish_indent\fP is used to indent a piece of fish code. \fBfish_indent\fP reads commands from standard input or the given filenames and outputs them to standard output or a specified file (if \fB\-w\fP is given).
.sp
The following options are available:
.INDENT 0.0
.IP \(bu 2
\fB\-w\fP or \fB\-\-write\fP indents a specified file and immediately writes to that file.
.IP \(bu 2
\fB\-i\fP or \fB\-\-no\-indent\fP do not indent commands; only reformat to one job per line.
.IP \(bu 2
\fB\-c\fP or \fB\-\-check\fP do not indent, only return 0 if the code is already indented as fish_indent would, the number of failed files otherwise. Also print the failed filenames if not reading from stdin.
.IP \(bu 2
\fB\-v\fP or \fB\-\-version\fP displays the current fish version and then exits.
.IP \(bu 2
\fB\-\-ansi\fP colorizes the output using ANSI escape sequences, appropriate for the current $TERM, using the colors defined in the environment (such as \fB$fish_color_command\fP).
.IP \(bu 2
\fB\-\-html\fP outputs HTML, which supports syntax highlighting if the appropriate CSS is defined. The CSS class names are the same as the variable names, such as \fBfish_color_command\fP\&.
.IP \(bu 2
\fB\-d\fP or \fB\-\-debug=DEBUG_CATEGORIES\fP enable debug output and specify a pattern for matching debug categories. See Debugging in fish(1) for details.
.IP \(bu 2
\fB\-o\fP or \fB\-\-debug\-output=DEBUG_FILE\fP specify a file path to receive the debug output, including categories and \fBfish_trace\fP\&. The default is stderr.
.IP \(bu 2
\fB\-\-dump\-parse\-tree\fP dumps information about the parsed statements to stderr. This is likely to be of interest only to people working on the fish source code.
.UNINDENT
.SS fish_is_root_user \- check if the current user is root
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
fish_is_root_user
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBfish_is_root_user\fP will check if the current user is root. It can be useful
for the prompt to display something different if the user is root, for example.
.SS Example
.sp
A simple example:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function example \-\-description \(aqJust an example\(aq
    if fish_is_root_user
        do_something_different
    end
end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS fish_key_reader \- explore what characters keyboard keys send
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
fish_key_reader [OPTIONS]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBfish_key_reader\fP is used to study input received from the terminal and can help with key binds. The program is interactive and works on standard input. Individual characters themselves and their hexadecimal values are displayed.
.sp
The tool will write an example bind command matching the character sequence captured to stdout. If the character sequence matches a special key name (see \fBbind \-\-key\-names\fP),  both \fBbind CHARS ...\fP and \fBbind \-k KEYNAME ...\fP usage will be shown. Additional details about the characters received, such as the delay between chars, are written to stderr.
.sp
The following options are available:
.INDENT 0.0
.IP \(bu 2
\fB\-c\fP or \fB\-\-continuous\fP begins a session where multiple key sequences can be inspected. By default the program exits after capturing a single key sequence.
.IP \(bu 2
\fB\-h\fP or \fB\-\-help\fP prints usage information.
.IP \(bu 2
\fB\-v\fP or \fB\-\-version\fP prints fish_key_reader\(aqs version and exits.
.UNINDENT
.SS Usage Notes
.sp
The delay in milliseconds since the previous character was received is included in the diagnostic information written to stderr. This information may be useful to determine the optimal \fBfish_escape_delay_ms\fP setting or learn the amount of lag introduced by tools like \fBssh\fP, \fBmosh\fP or \fBtmux\fP\&.
.sp
\fBfish_key_reader\fP intentionally disables handling of many signals. To terminate \fBfish_key_reader\fP in \fB\-\-continuous\fP mode do:
.INDENT 0.0
.IP \(bu 2
press \fBControl\fP+\fBC\fP twice, or
.IP \(bu 2
press \fBControl\fP+\fBD\fP twice, or
.IP \(bu 2
type \fBexit\fP, or
.IP \(bu 2
type \fBquit\fP
.UNINDENT
.SS fish_mode_prompt \- define the appearance of the mode indicator
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function fish_mode_prompt
     echo \-n "$fish_bind_mode "
end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
The \fBfish_mode_prompt\fP function outputs the mode indicator for use in vi\-mode.
.sp
The default \fBfish_mode_prompt\fP function will output indicators about the current Vi editor mode displayed to the left of the regular prompt. Define your own function to customize the appearance of the mode indicator. The \fB$fish_bind_mode variable\fP can be used to determine the current mode. It will be one of \fBdefault\fP, \fBinsert\fP, \fBreplace_one\fP, or \fBvisual\fP\&.
.sp
You can also define an empty \fBfish_mode_prompt\fP function to remove the Vi mode indicators:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function fish_mode_prompt; end
funcsave fish_mode_prompt
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBfish_mode_prompt\fP will be executed when the vi mode changes. If it produces any output, it is displayed and used. If it does not, the other prompt functions (fish_prompt and fish_right_prompt) will be executed as well in case they contain a mode display.
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function fish_mode_prompt
  switch $fish_bind_mode
    case default
      set_color \-\-bold red
      echo \(aqN\(aq
    case insert
      set_color \-\-bold green
      echo \(aqI\(aq
    case replace_one
      set_color \-\-bold green
      echo \(aqR\(aq
    case visual
      set_color \-\-bold brmagenta
      echo \(aqV\(aq
    case \(aq*\(aq
      set_color \-\-bold red
      echo \(aq?\(aq
  end
  set_color normal
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Outputting multiple lines is not supported in \fBfish_mode_prompt\fP\&.
.SS fish_opt \- create an option spec for the argparse command
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
fish_opt [ \-h | \-\-help ]
fish_opt ( \-s X | \-\-short=X ) [ \-l LONG | \-\-long=LONG ] [ \-\-long\-only ] [ \-o | \-\-optional\-val ] [ \-r | \-\-required\-val ] [ \-\-multiple\-vals ]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
This command provides a way to produce option specifications suitable for use with the argparse command. You can, of course, write the option specs by hand without using this command. But you might prefer to use this for the clarity it provides.
.sp
The following \fBargparse\fP options are available:
.INDENT 0.0
.IP \(bu 2
\fB\-s\fP or \fB\-\-short\fP takes a single letter that is used as the short flag in the option being defined. This option is mandatory.
.IP \(bu 2
\fB\-l\fP or \fB\-\-long\fP takes a string that is used as the long flag in the option being defined. This option is optional and has no default. If no long flag is defined then only the short flag will be allowed when parsing arguments using the option spec.
.IP \(bu 2
\fB\-\-long\-only\fP means the option spec being defined will only allow the long flag name to be used. The short flag name must still be defined (i.e., \fB\-\-short\fP must be specified) but it cannot be used when parsing args using this option spec.
.IP \(bu 2
\fB\-o\fP or \fB\-\-optional\-val\fP means the option being defined can take a value but it is optional rather than required. If the option is seen more than once when parsing arguments only the last value seen is saved. This means the resulting flag variable created by \fBargparse\fP will zero elements if no value was given with the option else it will have exactly one element.
.IP \(bu 2
\fB\-r\fP or \fB\-\-required\-val\fP means the option being defined requires a value. If the option is seen more than once when parsing arguments only the last value seen is saved. This means the resulting flag variable created by \fBargparse\fP will have exactly one element.
.IP \(bu 2
\fB\-\-multiple\-vals\fP means the option being defined requires a value each time it is seen. Each instance is stored. This means the resulting flag variable created by \fBargparse\fP will have one element for each instance of this option in the args.
.IP \(bu 2
\fB\-h\fP or \fB\-\-help\fP displays help about using this command.
.UNINDENT
.SS Examples
.sp
Define a single option spec for the boolean help flag:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
set \-l options (fish_opt \-s h \-l help)
argparse $options \-\- $argv
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Same as above but with a second flag that requires a value:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
set \-l options (fish_opt \-s h \-l help)
set options $options (fish_opt \-s m \-l max \-\-required\-val)
argparse $options \-\- $argv
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Same as above but with a third flag that can be given multiple times saving the value of each instance seen and only the long flag name (\fB\-\-token\fP) can be used:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
set \-l options (fish_opt \-\-short=h \-\-long=help)
set options $options (fish_opt \-\-short=m \-\-long=max \-\-required\-val)
set options $options (fish_opt \-\-short=t \-\-long=token \-\-multiple\-vals \-\-long\-only)
argparse $options \-\- $argv
.ft P
.fi
.UNINDENT
.UNINDENT
.SS fish_prompt \- define the appearance of the command line prompt
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function fish_prompt
    ...
end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
The \fBfish_prompt\fP function is executed when the prompt is to be shown, and the output is used as a prompt.
.sp
The exit status of commands within \fBfish_prompt\fP will not modify the value of $status outside of the \fBfish_prompt\fP function.
.sp
\fBfish\fP ships with a number of example prompts that can be chosen with the \fBfish_config\fP command.
.SS Example
.sp
A simple prompt:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function fish_prompt \-d "Write out the prompt"
    # This shows up as USER@HOST /home/user/ >, with the directory colored
    # $USER and $hostname are set by fish, so you can just use them
    # instead of using \(gawhoami\(ga and \(gahostname\(ga
    printf \(aq%s@%s %s%s%s > \(aq $USER $hostname \e
        (set_color $fish_color_cwd) (prompt_pwd) (set_color normal)
end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS fish_right_prompt \- define the appearance of the right\-side command line prompt
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function fish_right_prompt
    ...
end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBfish_right_prompt\fP is similar to \fBfish_prompt\fP, except that it appears on the right side of the terminal window.
.sp
Multiple lines are not supported in \fBfish_right_prompt\fP\&.
.SS Example
.sp
A simple right prompt:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function fish_right_prompt \-d "Write out the right prompt"
    date \(aq+%m/%d/%y\(aq
end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS fish_status_to_signal \- Convert exit codes to human\-friendly signals
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function fish_prompt
    echo \-n (fish_status_to_signal $pipestatus | string join \(aq|\(aq) (prompt_pwd) \(aq$ \(aq
end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBfish_status_to_signal\fP converts exit codes to their corresponding human\-friendly signals if one exists.
This is likely to be useful for prompts in conjunction with the \fB$status\fP and \fB$pipestatus\fP variables.
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>_ sleep 5
^C⏎
>_ fish_status_to_signal $status
SIGINT
.ft P
.fi
.UNINDENT
.UNINDENT
.SS fish_svn_prompt \- output Subversion information for use in a prompt
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function fish_prompt
     printf \(aq%s\(aq $PWD (fish_svn_prompt) \(aq $ \(aq
end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
The fish_svn_prompt function displays information about the current Subversion repository, if any.
.sp
\fI\%Subversion\fP (\fBsvn\fP) must be installed.
.sp
There are numerous customization options, which can be controlled with fish variables.
.INDENT 0.0
.IP \(bu 2
.INDENT 2.0
.TP
.B \fB$__fish_svn_prompt_color_revision\fP
the colour of the revision number to display in the prompt
.UNINDENT
.IP \(bu 2
.INDENT 2.0
.TP
.B \fB$__fish_svn_prompt_char_separator\fP
the separator between status characters
.UNINDENT
.UNINDENT
.sp
A number of variables control the symbol ("display") and color ("color") for the different status indicators:
.INDENT 0.0
.IP \(bu 2
\fB$__fish_svn_prompt_char_added_display\fP
.IP \(bu 2
\fB$__fish_svn_prompt_char_added_color\fP
.IP \(bu 2
\fB$__fish_svn_prompt_char_conflicted_display\fP
.IP \(bu 2
\fB$__fish_svn_prompt_char_conflicted_color\fP
.IP \(bu 2
\fB$__fish_svn_prompt_char_deleted_display\fP
.IP \(bu 2
\fB$__fish_svn_prompt_char_deleted_color\fP
.IP \(bu 2
\fB$__fish_svn_prompt_char_ignored_display\fP
.IP \(bu 2
\fB$__fish_svn_prompt_char_ignored_color\fP
.IP \(bu 2
\fB$__fish_svn_prompt_char_modified_display\fP
.IP \(bu 2
\fB$__fish_svn_prompt_char_modified_color\fP
.IP \(bu 2
\fB$__fish_svn_prompt_char_replaced_display\fP
.IP \(bu 2
\fB$__fish_svn_prompt_char_replaced_color\fP
.IP \(bu 2
\fB$__fish_svn_prompt_char_unversioned_external_display\fP
.IP \(bu 2
\fB$__fish_svn_prompt_char_unversioned_external_color\fP
.IP \(bu 2
\fB$__fish_svn_prompt_char_unversioned_display\fP
.IP \(bu 2
\fB$__fish_svn_prompt_char_unversioned_color\fP
.IP \(bu 2
\fB$__fish_svn_prompt_char_missing_display\fP
.IP \(bu 2
\fB$__fish_svn_prompt_char_missing_color\fP
.IP \(bu 2
\fB$__fish_svn_prompt_char_versioned_obstructed_display\fP
.IP \(bu 2
\fB$__fish_svn_prompt_char_versioned_obstructed_color\fP
.IP \(bu 2
\fB$__fish_svn_prompt_char_locked_display\fP
.IP \(bu 2
\fB$__fish_svn_prompt_char_locked_color\fP
.IP \(bu 2
\fB$__fish_svn_prompt_char_scheduled_display\fP
.IP \(bu 2
\fB$__fish_svn_prompt_char_scheduled_color\fP
.IP \(bu 2
\fB$__fish_svn_prompt_char_switched_display\fP
.IP \(bu 2
\fB$__fish_svn_prompt_char_switched_color\fP
.IP \(bu 2
\fB$__fish_svn_prompt_char_token_present_display\fP
.IP \(bu 2
\fB$__fish_svn_prompt_char_token_present_color\fP
.IP \(bu 2
\fB$__fish_svn_prompt_char_token_other_display\fP
.IP \(bu 2
\fB$__fish_svn_prompt_char_token_other_color\fP
.IP \(bu 2
\fB$__fish_svn_prompt_char_token_stolen_display\fP
.IP \(bu 2
\fB$__fish_svn_prompt_char_token_stolen_color\fP
.IP \(bu 2
\fB$__fish_svn_prompt_char_token_broken_display\fP
.IP \(bu 2
\fB$__fish_svn_prompt_char_token_broken_color\fP
.UNINDENT
.sp
See also fish_vcs_prompt, which will call all supported version control prompt functions, including git, Mercurial and Subversion.
.SS Example
.sp
A simple prompt that displays svn info:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function fish_prompt
    ...
    printf \(aq%s %s$\(aq $PWD (fish_svn_prompt)
end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS fish_title \- define the terminal\(aqs title
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function fish_title
    ...
end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
The \fBfish_title\fP function is executed before and after a new command is executed or put into the foreground and the output is used as a titlebar message.
.sp
The first argument to fish_title contains the most recently executed foreground command as a string, if any.
.sp
This requires that your terminal supports programmable titles and the feature is turned on.
.SS Example
.sp
A simple title:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function fish_title
    set \-q argv[1]; or set argv fish
    # Looks like ~/d/fish: git log
    # or /e/apt: fish
    echo (fish_prompt_pwd_dir_length=1 prompt_pwd): $argv;
end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS fish_update_completions \- update completions using manual pages
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
fish_update_completions
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBfish_update_completions\fP parses manual pages installed on the system, and attempts to create completion files in the \fBfish\fP configuration directory.
.sp
This does not overwrite custom completions.
.sp
There are no parameters for \fBfish_update_completions\fP\&.
.SS fish_vcs_prompt \- output version control system information for use in a prompt
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function fish_prompt
     printf \(aq%s\(aq $PWD (fish_vcs_prompt) \(aq $ \(aq
end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
The \fBfish_vcs_prompt\fP function displays information about the current version control system (VCS) repository, if any.
.sp
It calls out to VCS\-specific functions. The currently supported systems are:
.INDENT 0.0
.IP \(bu 2
fish_git_prompt
.IP \(bu 2
fish_hg_prompt
.IP \(bu 2
fish_svn_prompt
.UNINDENT
.sp
If a VCS isn\(aqt installed, the respective function does nothing.
.sp
The svn prompt is disabled by default because it\(aqs slow on large svn repositories. To enable it, modify fish_vcs_prompt to uncomment it. See funced\&.
.sp
For more information, see the documentation for each of the functions above.
.SS Example
.sp
A simple prompt that displays all known VCS info:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function fish_prompt
    ...
    set \-g __fish_git_prompt_showupstream auto
    printf \(aq%s %s$\(aq $PWD (fish_vcs_prompt)
end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS for \- perform a set of commands multiple times
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
for VARNAME in [VALUES...]; COMMANDS...; end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBfor\fP is a loop construct. It will perform the commands specified by \fBCOMMANDS\fP multiple times. On each iteration, the local variable specified by \fBVARNAME\fP is assigned a new value from \fBVALUES\fP\&. If \fBVALUES\fP is empty, \fBCOMMANDS\fP will not be executed at all. The \fBVARNAME\fP is visible when the loop terminates and will contain the last value assigned to it. If \fBVARNAME\fP does not already exist it will be set in the local scope. For our purposes if the \fBfor\fP block is inside a function there must be a local variable with the same name. If the \fBfor\fP block is not nested inside a function then global and universal variables of the same name will be used if they exist.
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
for i in foo bar baz; echo $i; end

# would output:
foo
bar
baz
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Notes
.sp
The \fBVARNAME\fP was local to the for block in releases prior to 3.0.0. This means that if you did something like this:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
for var in a b c
    if break_from_loop
        break
    end
end
echo $var
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The last value assigned to \fBvar\fP when the loop terminated would not be available outside the loop. What \fBecho $var\fP would write depended on what it was set to before the loop was run. Likely nothing.
.SS funced \- edit a function interactively
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
funced [OPTIONS] NAME
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBfunced\fP provides an interface to edit the definition of the function \fBNAME\fP\&.
.sp
If the \fB$VISUAL\fP environment variable is set, it will be used as the program to edit the function. If \fB$VISUAL\fP is unset but \fB$EDITOR\fP is set, that will be used. Otherwise, a built\-in editor will be used. Note that to enter a literal newline using the built\-in editor you should press \fBAlt\fP+\fBEnter\fP\&. Pressing \fBEnter\fP signals that you are done editing the function. This does not apply to an external editor like emacs or vim.
.sp
If there is no function called \fBNAME\fP a new function will be created with the specified name
.INDENT 0.0
.IP \(bu 2
\fB\-e command\fP or \fB\-\-editor command\fP Open the function body inside the text editor given by the command (for example, \fB\-e vi\fP). The special command \fBfish\fP will use the built\-in editor (same as specifying \fB\-i\fP).
.IP \(bu 2
\fB\-i\fP or \fB\-\-interactive\fP Force opening the function body in the built\-in editor even if \fB$VISUAL\fP or \fB$EDITOR\fP is defined.
.IP \(bu 2
\fB\-s\fP or \fB\-\-save\fP Automatically save the function after successfully editing it.
.UNINDENT
.SS Example
.sp
Say you want to modify your prompt.
.sp
Run:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>_ funced fish_prompt
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This will open up your editor, allowing you to modify the function. When you\(aqre done, save and quit. Fish will reload the function, so you should see the changes right away.
.sp
When you\(aqre done, use:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>_ funcsave fish_prompt
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
For more, see funcsave\&.
.SS funcsave \- save the definition of a function to the user\(aqs autoload directory
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
funcsave FUNCTION_NAME
funcsave [(\-d | \-\-directory) where/to/save ] FUNCTION_NAME
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBfuncsave\fP saves a function to a file in the fish configuration directory. This function will be automatically loaded by current and future fish sessions. This can be useful if you have interactively created a new function and wish to save it for later use.
.sp
Note that because fish loads functions on\-demand, saved functions will not function as event handlers until they are run or sourced otherwise. To activate an event handler for every new shell, add the function to your configuration file instead of using \fBfuncsave\fP\&.
.sp
This is typically used together with funced, which will open the function in your editor and load it in the current seession afterwards.
.SS function \- create a function
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function NAME [OPTIONS]; BODY; end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBfunction\fP creates a new function \fBNAME\fP with the body \fBBODY\fP\&.
.sp
A function is a list of commands that will be executed when the name of the function is given as a command.
.sp
The following options are available:
.INDENT 0.0
.IP \(bu 2
\fB\-a NAMES\fP or \fB\-\-argument\-names NAMES\fP assigns the value of successive command\-line arguments to the names given in NAMES.
.IP \(bu 2
\fB\-d DESCRIPTION\fP or \fB\-\-description=DESCRIPTION\fP is a description of what the function does, suitable as a completion description.
.IP \(bu 2
\fB\-w WRAPPED_COMMAND\fP or \fB\-\-wraps=WRAPPED_COMMAND\fP causes the function to inherit completions from the given wrapped command. See the documentation for complete for more information.
.IP \(bu 2
\fB\-e\fP or \fB\-\-on\-event EVENT_NAME\fP tells fish to run this function when the specified named event is emitted. Fish internally generates named events e.g. when showing the prompt.
.IP \(bu 2
\fB\-v\fP or \fB\-\-on\-variable VARIABLE_NAME\fP tells fish to run this function when the variable VARIABLE_NAME changes value. Note that fish makes no guarantees on any particular timing or even that the function will be run for every single \fBset\fP\&. Rather it will be run when the variable has been set at least once, possibly skipping some values or being run when the variable has been set to the same value (except for universal variables set in other shells \- only changes in the value will be picked up for those).
.IP \(bu 2
\fB\-j PID\fP or \fB\-\-on\-job\-exit PID\fP tells fish to run this function when the job containing a child process with the given PID exits. Instead of PID, the string \(aqcaller\(aq can be specified. This is only legal when in a command substitution, and will result in the handler being triggered by the exit of the job which created this command substitution.
.IP \(bu 2
\fB\-p PID\fP or \fB\-\-on\-process\-exit PID\fP tells fish to run this function when the fish child process
with process ID PID exits. Instead of a PID, for backward compatibility,
"\fB%self\fP" can be specified as an alias for \fB$fish_pid\fP, and the function will be run when the
current fish instance exits.
.IP \(bu 2
\fB\-s\fP or \fB\-\-on\-signal SIGSPEC\fP tells fish to run this function when the signal SIGSPEC is delivered. SIGSPEC can be a signal number, or the signal name, such as SIGHUP (or just HUP).
.IP \(bu 2
\fB\-S\fP or \fB\-\-no\-scope\-shadowing\fP allows the function to access the variables of calling functions. Normally, any variables inside the function that have the same name as variables from the calling function are "shadowed", and their contents are independent of the calling function.
It\(aqs important to note that this does not capture referenced variables or the scope at the time of function declaration! At this time, fish does not have any concept of closures, and variable lifetimes are never extended. In other words, by using \fB\-\-no\-scope\-shadowing\fP the scope of the function each time it is run is shared with the scope it was \fIcalled\fP from rather than the scope it was \fIdefined\fP in.
.IP \(bu 2
\fB\-V\fP or \fB\-\-inherit\-variable NAME\fP snapshots the value of the variable \fBNAME\fP and defines a local variable with that same name and value when the function is defined. This is similar to a closure in other languages like Python but a bit different. Note the word "snapshot" in the first sentence. If you change the value of the variable after defining the function, even if you do so in the same scope (typically another function) the new value will not be used by the function you just created using this option. See the \fBfunction notify\fP example below for how this might be used.
.UNINDENT
.sp
If the user enters any additional arguments after the function, they are inserted into the environment variable list \fB$argv\fP\&. If the \fB\-\-argument\-names\fP option is provided, the arguments are also assigned to names specified in that option.
.sp
By using one of the event handler switches, a function can be made to run automatically at specific events. The user may generate new events using the emit builtin. Fish generates the following named events:
.INDENT 0.0
.IP \(bu 2
\fBfish_prompt\fP, which is emitted whenever a new fish prompt is about to be displayed.
.IP \(bu 2
\fBfish_preexec\fP, which is emitted right before executing an interactive command. The commandline is passed as the first parameter. Not emitted if command is empty.
.IP \(bu 2
\fBfish_posterror\fP, which is emitted right after executing a command with syntax errors. The commandline is passed as the first parameter.
.IP \(bu 2
\fBfish_postexec\fP, which is emitted right after executing an interactive command. The commandline is passed as the first parameter. Not emitted if command is empty.
.IP \(bu 2
\fBfish_exit\fP is emitted right before fish exits.
.IP \(bu 2
\fBfish_cancel\fP, which is emitted when a commandline is cleared (used for terminal\-shell integration).
.UNINDENT
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function ll
    ls \-l $argv
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
will run the \fBls\fP command, using the \fB\-l\fP option, while passing on any additional files and switches to \fBls\fP\&.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function mkdir \-d "Create a directory and set CWD"
    command mkdir $argv
    if test $status = 0
        switch $argv[(count $argv)]
            case \(aq\-*\(aq

            case \(aq*\(aq
                cd $argv[(count $argv)]
                return
        end
    end
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This will run the \fBmkdir\fP command, and if it is successful, change the current working directory to the one just created.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function notify
    set \-l job (jobs \-l \-g)
    or begin; echo "There are no jobs" >&2; return 1; end

    function _notify_job_$job \-\-on\-job\-exit $job \-\-inherit\-variable job
        echo \-n \ea # beep
        functions \-e _notify_job_$job
    end
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This will beep when the most recent job completes.
.SS Notes
.sp
Events are only received from the current fish process as there is no way to send events from one fish process to another.
.SS See more
.sp
For more explanation of how functions fit into fish, see Functions\&.
.SS functions \- print or erase functions
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
functions [ \-a | \-\-all ] [ \-n | \-\-names ]
functions [ \-D | \-\-details ] [ \-v ] FUNCTION
functions \-c OLDNAME NEWNAME
functions \-d DESCRIPTION FUNCTION
functions [ \-e | \-q ] FUNCTIONS...
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBfunctions\fP prints or erases functions.
.sp
The following options are available:
.INDENT 0.0
.IP \(bu 2
\fB\-a\fP or \fB\-\-all\fP lists all functions, even those whose name starts with an underscore.
.IP \(bu 2
\fB\-c OLDNAME NEWNAME\fP or \fB\-\-copy OLDNAME NEWNAME\fP creates a new function named NEWNAME, using the definition of the OLDNAME function.
.IP \(bu 2
\fB\-d DESCRIPTION\fP or \fB\-\-description=DESCRIPTION\fP changes the description of this function.
.IP \(bu 2
\fB\-e\fP or \fB\-\-erase\fP causes the specified functions to be erased. This also means that it is prevented from autoloading.
.IP \(bu 2
\fB\-D\fP or \fB\-\-details\fP reports the path name where the specified function is defined or could be autoloaded, \fBstdin\fP if the function was defined interactively or on the command line or by reading stdin, \fB\-\fP if the function was created via source, and \fBn/a\fP if the function isn\(aqt available. (Functions created via alias will return \fB\-\fP, because \fBalias\fP uses \fBsource\fP internally.) If the \fB\-\-verbose\fP option is also specified then five lines are written:
.INDENT 2.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
the pathname as already described,
.IP \(bu 2
\fBautoloaded\fP, \fBnot\-autoloaded\fP or \fBn/a\fP,
.IP \(bu 2
the line number within the file or zero if not applicable,
.IP \(bu 2
\fBscope\-shadowing\fP if the function shadows the vars in the calling function (the normal case if it wasn\(aqt defined with \fB\-\-no\-scope\-shadowing\fP), else \fBno\-scope\-shadowing\fP, or \fBn/a\fP if the function isn\(aqt defined,
.IP \(bu 2
the function description minimally escaped so it is a single line or \fBn/a\fP if the function isn\(aqt defined.
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
You should not assume that only five lines will be written since we may add additional information to the output in the future.
.INDENT 0.0
.IP \(bu 2
\fB\-\-no\-details\fP turns off function path reporting, so just the definition will be printed.
.IP \(bu 2
\fB\-n\fP or \fB\-\-names\fP lists the names of all defined functions.
.IP \(bu 2
\fB\-q\fP or \fB\-\-query\fP tests if the specified functions exist.
.IP \(bu 2
\fB\-v\fP or \fB\-\-verbose\fP will make some output more verbose.
.IP \(bu 2
\fB\-H\fP or \fB\-\-handlers\fP will show all event handlers.
.IP \(bu 2
\fB\-t\fP or \fB\-\-handlers\-type TYPE\fP will show all event handlers matching the given type
.UNINDENT
.sp
The default behavior of \fBfunctions\fP, when called with no arguments, is to print the names of all defined functions. Unless the \fB\-a\fP option is given, no functions starting with underscores are included in the output.
.sp
If any non\-option parameters are given, the definition of the specified functions are printed.
.sp
Copying a function using \fB\-c\fP copies only the body of the function, and does not attach any event notifications from the original function.
.sp
Only one function\(aqs description can be changed in a single invocation of \fBfunctions \-d\fP\&.
.sp
The exit status of \fBfunctions\fP is the number of functions specified in the argument list that do not exist, which can be used in concert with the \fB\-q\fP option.
.SS Examples
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
functions \-n
# Displays a list of currently\-defined functions

functions \-c foo bar
# Copies the \(aqfoo\(aq function to a new function called \(aqbar\(aq

functions \-e bar
# Erases the function \(ga\(gabar\(ga\(ga
.ft P
.fi
.UNINDENT
.UNINDENT
.SS See more
.sp
For more explanation of how functions fit into fish, see Functions\&.
.SS help \- display fish documentation
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
help [SECTION]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBhelp\fP displays the fish help documentation.
.sp
If a \fBSECTION\fP is specified, the help for that command is shown.
.sp
If the BROWSER environment variable is set, it will be used to display the documentation. Otherwise, fish will search for a suitable browser.
.sp
If you prefer to use a different browser (other than as described above) for fish help, you can set the fish_help_browser variable. This variable may be set as a list, where the first element is the browser command and the rest are browser options.
.sp
Note that most builtin commands display their help in the terminal when given the \fB\-\-help\fP option.
.SS Example
.sp
\fBhelp fg\fP shows the documentation for the fg builtin.
.SS history \- show and manipulate command history
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
history [ search ] [ \-\-show\-time ] [ \-\-case\-sensitive ] [ \-\-exact | \-\-prefix | \-\-contains ] [ \-\-max=n ] [ \-\-null ] [ \-R | \-\-reverse ] [ "search string"... ]
history delete [ \-\-show\-time ] [ \-\-case\-sensitive ] [ \-\-exact | \-\-prefix | \-\-contains ] "search string"...
history merge
history save
history clear
history ( \-h | \-\-help )
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBhistory\fP is used to search, delete, and otherwise manipulate the history of interactive commands\&.
.sp
The following operations (sub\-commands) are available:
.INDENT 0.0
.IP \(bu 2
\fBsearch\fP returns history items matching the search string. If no search string is provided it returns all history items. This is the default operation if no other operation is specified. You only have to explicitly say \fBhistory search\fP if you wish to search for one of the subcommands. The \fB\-\-contains\fP search option will be used if you don\(aqt specify a different search option. Entries are ordered newest to oldest unless you use the \fB\-\-reverse\fP flag. If stdout is attached to a tty the output will be piped through your pager by the history function. The history builtin simply writes the results to stdout.
.IP \(bu 2
\fBdelete\fP deletes history items. The \fB\-\-contains\fP search option will be used if you don\(aqt specify a different search option. If you don\(aqt specify \fB\-\-exact\fP a prompt will be displayed before any items are deleted asking you which entries are to be deleted. You can enter the word "all" to delete all matching entries. You can enter a single ID (the number in square brackets) to delete just that single entry. You can enter more than one ID separated by a space to delete multiple entries. Just press [enter] to not delete anything. Note that the interactive delete behavior is a feature of the history function. The history builtin only supports \fB\-\-exact \-\-case\-sensitive\fP deletion.
.IP \(bu 2
\fBmerge\fP immediately incorporates history changes from other sessions. Ordinarily \fBfish\fP ignores history changes from sessions started after the current one. This command applies those changes immediately.
.IP \(bu 2
\fBsave\fP immediately writes all changes to the history file. The shell automatically saves the history file; this option is provided for internal use and should not normally need to be used by the user.
.IP \(bu 2
\fBclear\fP clears the history file. A prompt is displayed before the history is erased asking you to confirm you really want to clear all history unless \fBbuiltin history\fP is used.
.UNINDENT
.sp
The following options are available:
.sp
These flags can appear before or immediately after one of the sub\-commands listed above.
.INDENT 0.0
.IP \(bu 2
\fB\-C\fP or \fB\-\-case\-sensitive\fP does a case\-sensitive search. The default is case\-insensitive. Note that prior to fish 2.4.0 the default was case\-sensitive.
.IP \(bu 2
\fB\-c\fP or \fB\-\-contains\fP searches or deletes items in the history that contain the specified text string. This is the default for the \fB\-\-search\fP flag. This is not currently supported by the \fBdelete\fP subcommand.
.IP \(bu 2
\fB\-e\fP or \fB\-\-exact\fP searches or deletes items in the history that exactly match the specified text string. This is the default for the \fBdelete\fP subcommand. Note that the match is case\-insensitive by default. If you really want an exact match, including letter case, you must use the \fB\-C\fP or \fB\-\-case\-sensitive\fP flag.
.IP \(bu 2
\fB\-p\fP or \fB\-\-prefix\fP searches or deletes items in the history that begin with the specified text string. This is not currently supported by the \fB\-\-delete\fP flag.
.IP \(bu 2
\fB\-t\fP or \fB\-\-show\-time\fP prepends each history entry with the date and time the entry was recorded. By default it uses the strftime format \fB# %c%n\fP\&. You can specify another format; e.g., \fB\-\-show\-time="%Y\-%m\-%d %H:%M:%S "\fP or \fB\-\-show\-time="%a%I%p"\fP\&. The short option, \fB\-t\fP, doesn\(aqt accept a strftime format string; it only uses the default format. Any strftime format is allowed, including \fB%s\fP to get the raw UNIX seconds since the epoch.
.IP \(bu 2
\fB\-z\fP or \fB\-\-null\fP causes history entries written by the search operations to be terminated by a NUL character rather than a newline. This allows the output to be processed by \fBread \-z\fP to correctly handle multiline history entries.
.IP \(bu 2
\fB\-<number>\fP \fB\-n <number>\fP or \fB\-\-max=<number>\fP limits the matched history items to the first "n" matching entries. This is only valid for \fBhistory search\fP\&.
.IP \(bu 2
\fB\-R\fP or \fB\-\-reverse\fP causes the history search results to be ordered oldest to newest. Which is the order used by most shells. The default is newest to oldest.
.IP \(bu 2
\fB\-h\fP or \fB\-\-help\fP display help for this command.
.UNINDENT
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
history clear
# Deletes all history items

history search \-\-contains "foo"
# Outputs a list of all previous commands containing the string "foo".

history delete \-\-prefix "foo"
# Interactively deletes commands which start with "foo" from the history.
# You can select more than one entry by entering their IDs separated by a space.
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Customizing the name of the history file
.sp
By default interactive commands are logged to \fB$XDG_DATA_HOME/fish/fish_history\fP (typically \fB~/.local/share/fish/fish_history\fP).
.sp
You can set the \fBfish_history\fP variable to another name for the current shell session. The default value (when the variable is unset) is \fBfish\fP which corresponds to \fB$XDG_DATA_HOME/fish/fish_history\fP\&. If you set it to e.g. \fBfun\fP, the history would be written to \fB$XDG_DATA_HOME/fish/fun_history\fP\&. An empty string means history will not be stored at all. This is similar to the private session features in web browsers.
.sp
You can change \fBfish_history\fP at any time (by using \fBset \-x fish_history "session_name"\fP) and it will take effect right away. If you set it to \fB"default"\fP, it will use the default session name (which is \fB"fish"\fP).
.sp
Other shells such as bash and zsh use a variable named \fBHISTFILE\fP for a similar purpose. Fish uses a different name to avoid conflicts and signal that the behavior is different (session name instead of a file path). Also, if you set the var to anything other than \fBfish\fP or \fBdefault\fP it will inhibit importing the bash history. That\(aqs because the most common use case for this feature is to avoid leaking private or sensitive history when giving a presentation.
.SS Notes
.sp
If you specify both \fB\-\-prefix\fP and \fB\-\-contains\fP the last flag seen is used.
.sp
Note that for backwards compatibility each subcommand can also be specified as a long option. For example, rather than \fBhistory search\fP you can type \fBhistory \-\-search\fP\&. Those long options are deprecated and will be removed in a future release.
.SS if \- conditionally execute a command
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
if CONDITION; COMMANDS_TRUE...;
[else if CONDITION2; COMMANDS_TRUE2...;]
[else; COMMANDS_FALSE...;]
end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBif\fP will execute the command \fBCONDITION\fP\&. If the condition\(aqs exit status is 0, the commands \fBCOMMANDS_TRUE\fP will execute.  If the exit status is not 0 and else is given, \fBCOMMANDS_FALSE\fP will be executed.
.sp
You can use and or or in the condition. See the second example below.
.sp
The exit status of the last foreground command to exit can always be accessed using the $status variable.
.SS Example
.sp
The following code will print \fBfoo.txt exists\fP if the file foo.txt exists and is a regular file, otherwise it will print \fBbar.txt exists\fP if the file bar.txt exists and is a regular file, otherwise it will print \fBfoo.txt and bar.txt do not exist\fP\&.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
if test \-f foo.txt
    echo foo.txt exists
else if test \-f bar.txt
    echo bar.txt exists
else
    echo foo.txt and bar.txt do not exist
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The following code will print "foo.txt exists and is readable" if foo.txt is a regular file and readable
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
if test \-f foo.txt
   and test \-r foo.txt
   echo "foo.txt exists and is readable"
end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS isatty \- test if a file descriptor is a terminal
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
isatty [FILE DESCRIPTOR]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBisatty\fP tests if a file descriptor is a terminal (as opposed to a file). The name is derived from the system call of the same name, which for historical reasons refers to a teletypewriter (TTY).
.sp
\fBFILE DESCRIPTOR\fP may be either the number of a file descriptor, or one of the strings \fBstdin\fP, \fBstdout\fP, or \fBstderr\fP\&. If not specified, zero is assumed.
.sp
If the specified file descriptor is a terminal device, the exit status of the command is zero. Otherwise, the exit status is non\-zero. No messages are printed to standard error.
.SS Examples
.sp
From an interactive shell, the commands below exit with a return value of zero:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
isatty
isatty stdout
isatty 2
echo | isatty 1
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
And these will exit non\-zero:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
echo | isatty
isatty 9
isatty stdout > file
isatty 2 2> file
.ft P
.fi
.UNINDENT
.UNINDENT
.SS jobs \- print currently running jobs
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
jobs [OPTIONS] [ PID | %JOBID ]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBjobs\fP prints a list of the currently running jobs and their status.
.sp
jobs accepts the following switches:
.INDENT 0.0
.IP \(bu 2
\fB\-c\fP or \fB\-\-command\fP prints the command name for each process in jobs.
.IP \(bu 2
\fB\-g\fP or \fB\-\-group\fP only prints the group ID of each job.
.IP \(bu 2
\fB\-l\fP or \fB\-\-last\fP prints only the last job to be started.
.IP \(bu 2
\fB\-p\fP or \fB\-\-pid\fP prints the process ID for each process in all jobs.
.IP \(bu 2
\fB\-q\fP or \fB\-\-query\fP prints no output for evaluation of jobs by exit status only. For compatibility with old fish versions this is also \fB\-\-quiet\fP (but this is deprecated).
.UNINDENT
.sp
On systems that supports this feature, jobs will print the CPU usage of each job since the last command was executed. The CPU usage is expressed as a percentage of full CPU activity. Note that on multiprocessor systems, the total activity may be more than 100%.
.sp
Arguments of the form \fBPID\fP or \fB%JOBID\fP restrict the output to jobs with the selected process identifiers or job numbers respectively.
.sp
If the output of \fBjobs\fP is redirected or if it is part of a command substitution, the column header that is usually printed is omitted, making it easier to parse.
.sp
The exit status of \fBjobs\fP is \fB0\fP if there are running background jobs and \fB1\fP otherwise.
.SS Example
.sp
\fBjobs\fP outputs a summary of the current jobs, such as two long\-running tasks in this example:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Job Group   State   Command
2   26012   running nc \-l 55232 < /dev/random &
1   26011   running python tests/test_11.py &
.ft P
.fi
.UNINDENT
.UNINDENT
.SS math \- perform mathematics calculations
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
math [\-sN | \-\-scale=N] [\-bBASE | \-\-base=BASE] [\-\-] EXPRESSION
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBmath\fP performs mathematical calculations. It supports simple operations such as addition, subtraction, and so on, as well as functions like \fBabs()\fP, \fBsqrt()\fP and \fBln()\fP\&.
.sp
By default, the output is a floating\-point number with trailing zeroes trimmed. To get a fixed representation, the \fB\-\-scale\fP option can be used, including \fB\-\-scale=0\fP for integer output.
.sp
Keep in mind that parameter expansion happens before expressions are evaluated. This can be very useful in order to perform calculations involving shell variables or the output of command substitutions, but it also means that parenthesis (\fB()\fP) and the asterisk (\fB*\fP) glob character have to be escaped or quoted. \fBx\fP can also be used to denote multiplication, but it needs to be followed by whitespace to distinguish it from hexadecimal numbers.
.sp
Parentheses for functions are optional \- \fBmath sin pi\fP prints \fB0\fP\&. However, a comma will bind to the inner function, so \fBmath pow sin 3, 5\fP is an error because it tries to give \fBsin\fP the arguments \fB3\fP and \fB5\fP\&. When in doubt, use parentheses.
.sp
\fBmath\fP ignores whitespace between arguments and takes its input as multiple arguments (internally joined with a space), so \fBmath 2 +2\fP and \fBmath "2 +    2"\fP work the same. \fBmath 2 2\fP is an error.
.sp
The following options are available:
.INDENT 0.0
.IP \(bu 2
\fB\-sN\fP or \fB\-\-scale=N\fP sets the scale of the result. \fBN\fP must be an integer or the word "max" for the maximum scale. A scale of zero causes results to be rounded down to the nearest integer. So \fB3/2\fP returns \fB1\fP rather than \fB2\fP which \fB1.5\fP would normally round to. This is for compatibility with \fBbc\fP which was the basis for this command prior to fish 3.0.0. Scale values greater than zero causes the result to be rounded using the usual rules to the specified number of decimal places.
.IP \(bu 2
\fB\-b BASE\fP or \fB\-\-base BASE\fP sets the numeric base used for output (\fBmath\fP always understands hexadecimal numbers as input). It currently understands "hex" or "16" for hexadecimal and "octal" or "8" for octal and implies a scale of 0 (other scales cause an error), so it will truncate the result down to an integer. This might change in the future. Hex numbers will be printed with a \fB0x\fP prefix. Octal numbers will have a prefix of \fB0\fP and aren\(aqt understood by \fBmath\fP as input.
.UNINDENT
.SS Return Values
.sp
If the expression is successfully evaluated and doesn\(aqt over/underflow or return NaN the return \fBstatus\fP is zero (success) else one.
.SS Syntax
.sp
\fBmath\fP knows some operators, constants, functions and can (obviously) read numbers.
.sp
For numbers, \fB\&.\fP is always the radix character regardless of locale \- \fB2.5\fP, not \fB2,5\fP\&. Scientific notation (\fB10e5\fP) and hexadecimal (\fB0xFF\fP) are also available.
.SS Operators
.sp
\fBmath\fP knows the following operators:
.INDENT 0.0
.IP \(bu 2
\fB+\fP for addition and \fB\-\fP for subtraction.
.IP \(bu 2
\fB*\fP or \fBx\fP for multiplication, \fB/\fP for division. (Note that \fB*\fP is the glob character and needs to be quoted or escaped, \fBx\fP needs to be followed by whitespace or it looks like \fB0x\fP hexadecimal notation.)
.IP \(bu 2
\fB^\fP for exponentiation.
.IP \(bu 2
\fB%\fP for modulo.
.IP \(bu 2
\fB(\fP and \fB)\fP for grouping. (These need to be quoted or escaped because \fB()\fP denotes a command substitution.)
.UNINDENT
.sp
They are all used in an infix manner \- \fB5 + 2\fP, not \fB+ 5 2\fP\&.
.SS Constants
.sp
\fBmath\fP knows the following constants:
.INDENT 0.0
.IP \(bu 2
\fBe\fP \- Euler\(aqs number.
.IP \(bu 2
\fBpi\fP \- π. You know this one. Half of Tau.
.IP \(bu 2
\fBtau\fP\&. Equivalent to 2π, or the number of radians in a circle.
.UNINDENT
.sp
Use them without a leading \fB$\fP \- \fBpi \- 3\fP should be about 0.
.SS Functions
.sp
\fBmath\fP supports the following functions:
.INDENT 0.0
.IP \(bu 2
\fBabs\fP \- the absolute value, with positive sign
.IP \(bu 2
\fBacos\fP \- arc cosine
.IP \(bu 2
\fBasin\fP \- arc sine
.IP \(bu 2
\fBatan\fP \- arc tangent
.IP \(bu 2
\fBatan2\fP \- arc tangent of two variables
.IP \(bu 2
\fBbitand\fP, \fBbitor\fP and \fBbitxor\fP to perform bitwise operations. These will throw away any non\-integer parts and interpret the rest as an int.
.IP \(bu 2
\fBceil\fP \- round number up to nearest integer
.IP \(bu 2
\fBcos\fP \- the cosine
.IP \(bu 2
\fBcosh\fP \- hyperbolic cosine
.IP \(bu 2
\fBexp\fP \- the base\-e exponential function
.IP \(bu 2
\fBfac\fP \- factorial \- also known as \fBx!\fP (\fBx * (x \- 1) * (x \- 2) * ... * 1\fP)
.IP \(bu 2
\fBfloor\fP \- round number down to nearest integer
.IP \(bu 2
\fBln\fP \- the base\-e logarithm
.IP \(bu 2
\fBlog\fP or \fBlog10\fP \- the base\-10 logarithm
.IP \(bu 2
\fBlog2\fP \- the base\-2 logarithm
.IP \(bu 2
\fBmax\fP \- returns the larger of two numbers
.IP \(bu 2
\fBmin\fP \- returns the smaller of two numbers
.IP \(bu 2
\fBncr\fP \- "from n choose r" combination function \- how many subsets of size r can be taken from n (order doesn\(aqt matter)
.IP \(bu 2
\fBnpr\fP \- the number of subsets of size r that can be taken from a set of n elements (including different order)
.IP \(bu 2
\fBpow(x,y)\fP returns x to the y (and can be written as \fBx ^ y\fP)
.IP \(bu 2
\fBround\fP \- rounds to the nearest integer, away from 0
.IP \(bu 2
\fBsin\fP \- the sine function
.IP \(bu 2
\fBsinh\fP \- the hyperbolic sine
.IP \(bu 2
\fBsqrt\fP \- the square root \- (can also be written as \fBx ^ 0.5\fP)
.IP \(bu 2
\fBtan\fP \- the tangent
.IP \(bu 2
\fBtanh\fP \- the hyperbolic tangent
.UNINDENT
.sp
All of the trigonometric functions use radians (the pi\-based scale, not 360°).
.SS Examples
.sp
\fBmath 1+1\fP outputs 2.
.sp
\fBmath $status \- 128\fP outputs the numerical exit status of the last command minus 128.
.sp
\fBmath 10 / 6\fP outputs \fB1.666667\fP\&.
.sp
\fBmath \-s0 10.0 / 6.0\fP outputs \fB1\fP\&.
.sp
\fBmath \-s3 10 / 6\fP outputs \fB1.666\fP\&.
.sp
\fBmath "sin(pi)"\fP outputs \fB0\fP\&.
.sp
\fBmath 5 \e* 2\fP or \fBmath "5 * 2"\fP or \fBmath 5 "*" 2\fP all output \fB10\fP\&.
.sp
\fBmath 0xFF\fP outputs 255, \fBmath 0 x 3\fP outputs 0 (because it computes 0 multiplied by 3).
.sp
\fBmath bitand 0xFE, 0x2e\fP outputs 46.
.sp
\fBmath "bitor(9,2)"\fP outputs 11.
.sp
\fBmath \-\-base=hex 192\fP prints \fB0xc0\fP\&.
.sp
\fBmath \(aqncr(49,6)\(aq\fP prints 13983816 \- that\(aqs the number of possible picks in 6\-from\-49 lotto.
.SS Compatibility notes
.sp
Fish 1.x and 2.x releases relied on the \fBbc\fP command for handling \fBmath\fP expressions. Starting with fish 3.0.0 fish uses the tinyexpr library and evaluates the expression without the involvement of any external commands.
.sp
You don\(aqt need to use \fB\-\-\fP before the expression, even if it begins with a minus sign which might otherwise be interpreted as an invalid option. If you do insert \fB\-\-\fP before the expression, it will cause option scanning to stop just like for every other command and it won\(aqt be part of the expression.
.SS nextd \- move forward through directory history
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
nextd [ \-l | \-\-list ] [POS]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBnextd\fP moves forwards \fBPOS\fP positions in the history of visited directories; if the end of the history has been hit, a warning is printed.
.sp
If the \fB\-l\fP or \fB\-\-list\fP flag is specified, the current directory history is also displayed.
.sp
Note that the \fBcd\fP command limits directory history to the 25 most recently visited directories. The history is stored in the \fB$dirprev\fP and \fB$dirnext\fP variables which this command manipulates.
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
cd /usr/src
# Working directory is now /usr/src

cd /usr/src/fish\-shell
# Working directory is now /usr/src/fish\-shell

prevd
# Working directory is now /usr/src

nextd
# Working directory is now /usr/src/fish\-shell
.ft P
.fi
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
the cdh command to display a prompt to quickly navigate the history
.IP \(bu 2
the dirh command to print the directory history
.IP \(bu 2
the prevd command to move backward
.UNINDENT
.SS not \- negate the exit status of a job
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
not COMMAND [OPTIONS...]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBnot\fP negates the exit status of another command. If the exit status is zero, \fBnot\fP returns 1. Otherwise, \fBnot\fP returns 0.
.SS Example
.sp
The following code reports an error and exits if no file named spoon can be found.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
if not test \-f spoon
    echo There is no spoon
    exit 1
end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS open \- open file in its default application
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
open FILES...
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBopen\fP opens a file in its default application, using the appropriate tool for the operating system. On GNU/Linux, this requires the common but optional \fBxdg\-open\fP utility, from the \fBxdg\-utils\fP package.
.sp
Note that this function will not be used if a command by this name exists (which is the case on macOS or Haiku).
.SS Example
.sp
\fBopen *.txt\fP opens all the text files in the current directory using your system\(aqs default text editor.
.SS or \- conditionally execute a command
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
COMMAND1; or COMMAND2
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBor\fP is used to execute a command if the previous command was not successful (returned a status of something other than 0).
.sp
\fBor\fP statements may be used as part of the condition in an and or while block.
.sp
\fBor\fP does not change the current exit status itself, but the command it runs most likely will. The exit status of the last foreground command to exit can always be accessed using the $status variable.
.SS Example
.sp
The following code runs the \fBmake\fP command to build a program. If the build succeeds, the program is installed. If either step fails, \fBmake clean\fP is run, which removes the files created by the build process.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
make; and make install; or make clean
.ft P
.fi
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
and command
.UNINDENT
.SS popd \- move through directory stack
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
popd
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBpopd\fP removes the top directory from the directory stack and changes the working directory to the new top directory. Use pushd to add directories to the stack.
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
pushd /usr/src
# Working directory is now /usr/src
# Directory stack contains /usr/src

pushd /usr/src/fish\-shell
# Working directory is now /usr/src/fish\-shell
# Directory stack contains /usr/src /usr/src/fish\-shell

popd
# Working directory is now /usr/src
# Directory stack contains /usr/src
.ft P
.fi
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
the dirs command to print the directory stack
.IP \(bu 2
the cdh command which provides a more intuitive way to navigate to recently visited directories.
.UNINDENT
.SS prevd \- move backward through directory history
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
prevd [ \-l | \-\-list ] [POS]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBprevd\fP moves backwards \fBPOS\fP positions in the history of visited directories; if the beginning of the history has been hit, a warning is printed.
.sp
If the \fB\-l\fP or \fB\-\-list\fP flag is specified, the current history is also displayed.
.sp
Note that the \fBcd\fP command limits directory history to the 25 most recently visited directories. The history is stored in the \fB$dirprev\fP and \fB$dirnext\fP variables which this command manipulates.
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
cd /usr/src
# Working directory is now /usr/src

cd /usr/src/fish\-shell
# Working directory is now /usr/src/fish\-shell

prevd
# Working directory is now /usr/src

nextd
# Working directory is now /usr/src/fish\-shell
.ft P
.fi
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
the cdh command to display a prompt to quickly navigate the history
.IP \(bu 2
the dirh command to print the directory history
.IP \(bu 2
the nextd command to move forward
.UNINDENT
.SS printf \- display text according to a format string
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
printf FORMAT [ARGUMENT ...]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
printf uses the format string FORMAT to print the ARGUMENT arguments. This means that it takes format specifiers in the format string and replaces each with an argument.
.sp
The \fBformat\fP argument is re\-used as many times as necessary to convert all of the given arguments. So \fBprintf %s\en flounder catfish clownfish shark\fP will print four lines.
.sp
Unlike echo, \fBprintf\fP does not append a new line unless it is specified as part of the string.
.sp
It doesn\(aqt support any options, so there is no need for a \fB\-\-\fP separator, which makes it easier to use for arbitrary input than \fBecho\fP\&. [1]
.SS Format Specifiers
.sp
Valid format specifiers are taken from the C library function \fBprintf(3)\fP:
.INDENT 0.0
.IP \(bu 2
\fB%d\fP or \fB%i\fP: Argument will be used as decimal integer (signed or unsigned)
.IP \(bu 2
\fB%o\fP: An octal unsigned integer
.IP \(bu 2
\fB%u\fP: An unsigned decimal integer \- this means negative numbers will wrap around
.IP \(bu 2
\fB%x\fP or \fB%X\fP: An unsigned hexadecimal integer
.IP \(bu 2
\fB%f\fP, \fB%g\fP or \fB%G\fP: A floating\-point number. \fB%f\fP defaults to 6 places after the decimal point (which is locale\-dependent \- e.g. in de_DE it will be a \fB,\fP). \fB%g\fP and \fB%G\fP will trim trailing zeroes and switch to scientific notation (like \fB%e\fP) if the numbers get small or large enough.
.IP \(bu 2
\fB%e\fP or \fB%E\fP: A floating\-point number in scientific (XXXeYY) notation
.IP \(bu 2
\fB%s\fP: A string
.IP \(bu 2
\fB%b\fP: As a string, interpreting backslash escapes, except that octal escapes are of the form 0 or 0ooo.
.UNINDENT
.sp
\fB%%\fP signifies a literal "%".
.sp
Conversion can fail, e.g. "102.234" can\(aqt losslessly convert to an integer, causing printf to print an error. If you are okay with losing information, silence errors with \fB2>/dev/null\fP\&.
.sp
A number between the \fB%\fP and the format letter specifies the width. The result will be left\-padded with spaces.
.SS Backslash Escapes
.sp
printf also knows a number of backslash escapes:
.INDENT 0.0
.IP \(bu 2
\fB\e"\fP double quote
.IP \(bu 2
\fB\e\e\fP backslash
.IP \(bu 2
\fB\ea\fP alert (bell)
.IP \(bu 2
\fB\eb\fP backspace
.IP \(bu 2
\fB\ec\fP produce no further output
.IP \(bu 2
\fB\ee\fP escape
.IP \(bu 2
\fB\ef\fP form feed
.IP \(bu 2
\fB\en\fP new line
.IP \(bu 2
\fB\er\fP carriage return
.IP \(bu 2
\fB\et\fP horizontal tab
.IP \(bu 2
\fB\ev\fP vertical tab
.IP \(bu 2
\fB\eooo\fP octal number (ooo is 1 to 3 digits)
.IP \(bu 2
\fB\exhh\fP hexadecimal number (hhh is 1 to 2 digits)
.IP \(bu 2
\fB\euhhhh\fP 16\-bit Unicode character (hhhh is 4 digits)
.IP \(bu 2
\fB\eUhhhhhhhh\fP 32\-bit Unicode character (hhhhhhhh is 8 digits)
.UNINDENT
.SS Errors and Return Status
.sp
If the given argument doesn\(aqt work for the given format (like when you try to convert a number like 3.141592 to an integer), printf prints an error, to stderr. printf will then also return non\-zero, but will still try to print as much as it can.
.sp
It will also return non\-zero if no argument at all was given, in which case it will print nothing.
.sp
This printf has been imported from the printf in GNU Coreutils version 6.9. If you would like to use a newer version of printf, for example the one shipped with your OS, try \fBcommand printf\fP\&.
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
printf \(aq%s\et%s\en\(aq flounder fish
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Will print "flounder    fish" (separated with a tab character), followed by a newline character. This is useful for writing completions, as fish expects completion scripts to output the option followed by the description, separated with a tab character.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
printf \(aq%s: %d\(aq "Number of bananas in my pocket" 42
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Will print "Number of bananas in my pocket: 42", \fIwithout\fP a newline.
.SS See Also
.INDENT 0.0
.IP \(bu 2
the echo command, for simpler output
.UNINDENT
.SS Footnotes
.IP [1] 5
(in fact while fish\(aqs \fBecho\fP supports \fB\-\-\fP, POSIX forbids it, so other implementations can\(aqt be used if the input contains anything starting with \fB\-\fP)
.SS prompt_login \- describe the login suitable for prompt
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function fish_prompt
    echo \-n (prompt_login) (prompt_pwd) \(aq$ \(aq
end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBprompt_login\fP is a function to describe the current login. It will show the user, the host and also whether the shell is running in a chroot (currently debian\(aqs debian_chroot is supported).
.SS Examples
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>_ prompt_login
root@bananablaster
.ft P
.fi
.UNINDENT
.UNINDENT
.SS prompt_pwd \- print pwd suitable for prompt
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function fish_prompt
    echo \-n (prompt_pwd) \(aq$ \(aq
end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBprompt_pwd\fP is a function to print the current working directory in a way suitable for prompts. It will replace the home directory with "~" and shorten every path component but the last to a default of one character.
.sp
To change the number of characters per path component, set \fB$fish_prompt_pwd_dir_length\fP to the number of characters. Setting it to 0 or an invalid value will disable shortening entirely.
.SS Examples
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>_ cd ~/
>_ echo $PWD
/home/alfa

>_ prompt_pwd
~

>_ cd /tmp/banana/sausage/with/mustard
>_ prompt_pwd
/t/b/s/w/mustard

>_ set \-g fish_prompt_pwd_dir_length 3
>_ prompt_pwd
/tmp/ban/sau/wit/mustard
.ft P
.fi
.UNINDENT
.UNINDENT
.SS psub \- perform process substitution
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
COMMAND1 ( COMMAND2 | psub [\-F | \-\-fifo] [\-f | \-\-file] [\-s SUFFIX])
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
Some shells (e.g., ksh, bash) feature a syntax that is a mix between command substitution and piping, called process substitution. It is used to send the output of a command into the calling command, much like command substitution, but with the difference that the output is not sent through commandline arguments but through a named pipe, with the filename of the named pipe sent as an argument to the calling program. \fBpsub\fP combined with a regular command substitution provides the same functionality.
.sp
The following options are available:
.INDENT 0.0
.IP \(bu 2
\fB\-f\fP or \fB\-\-file\fP will cause psub to use a regular file instead of a named pipe to communicate with the calling process. This will cause \fBpsub\fP to be significantly slower when large amounts of data are involved, but has the advantage that the reading process can seek in the stream. This is the default.
.IP \(bu 2
\fB\-F\fP or \fB\-\-fifo\fP will cause psub to use a named pipe rather than a file. You should only use this if the command produces no more than 8 KiB of output. The limit on the amount of data a FIFO can buffer varies with the OS but is typically 8 KiB, 16 KiB or 64 KiB. If you use this option and the command on the left of the psub pipeline produces more output a deadlock is likely to occur.
.IP \(bu 2
\fB\-s\fP or \fB\-\-suffix\fP will append SUFFIX to the filename.
.UNINDENT
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
diff (sort a.txt | psub) (sort b.txt | psub)
# shows the difference between the sorted versions of files \(ga\(gaa.txt\(ga\(ga and \(ga\(gab.txt\(ga\(ga.

source\-highlight \-f esc (cpp main.c | psub \-f \-s .c)
# highlights \(ga\(gamain.c\(ga\(ga after preprocessing as a C source.
.ft P
.fi
.UNINDENT
.UNINDENT
.SS pushd \- push directory to directory stack
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
pushd [DIRECTORY]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
The \fBpushd\fP function adds \fBDIRECTORY\fP to the top of the directory stack and makes it the current working directory. popd will pop it off and return to the original directory.
.sp
Without arguments, it exchanges the top two directories in the stack.
.sp
\fBpushd +NUMBER\fP rotates the stack counter\-clockwise i.e. from bottom to top
.sp
\fBpushd \-NUMBER\fP rotates clockwise i.e. top to bottom.
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
cd ~/dir1
pushd ~/dir2
pushd ~/dir3
# Working directory is now ~/dir3
# Directory stack contains ~/dir2 ~/dir1

pushd /tmp
# Working directory is now /tmp
# Directory stack contains ~/dir3 ~/dir2 ~/dir1

pushd +1
# Working directory is now ~/dir3
# Directory stack contains ~/dir2 ~/dir1 /tmp

popd
# Working directory is now ~/dir2
# Directory stack contains ~/dir1 /tmp
.ft P
.fi
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
the dirs command to print the directory stack
.IP \(bu 2
the cdh command which provides a more intuitive way to navigate to recently visited directories.
.UNINDENT
.SS pwd \- output the current working directory
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
pwd [(\-P | \-\-physical)] [(\-L | \-\-logical)]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBpwd\fP outputs (prints) the current working directory.
.sp
The following options are available:
.INDENT 0.0
.IP \(bu 2
\fB\-L\fP or \fB\-\-logical\fP Output the logical working directory, without resolving symlinks (default behavior).
.IP \(bu 2
\fB\-P\fP or \fB\-\-physical\fP Output the physical working directory, with symlinks resolved.
.UNINDENT
.SS See Also
.sp
Navigate directories using the directory history or the directory stack
.SS random \- generate random number
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
random
random SEED
random START END
random START STEP END
random choice [ITEMS...]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBrandom\fP generates a pseudo\-random integer from a uniform distribution. The
range (inclusive) depends on the arguments.
No arguments indicate a range of 0 to 32767 (inclusive).
.sp
If one argument is specified, the internal engine will be seeded with the
argument for future invocations of \fBrandom\fP and no output will be produced.
.sp
Two arguments indicate a range from START to END (both START and END included).
.sp
Three arguments indicate a range from START to END with a spacing of STEP
between possible outputs.
\fBrandom choice\fP will select one random item from the succeeding arguments.
.sp
Note that seeding the engine will NOT give the same result across different
systems.
.sp
You should not consider \fBrandom\fP cryptographically secure, or even
statistically accurate.
.SS Example
.sp
The following code will count down from a random even number between 10 and 20 to 1:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
for i in (seq (random 10 2 20) \-1 1)
    echo $i
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
And this will open a random picture from any of the subdirectories:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
open (random choice **.jpg)
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Or, to only get even numbers from 2 to 20:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
random 2 2 20
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Or odd numbers from 1 to 3:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
random 1 2 3 # or 1 2 4
.ft P
.fi
.UNINDENT
.UNINDENT
.SS read \- read line of input into variables
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
read [OPTIONS] [VARIABLE ...]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBread\fP reads from standard input and either writes the result back to standard output (for use in command substitution), or stores the result in one or more shell variables. By default, \fBread\fP reads a single line and splits it into variables on spaces or tabs. Alternatively, a null character or a maximum number of characters can be used to terminate the input, and other delimiters can be given. Unlike other shells, there is no default variable (such as \fBREPLY\fP) for storing the result \- instead, it is printed on standard output.
.sp
The following options are available:
.INDENT 0.0
.IP \(bu 2
\fB\-c CMD\fP or \fB\-\-command=CMD\fP sets the initial string in the interactive mode command buffer to \fBCMD\fP\&.
.IP \(bu 2
\fB\-d DELIMITER\fP or \fB\-\-delimiter=DELIMITER\fP splits on DELIMITER. DELIMITER will be used as an entire string to split on, not a set of characters.
.IP \(bu 2
\fB\-g\fP or \fB\-\-global\fP makes the variables global.
.IP \(bu 2
\fB\-s\fP or \fB\-\-silent\fP masks characters written to the terminal, replacing them with asterisks. This is useful for reading things like passwords or other sensitive information.
.IP \(bu 2
\fB\-l\fP or \fB\-\-local\fP makes the variables local.
.IP \(bu 2
\fB\-n NCHARS\fP or \fB\-\-nchars=NCHARS\fP makes \fBread\fP return after reading NCHARS characters or the end of
the line, whichever comes first.
.IP \(bu 2
\fB\-p PROMPT_CMD\fP or \fB\-\-prompt=PROMPT_CMD\fP uses the output of the shell command \fBPROMPT_CMD\fP as the prompt for the interactive mode. The default prompt command is \fBset_color green; echo read; set_color normal; echo "> "\fP
.IP \(bu 2
\fB\-P PROMPT_STR\fP or \fB\-\-prompt\-str=PROMPT_STR\fP uses the string as the prompt for the interactive mode. It is equivalent to \fBecho PROMPT_STR\fP and is provided solely to avoid the need to frame the prompt as a command. All special characters in the string are automatically escaped before being passed to the echo command.
.IP \(bu 2
\fB\-R RIGHT_PROMPT_CMD\fP or \fB\-\-right\-prompt=RIGHT_PROMPT_CMD\fP uses the output of the shell command \fBRIGHT_PROMPT_CMD\fP as the right prompt for the interactive mode. There is no default right prompt command.
.IP \(bu 2
\fB\-S\fP or \fB\-\-shell\fP enables syntax highlighting, tab completions and command termination suitable for entering shellscript code in the interactive mode. NOTE: Prior to fish 3.0, the short opt for \fB\-\-shell\fP was \fB\-s\fP, but it has been changed for compatibility with bash\(aqs \fB\-s\fP short opt for \fB\-\-silent\fP\&.
.IP \(bu 2
\fB\-t\fP \-or \fB\-\-tokenize\fP causes read to split the input into variables by the shell\(aqs tokenization rules. This means it will honor quotes and escaping. This option is of course incompatible with other options to control splitting like \fB\-\-delimiter\fP and does not honor $IFS (like fish\(aqs tokenizer). It saves the tokens in the manner they\(aqd be passed to commands on the commandline, so e.g. \fBa\e b\fP is stored as \fBa b\fP\&. Note that currently it leaves command substitutions intact along with the parentheses.
.IP \(bu 2
\fB\-u\fP or \fB\-\-unexport\fP prevents the variables from being exported to child processes (default behaviour).
.IP \(bu 2
\fB\-U\fP or \fB\-\-universal\fP causes the specified shell variable to be made universal.
.IP \(bu 2
\fB\-x\fP or \fB\-\-export\fP exports the variables to child processes.
.IP \(bu 2
\fB\-a\fP or \fB\-\-list\fP stores the result as a list in a single variable. This option is also available as \fB\-\-array\fP for backwards compatibility.
.IP \(bu 2
\fB\-z\fP or \fB\-\-null\fP marks the end of the line with the NUL character, instead of newline. This also disables interactive mode.
.IP \(bu 2
\fB\-L\fP or \fB\-\-line\fP reads each line into successive variables, and stops after each variable has been filled. This cannot be combined with the \fB\-\-delimiter\fP option.
.UNINDENT
.sp
Without the \fB\-\-line\fP option, \fBread\fP reads a single line of input from standard input, breaks it into tokens, and then assigns one token to each variable specified in \fBVARIABLES\fP\&. If there are more tokens than variables, the complete remainder is assigned to the last variable.
.sp
If no option to determine how to split like \fB\-\-delimiter\fP, \fB\-\-line\fP or \fB\-\-tokenize\fP is given, the variable \fBIFS\fP is used as a list of characters to split on. Relying on the use of \fBIFS\fP is deprecated and this behaviour will be removed in future versions. The default value of \fBIFS\fP contains space, tab and newline characters. As a special case, if \fBIFS\fP is set to the empty string, each character of the input is considered a separate token.
.sp
With the \fB\-\-line\fP option, \fBread\fP reads a line of input from standard input into each provided variable, stopping when each variable has been filled. The line is not tokenized.
.sp
If no variable names are provided, \fBread\fP enters a special case that simply provides redirection from standard input to standard output, useful for command substitution. For instance, the fish shell command below can be used to read data that should be provided via a command line argument from the console instead of hardcoding it in the command itself, allowing the command to both be reused as\-is in various contexts with different input values and preventing possibly sensitive text from being included in the shell history:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
mysql \-uuser \-p(read)
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
When running in this mode, \fBread\fP does not split the input in any way and text is redirected to standard output without any further processing or manipulation.
.sp
If \fB\-a\fP or \fB\-\-array\fP is provided, only one variable name is allowed and the tokens are stored as a list in this variable.
.sp
See the documentation for \fBset\fP for more details on the scoping rules for variables.
.sp
When \fBread\fP reaches the end\-of\-file (EOF) instead of the terminator, the exit status is set to 1.
Otherwise, it is set to 0.
.sp
In order to protect the shell from consuming too many system resources, \fBread\fP will only consume a
maximum of 100 MiB (104857600 bytes); if the terminator is not reached before this limit then VARIABLE
is set to empty and the exit status is set to 122. This limit can be altered with the
\fBfish_read_limit\fP variable. If set to 0 (zero), the limit is removed.
.SS Example
.sp
The following code stores the value \(aqhello\(aq in the shell variable \fB$foo\fP\&.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
echo hello|read foo

# This is a neat way to handle command output by\-line:
printf \(aq%s\en\(aq line1 line2 line3 line4 | while read \-l foo
                  echo "This is another line: $foo"
              end

# Delimiters given via "\-d" are taken as one string
echo a==b==c | read \-d == \-l a b c
echo $a # a
echo $b # b
echo $c # c

# \-\-tokenize honors quotes and escaping like the shell\(aqs argument passing:
echo \(aqa\e b\(aq | read \-t first second
echo $first # outputs "a b", $second is empty

echo \(aqa"foo bar"b (command echo wurst)*" "{a,b}\(aq | read \-lt \-l a b c
echo $a # outputs \(aqafoo bar\(aq (without the quotes)
echo $b # outputs \(aq(command echo wurst)* {a,b}\(aq (without the quotes)
echo $c # nothing
.ft P
.fi
.UNINDENT
.UNINDENT
.SS realpath \- convert a path to an absolute path without symlinks
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
realpath PATH
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBrealpath\fP resolves a path to its absolute path.
.sp
fish provides a \fBrealpath\fP builtin as a fallback for systems where there is no \fBrealpath\fP command, your OS might provide a version with more features.
.sp
If a \fBrealpath\fP command exists, it will be preferred, so if you want to use the builtin you should use \fBbuiltin realpath\fP explicitly.
.sp
The following options are available:
.INDENT 0.0
.IP \(bu 2
\fB\-s\fP or \fB\-\-no\-symlinks\fP: Don\(aqt resolve symlinks, only make paths absolute, squash multiple slashes and remove trailing slashes.
.UNINDENT
.SS return \- stop the current inner function
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function NAME; [COMMANDS...;] return [STATUS]; [COMMANDS...;] end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBreturn\fP halts a currently running function. The exit status is set to \fBSTATUS\fP if it is given.
.sp
It is usually added inside of a conditional block such as an if statement or a switch statement to conditionally stop the executing function and return to the caller, but it can also be used to specify the exit status of a function.
.SS Example
.sp
The following code is an implementation of the false command as a fish function
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function false
    return 1
end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS set \- display and change shell variables
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
set [SCOPE_OPTIONS]
set [OPTIONS] VARIABLE_NAME VALUES...
set [OPTIONS] VARIABLE_NAME[INDICES]... VALUES...
set ( \-q | \-\-query ) [SCOPE_OPTIONS] VARIABLE_NAMES...
set ( \-e | \-\-erase ) [SCOPE_OPTIONS] VARIABLE_NAME...
set ( \-e | \-\-erase ) [SCOPE_OPTIONS] VARIABLE_NAME[INDICES]...
set ( \-S | \-\-show ) [VARIABLE_NAME]...
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBset\fP manipulates shell variables\&.
.sp
If both a variable name and values are provided, \fBset\fP assigns the values to the variable of that name. Because all variables in fish are lists, multiple values are allowed.
.sp
If only a variable name has been given, \fBset\fP sets the variable to the empty list.
.sp
If \fBset\fP is called with no arguments, it prints the names and values of all shell variables in sorted order. Passing scope or export flags allows filtering this to only matching variables, so \fBset \-\-local\fP would only show local variables.
.sp
With \fB\-\-erase\fP and optionally a scope flag \fBset\fP will erase the matching variable (or the variable of that name in the smallest possible scope).
.sp
With \fB\-\-show\fP, \fBset\fP will describe the given variable names, explaining how they have been defined \- in which scope with which values and options.
.sp
The following options control variable scope:
.INDENT 0.0
.IP \(bu 2
\fB\-l\fP or \fB\-\-local\fP forces the specified shell variable to be given a scope that is local to the current block, even if a variable with the given name exists and is non\-local
.IP \(bu 2
\fB\-g\fP or \fB\-\-global\fP causes the specified shell variable to be given a global scope. Non\-global variables disappear when the block they belong to ends
.IP \(bu 2
\fB\-U\fP or \fB\-\-universal\fP causes the specified shell variable to be given a universal scope. If this option is supplied, the variable will be shared between all the current user\(aqs fish instances on the current computer, and will be preserved across restarts of the shell.
.UNINDENT
.sp
These options control additional variable options:
.INDENT 0.0
.IP \(bu 2
\fB\-x\fP or \fB\-\-export\fP causes the specified shell variable to be exported to child processes (making it an "environment variable")
.IP \(bu 2
\fB\-u\fP or \fB\-\-unexport\fP causes the specified shell variable to NOT be exported to child processes
.IP \(bu 2
\fB\-\-path\fP causes the specified variable to be treated as a path variable, meaning it will automatically be split on colons,  and joined using colons when quoted (\fBecho "$PATH"\fP) or exported.
.IP \(bu 2
\fB\-\-unpath\fP causes the specified variable to not be treated as a path variable. Variables with a name ending in "PATH" are automatically path variables, so this can be used to treat such a variable normally.
.UNINDENT
.sp
The following other options are available:
.INDENT 0.0
.IP \(bu 2
\fB\-a\fP or \fB\-\-append\fP causes the values to be appended to the current set of values for the variable. This can be used with \fB\-\-prepend\fP to both append and prepend at the same time. This cannot be used when assigning to a variable slice.
.IP \(bu 2
\fB\-p\fP or \fB\-\-prepend\fP causes the values to be prepended to the current set of values for the variable. This can be used with \fB\-\-append\fP to both append and prepend at the same time. This cannot be used when assigning to a variable slice.
.IP \(bu 2
\fB\-e\fP or \fB\-\-erase\fP causes the specified shell variables to be erased
.IP \(bu 2
\fB\-q\fP or \fB\-\-query\fP test if the specified variable names are defined. Does not output anything, but the builtins exit status is the number of variables specified that were not defined, or 255 if more than 255 variables are not defined.
.IP \(bu 2
\fB\-n\fP or \fB\-\-names\fP: List only the names of all defined variables, not their value. The names are guaranteed to be sorted.
.IP \(bu 2
\fB\-S\fP or \fB\-\-show\fP shows information about the given variables. If no variable names are given then all variables are shown in sorted order. It shows the scopes the given variables are set in, along with the values in each and whether or not it is exported. No other flags can be used with this option.
.IP \(bu 2
\fB\-L\fP or \fB\-\-long\fP do not abbreviate long values when printing set variables
.UNINDENT
.sp
If a variable is set to more than one value, the variable will be a list with the specified elements. If a variable is set to zero elements, it will become a list with zero elements.
.sp
If the variable name is one or more list elements, such as \fBPATH[1 3 7]\fP, only those list elements specified will be changed. If you specify a negative index when expanding or assigning to a list variable, the index will be calculated from the end of the list. For example, the index \-1 means the last index of a list.
.sp
The scoping rules when creating or updating a variable are:
.INDENT 0.0
.IP \(bu 2
Variables may be explicitly set to universal, global or local. Variables with the same name in different scopes will not be changed.
.IP \(bu 2
If a variable is not explicitly set to be either universal, global or local, but has been previously defined, the previous variable scope is used.
.IP \(bu 2
If a variable is not explicitly set to be either universal, global or local and has never before been defined, the variable will be local to the currently executing function. Note that this is different from using the \fB\-l\fP or \fB\-\-local\fP flag. If one of those flags is used, the variable will be local to the most inner currently executing block, while without these the variable will be local to the function. If no function is executing, the variable will be global.
.UNINDENT
.sp
The exporting rules when creating or updating a variable are identical to the scoping rules for variables:
.INDENT 0.0
.IP \(bu 2
Variables may be explicitly set to either exported or not exported. When an exported variable goes out of scope, it is unexported.
.IP \(bu 2
If a variable is not explicitly set to be exported or not exported, but has been previously defined, the previous exporting rule for the variable is kept.
.IP \(bu 2
If a variable is not explicitly set to be either exported or unexported and has never before been defined, the variable will not be exported.
.UNINDENT
.sp
In query mode, the scope to be examined can be specified.
.sp
In erase mode, if variable indices are specified, only the specified slices of the list variable will be erased.
.sp
\fBset\fP requires all options to come before any other arguments. For example, \fBset flags \-l\fP will have the effect of setting the value of the variable \fBflags\fP to \(aq\-l\(aq, not making the variable local.
.SS Exit status
.sp
In assignment mode, \fBset\fP does not modify the exit status, but passes along whatever $status was set, including by command substitutions. This allows capturing the output and exit status of a subcommand, like in \fBif set output (command)\fP\&.
.sp
In query mode, the exit status is the number of variables that were not found.
.sp
In erase mode, \fBset\fP exits with a zero exit status in case of success, with a non\-zero exit status if the commandline was invalid, if any of the variables did not exist or was a special read\-only variable\&.
.SS Examples
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# Prints all global, exported variables.
set \-xg

# Sets the value of the variable $foo to be \(aqhi\(aq.
set foo hi

# Appends the value "there" to the variable $foo.
set \-a foo there

# Does the same thing as the previous two commands the way it would be done pre\-fish 3.0.
set foo hi
set foo $foo there

# Removes the variable $smurf
set \-e smurf

# Changes the fourth element of the $PATH list to ~/bin
set PATH[4] ~/bin

# Outputs the path to Python if \(ga\(gatype \-p\(ga\(ga returns true.
if set python_path (type \-p python)
    echo "Python is at $python_path"
end

# Setting a variable doesn\(aqt modify $status!
false
set foo bar
echo $status # prints 1, because of the "false" above.

true
set foo banana (false)
echo $status # prints 1, because of the "(false)" above.

# Like other shells, pass a variable to just one command:
# Run fish with a temporary home directory.
HOME=(mktemp \-d) fish
# Which is essentially the same as:
begin; set \-lx HOME (mktemp \-d); fish; end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Notes
.sp
Fish versions prior to 3.0 supported the syntax \fBset PATH[1] PATH[4] /bin /sbin\fP, which worked like
\fBset PATH[1 4] /bin /sbin\fP\&. This syntax was not widely used, and was ambiguous and inconsistent.
.SS set_color \- set the terminal color
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
set_color [OPTIONS] VALUE
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBset_color\fP is used to control the color and styling of text in the terminal. \fBVALUE\fP describes that styling. It\(aqs a reserved color name like \fIred\fP or a RGB color value given as 3 or 6 hexadecimal digits ("F27" or "FF2277"). A special keyword \fInormal\fP resets text formatting to terminal defaults.
.sp
Valid colors include:
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
\fIblack\fP, \fIred\fP, \fIgreen\fP, \fIyellow\fP, \fIblue\fP, \fImagenta\fP, \fIcyan\fP, \fIwhite\fP
.IP \(bu 2
\fIbrblack\fP, \fIbrred\fP, \fIbrgreen\fP, \fIbryellow\fP, \fIbrblue\fP, \fIbrmagenta\fP, \fIbrcyan\fP, \fIbrwhite\fP
.UNINDENT
.UNINDENT
.UNINDENT
.sp
The \fIbr\fP\- (as in \(aqbright\(aq) forms are full\-brightness variants of the 8 standard\-brightness colors on many terminals. \fIbrblack\fP has higher brightness than \fIblack\fP \- towards gray.
.sp
An RGB value with three or six hex digits, such as A0FF33 or f2f can be used. \fBfish\fP will choose the closest supported color. A three digit value is equivalent to specifying each digit twice; e.g., \fBset_color 2BC\fP is the same as \fBset_color 22BBCC\fP\&. Hexadecimal RGB values can be in lower or uppercase. Depending on the capabilities of your terminal (and the level of support \fBset_color\fP has for it) the actual color may be approximated by a nearby matching reserved color name or \fBset_color\fP may not have an effect on color.
.sp
A second color may be given as a desired fallback color. e.g. \fBset_color 124212 brblue\fP will instruct set_color to use \fIbrblue\fP if a terminal is not capable of the exact shade of grey desired. This is very useful when an 8 or 16 color terminal might otherwise not use a color.
.sp
The following options are available:
.INDENT 0.0
.IP \(bu 2
\fB\-b\fP, \fB\-\-background\fP \fICOLOR\fP sets the background color.
.IP \(bu 2
\fB\-c\fP, \fB\-\-print\-colors\fP prints a list of the 16 named colors.
.IP \(bu 2
\fB\-o\fP, \fB\-\-bold\fP sets bold mode.
.IP \(bu 2
\fB\-d\fP, \fB\-\-dim\fP sets dim mode.
.IP \(bu 2
\fB\-i\fP, \fB\-\-italics\fP sets italics mode.
.IP \(bu 2
\fB\-r\fP, \fB\-\-reverse\fP sets reverse mode.
.IP \(bu 2
\fB\-u\fP, \fB\-\-underline\fP sets underlined mode.
.UNINDENT
.sp
Using the \fInormal\fP keyword will reset foreground, background, and all formatting back to default.
.SS Notes
.INDENT 0.0
.IP 1. 3
Using the \fInormal\fP keyword will reset both background and foreground colors to whatever is the default for the terminal.
.IP 2. 3
Setting the background color only affects subsequently written characters. Fish provides no way to set the background color for the entire terminal window. Configuring the window background color (and other attributes such as its opacity) has to be done using whatever mechanisms the terminal provides. Look for a config option.
.IP 3. 3
Some terminals use the \fB\-\-bold\fP escape sequence to switch to a brighter color set rather than increasing the weight of text.
.IP 4. 3
\fBset_color\fP works by printing sequences of characters to \fIstdout\fP\&. If used in command substitution or a pipe, these characters will also be captured. This may or may not be desirable. Checking the exit status of \fBisatty stdout\fP before using \fBset_color\fP can be useful to decide not to colorize output in a script.
.UNINDENT
.SS Examples
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
set_color red; echo "Roses are red"
set_color blue; echo "Violets are blue"
set_color 62A; echo "Eggplants are dark purple"
set_color normal; echo "Normal is nice" # Resets the background too
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Terminal Capability Detection
.sp
Fish uses some heuristics to determine what colors a terminal supports to avoid sending sequences that it won\(aqt understand.
.sp
In particular it will:
.INDENT 0.0
.IP \(bu 2
Enable 256 colors if $TERM contains "xterm", except for known exceptions (like MacOS 10.6 Terminal.app)
.IP \(bu 2
Enable 24\-bit ("true\-color") even if the $TERM entry only reports 256 colors. This includes modern xterm, VTE\-based terminals like Gnome Terminal, Konsole and iTerm2.
.IP \(bu 2
Detect support for italics, dim, reverse and other modes.
.UNINDENT
.sp
If terminfo reports 256 color support for a terminal, 256 color support will always be enabled.
.sp
To force true\-color support on or off, set $fish_term24bit to "1" for on and 0 for off \- \fBset \-g fish_term24bit 1\fP\&.
.sp
To debug color palette problems, \fBtput colors\fP may be useful to see the number of colors in terminfo for a terminal. Fish launched as \fBfish \-d2\fP will include diagnostic messages that indicate the color support mode in use.
.sp
The \fBset_color\fP command uses the terminfo database to look up how to change terminal colors on whatever terminal is in use. Some systems have old and incomplete terminfo databases, and lack color information for terminals that support it. Fish assumes that all terminals can use the [ANSI X3.64](\fI\%https://en.wikipedia.org/wiki/ANSI_escape_code\fP) escape sequences if the terminfo definition indicates a color below 16 is not supported.
.SS source \- evaluate contents of file
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
source FILENAME [ARGUMENTS...]
somecommand | source
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBsource\fP evaluates the commands of the specified file in the current shell as a new block of code. This is different from starting a new process to perform the commands (i.e. \fBfish < FILENAME\fP) since the commands will be evaluated by the current shell, which means that changes in shell variables will affect the current shell. If additional arguments are specified after the file name, they will be inserted into the \fB$argv\fP variable. The \fB$argv\fP variable will not include the name of the sourced file.
.sp
fish will search the working directory to resolve relative paths but will not search \fB$PATH\fP\&.
.sp
If no file is specified and stdin is not the terminal, or if the file name \fB\-\fP is used, stdin will be read.
.sp
The exit status of \fBsource\fP is the exit status of the last job to execute. If something goes wrong while opening or reading the file, \fBsource\fP exits with a non\-zero status.
.sp
\fB\&.\fP (a single period) is an alias for the \fBsource\fP command. The use of \fB\&.\fP is deprecated in favour of \fBsource\fP, and \fB\&.\fP will be removed in a future version of fish.
.sp
\fBsource\fP creates a new local scope; \fBset \-\-local\fP within a sourced block will not affect variables in the enclosing scope.
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
source ~/.config/fish/config.fish
# Causes fish to re\-read its initialization file.
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Caveats
.sp
In fish versions prior to 2.3.0, the \fB$argv\fP variable would have a single element (the name of the sourced file) if no arguments are present. Otherwise, it would contain arguments without the name of the sourced file. That behavior was very confusing and unlike other shells such as bash and zsh.
.SS status \- query fish runtime information
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
status
status is\-login
status is\-interactive
status is\-block
status is\-breakpoint
status is\-command\-substitution
status is\-no\-job\-control
status is\-full\-job\-control
status is\-interactive\-job\-control
status current\-command
status filename
status basename
status dirname
status fish\-path
status function
status line\-number
status stack\-trace
status job\-control CONTROL_TYPE
status features
status test\-feature FEATURE
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
With no arguments, \fBstatus\fP displays a summary of the current login and job control status of the shell.
.sp
The following operations (sub\-commands) are available:
.INDENT 0.0
.IP \(bu 2
\fBis\-command\-substitution\fP returns 0 if fish is currently executing a command substitution. Also \fB\-c\fP or \fB\-\-is\-command\-substitution\fP\&.
.IP \(bu 2
\fBis\-block\fP returns 0 if fish is currently executing a block of code. Also \fB\-b\fP or \fB\-\-is\-block\fP\&.
.IP \(bu 2
\fBis\-breakpoint\fP returns 0 if fish is currently showing a prompt in the context of a \fBbreakpoint\fP command. See also the \fBfish_breakpoint_prompt\fP function.
.IP \(bu 2
\fBis\-interactive\fP returns 0 if fish is interactive \- that is, connected to a keyboard. Also \fB\-i\fP or \fB\-\-is\-interactive\fP\&.
.IP \(bu 2
\fBis\-login\fP returns 0 if fish is a login shell \- that is, if fish should perform login tasks such as setting up the PATH. Also \fB\-l\fP or \fB\-\-is\-login\fP\&.
.IP \(bu 2
\fBis\-full\-job\-control\fP returns 0 if full job control is enabled. Also \fB\-\-is\-full\-job\-control\fP (no short flag).
.IP \(bu 2
\fBis\-interactive\-job\-control\fP returns 0 if interactive job control is enabled. Also, \fB\-\-is\-interactive\-job\-control\fP (no short flag).
.IP \(bu 2
\fBis\-no\-job\-control\fP returns 0 if no job control is enabled. Also \fB\-\-is\-no\-job\-control\fP (no short flag).
.IP \(bu 2
\fBcurrent\-command\fP prints the name of the currently\-running function or command, like the deprecated \fB_\fP variable.
.IP \(bu 2
\fBfilename\fP prints the filename of the currently running script. Also \fBcurrent\-filename\fP, \fB\-f\fP or \fB\-\-current\-filename\fP\&. This depends on how the script was called \- if it was called via a symlink, the symlink will be returned, and if the current script was received via \fBsource\fP it will be \fB\-\fP\&.
.IP \(bu 2
\fBbasename\fP prints just the filename of the running script, without any path\-components before.
.IP \(bu 2
\fBdirname\fP prints just the path to the running script, without the actual filename itself. This can be relative to $PWD (including just "."), depending on how the script was called. This is the same as passing the \fBfilename\fP to \fBdirname(3)\fP\&. It\(aqs useful if you want to use other files in the current script\(aqs directory or similar.
.IP \(bu 2
\fBfish\-path\fP prints the absolute path to the currently executing instance of fish.
.IP \(bu 2
\fBfunction\fP prints the name of the currently called function if able, when missing displays "Not a
function" (or equivalent translated string). Also \fBcurrent\-function\fP\&.
.IP \(bu 2
\fBline\-number\fP prints the line number of the currently running script. Also \fBcurrent\-line\-number\fP, \fB\-n\fP or \fB\-\-current\-line\-number\fP\&.
.IP \(bu 2
\fBstack\-trace\fP prints a stack trace of all function calls on the call stack. Also \fBprint\-stack\-trace\fP, \fB\-t\fP or \fB\-\-print\-stack\-trace\fP\&.
.IP \(bu 2
\fBjob\-control CONTROL_TYPE\fP sets the job control type, which can be \fBnone\fP, \fBfull\fP, or \fBinteractive\fP\&. Also \fB\-j CONTROL_TYPE\fP or \fB\-\-job\-control CONTROL_TYPE\fP\&.
.IP \(bu 2
\fBfeatures\fP lists all available feature flags.
.IP \(bu 2
\fBtest\-feature FEATURE\fP returns 0 when FEATURE is enabled, 1 if it is disabled, and 2 if it is not recognized.
.UNINDENT
.SS Notes
.sp
For backwards compatibility most subcommands can also be specified as a long or short option. For example, rather than \fBstatus is\-login\fP you can type \fBstatus \-\-is\-login\fP\&. The flag forms are deprecated and may be removed in a future release (but not before fish 4.0).
.sp
You can only specify one subcommand per invocation even if you use the flag form of the subcommand.
.SS string \- manipulate strings
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
string collect [(\-N | \-\-no\-trim\-newlines)] [STRING...]
string escape [(\-n | \-\-no\-quoted)] [\-\-style=xxx] [STRING...]
string join [(\-q | \-\-quiet)] SEP [STRING...]
string join0 [(\-q | \-\-quiet)] [STRING...]
string length [(\-q | \-\-quiet)] [STRING...]
string lower [(\-q | \-\-quiet)] [STRING...]
string match [(\-a | \-\-all)] [(\-e | \-\-entire)] [(\-i | \-\-ignore\-case)] [(\-r | \-\-regex)] [(\-n | \-\-index)] [(\-q | \-\-quiet)] [(\-v | \-\-invert)] PATTERN [STRING...]
string pad [(\-r | \-\-right)] [(\-c | \-\-char) CHAR] [(\-w | \-\-width) INTEGER] [STRING...]
string repeat [(\-n | \-\-count) COUNT] [(\-m | \-\-max) MAX] [(\-N | \-\-no\-newline)] [(\-q | \-\-quiet)] [STRING...]
string replace [(\-a | \-\-all)] [(\-f | \-\-filter)] [(\-i | \-\-ignore\-case)] [(\-r | \-\-regex)] [(\-q | \-\-quiet)] PATTERN REPLACEMENT [STRING...]
string split [(\-m | \-\-max) MAX] [(\-n | \-\-no\-empty)] [(\-q | \-\-quiet)] [(\-r | \-\-right)] SEP [STRING...]
string split0 [(\-m | \-\-max) MAX] [(\-n | \-\-no\-empty)] [(\-q | \-\-quiet)] [(\-r | \-\-right)] [STRING...]
string sub [(\-s | \-\-start) START] [(\-l | \-\-length) LENGTH] [(\-q | \-\-quiet)] [STRING...]
string trim [(\-l | \-\-left)] [(\-r | \-\-right)] [(\-c | \-\-chars CHARS)] [(\-q | \-\-quiet)] [STRING...]
string unescape [\-\-style=xxx] [STRING...]
string upper [(\-q | \-\-quiet)] [STRING...]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBstring\fP performs operations on strings.
.sp
STRING arguments are taken from the command line unless standard input is connected to a pipe or a file, in which case they are read from standard input, one STRING per line. It is an error to supply STRING arguments on the command line and on standard input.
.sp
Arguments beginning with \fB\-\fP are normally interpreted as switches; \fB\-\-\fP causes the following arguments not to be treated as switches even if they begin with \fB\-\fP\&. Switches and required arguments are recognized only on the command line.
.sp
Most subcommands accept a \fB\-q\fP or \fB\-\-quiet\fP switch, which suppresses the usual output but exits with the documented status. In this case these commands will quit early, without reading all of the available input.
.sp
The following subcommands are available.
.SS "collect" subcommand
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
string collect [(\-N | \-\-no\-trim\-newlines)] [STRING...]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBstring collect\fP collects its input into a single output argument, without splitting the output when used in a command substitution. This is useful when trying to collect multiline output from another command into a variable. Exit status: 0 if any output argument is non\-empty, or 1 otherwise.
.sp
If invoked with multiple arguments instead of input, \fBstring collect\fP preserves each argument separately, where the number of output arguments is equal to the number of arguments given to \fBstring collect\fP\&.
.sp
Any trailing newlines on the input are trimmed, just as with \fB"$(cmd)"\fP substitution in sh. \fB\-\-no\-trim\-newlines\fP can be used to disable this behavior, which may be useful when running a command such as \fBset contents (cat filename | string collect \-N)\fP\&.
.SS Examples
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>_ echo \e"(echo one\entwo\enthree | string collect)\e"
"one
two
three"

>_ echo \e"(echo one\entwo\enthree | string collect \-N)\e"
"one
two
three
"
.ft P
.fi
.UNINDENT
.UNINDENT
.SS "escape" and "unescape" subcommands
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
string escape [(\-n | \-\-no\-quoted)] [\-\-style=xxx] [STRING...]
string unescape [\-\-style=xxx] [STRING...]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBstring escape\fP escapes each STRING in one of three ways. The first is \fB\-\-style=script\fP\&. This is the default. It alters the string such that it can be passed back to \fBeval\fP to produce the original argument again. By default, all special characters are escaped, and quotes are used to simplify the output when possible. If \fB\-n\fP or \fB\-\-no\-quoted\fP is given, the simplifying quoted format is not used. Exit status: 0 if at least one string was escaped, or 1 otherwise.
.sp
\fB\-\-style=var\fP ensures the string can be used as a variable name by hex encoding any non\-alphanumeric characters. The string is first converted to UTF\-8 before being encoded.
.sp
\fB\-\-style=url\fP ensures the string can be used as a URL by hex encoding any character which is not legal in a URL. The string is first converted to UTF\-8 before being encoded.
.sp
\fB\-\-style=regex\fP escapes an input string for literal matching within a regex expression. The string is first converted to UTF\-8 before being encoded.
.sp
\fBstring unescape\fP performs the inverse of the \fBstring escape\fP command. If the string to be unescaped is not properly formatted it is ignored. For example, doing \fBstring unescape \-\-style=var (string escape \-\-style=var $str)\fP will return the original string. There is no support for unescaping \fB\-\-style=regex\fP\&.
.SS Examples
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>_ echo \ex07 | string escape
\ecg

>_ string escape \-\-style=var \(aqa1 b2\(aq\eu6161
a1_20_b2_E6_85_A1_
.ft P
.fi
.UNINDENT
.UNINDENT
.SS "join" and "join0" subcommands
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
string join [(\-q | \-\-quiet)] SEP [STRING...]
string join0 [(\-q | \-\-quiet)] [STRING...]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBstring join\fP joins its STRING arguments into a single string separated by SEP, which can be an empty string. Exit status: 0 if at least one join was performed, or 1 otherwise.
.sp
\fBstring join0\fP joins its STRING arguments into a single string separated by the zero byte (NUL), and adds a trailing NUL. This is most useful in conjunction with tools that accept NUL\-delimited input, such as \fBsort \-z\fP\&. Exit status: 0 if at least one join was performed, or 1 otherwise.
.sp
Because Unix uses NUL as the string terminator, passing the output of \fBstring join0\fP as an \fIargument\fP to a command (via a command substitution) won\(aqt actually work. Fish will pass the correct bytes along, but the command won\(aqt be able to tell where the argument ends. This is a limitation of Unix\(aq argument passing.
.SS Examples
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>_ seq 3 | string join ...
1...2...3

# Give a list of NUL\-separated filenames to du (this is a GNU extension)
>_ string join0 file1 file2 file\enwith\enmultiple\enlines | du \-\-files0\-from=\-

# Just put the strings together without a separator
>_ string join \(aq\(aq a b c
abc
.ft P
.fi
.UNINDENT
.UNINDENT
.SS "length" subcommand
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
string length [(\-q | \-\-quiet)] [STRING...]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBstring length\fP reports the length of each string argument in characters. Exit status: 0 if at least one non\-empty STRING was given, or 1 otherwise.
.SS Examples
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>_ string length \(aqhello, world\(aq
12

>_ set str foo
>_ string length \-q $str; echo $status
0
# Equivalent to test \-n "$str"
.ft P
.fi
.UNINDENT
.UNINDENT
.SS "lower" subcommand
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
string lower [(\-q | \-\-quiet)] [STRING...]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBstring lower\fP converts each string argument to lowercase. Exit status: 0 if at least one string was converted to lowercase, else 1. This means that in conjunction with the \fB\-q\fP flag you can readily test whether a string is already lowercase.
.SS "match" subcommand
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
string match [(\-a | \-\-all)] [(\-e | \-\-entire)] [(\-i | \-\-ignore\-case)] [(\-r | \-\-regex)] [(\-n | \-\-index)] [(\-q | \-\-quiet)] [(\-v | \-\-invert)] PATTERN [STRING...]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBstring match\fP tests each STRING against PATTERN and prints matching substrings. Only the first match for each STRING is reported unless \fB\-a\fP or \fB\-\-all\fP is given, in which case all matches are reported.
.sp
If you specify the \fB\-e\fP or \fB\-\-entire\fP then each matching string is printed including any prefix or suffix not matched by the pattern (equivalent to \fBgrep\fP without the \fB\-o\fP flag). You can, obviously, achieve the same result by prepending and appending \fB*\fP or \fB\&.*\fP depending on whether or not you have specified the \fB\-\-regex\fP flag. The \fB\-\-entire\fP flag is simply a way to avoid having to complicate the pattern in that fashion and make the intent of the \fBstring match\fP clearer. Without \fB\-\-entire\fP and \fB\-\-regex\fP, a PATTERN will need to match the entire STRING before it will be reported.
.sp
Matching can be made case\-insensitive with \fB\-\-ignore\-case\fP or \fB\-i\fP\&.
.sp
If \fB\-\-index\fP or \fB\-n\fP is given, each match is reported as a 1\-based start position and a length. By default, PATTERN is interpreted as a glob pattern matched against each entire STRING argument. A glob pattern is only considered a valid match if it matches the entire STRING.
.sp
If \fB\-\-regex\fP or \fB\-r\fP is given, PATTERN is interpreted as a Perl\-compatible regular expression, which does not have to match the entire STRING. For a regular expression containing capturing groups, multiple items will be reported for each match, one for the entire match and one for each capturing group. With this, only the matching part of the STRING will be reported, unless \fB\-\-entire\fP is given.
.sp
When matching via regular expressions, \fBstring match\fP automatically sets variables for all named capturing groups (\fB(?<name>expression)\fP). It will create a variable with the name of the group, in the default scope, for each named capturing group, and set it to the value of the capturing group in the first matched argument. If a named capture group matched an empty string, the variable will be set to the empty string (like \fBset var ""\fP). If it did not match, the variable will be set to nothing (like \fBset var\fP).  When \fB\-\-regex\fP is used with \fB\-\-all\fP, this behavior changes. Each named variable will contain a list of matches, with the first match contained in the first element, the second match in the second, and so on. If the group was empty or did not match, the corresponding element will be an empty string.
.sp
If \fB\-\-invert\fP or \fB\-v\fP is used the selected lines will be only those which do not match the given glob pattern or regular expression.
.sp
Exit status: 0 if at least one match was found, or 1 otherwise.
.SS Match Glob Examples
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>_ string match \(aq?\(aq a
a

>_ string match \(aqa*b\(aq axxb
axxb

>_ string match \-i \(aqa??B\(aq Axxb
Axxb

>_ echo \(aqok?\(aq | string match \(aq*\e?\(aq
ok?

# Note that only the second STRING will match here.
>_ string match \(aqfoo\(aq \(aqfoo1\(aq \(aqfoo\(aq \(aqfoo2\(aq
foo

>_ string match \-e \(aqfoo\(aq \(aqfoo1\(aq \(aqfoo\(aq \(aqfoo2\(aq
foo1
foo
foo2

>_ string match \(aqfoo?\(aq \(aqfoo1\(aq \(aqfoo\(aq \(aqfoo2\(aq
foo1
foo2
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Match Regex Examples
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>_ string match \-r \(aqcat|dog|fish\(aq \(aqnice dog\(aq
dog

>_ string match \-r \-v "c.*[12]" {cat,dog}(seq 1 4)
dog1
dog2
cat3
dog3
cat4
dog4

>_ string match \-r \(aq(\ed\ed?):(\ed\ed):(\ed\ed)\(aq 2:34:56
2:34:56
2
34
56

>_ string match \-r \(aq^(\ew{2,4})\e1$\(aq papa mud murmur
papa
pa
murmur
mur

>_ string match \-r \-a \-n at ratatat
2 2
4 2
6 2

>_ string match \-r \-i \(aq0x[0\-9a\-f]{1,8}\(aq \(aqint magic = 0xBadC0de;\(aq
0xBadC0de

>_ echo $version
3.1.2\-1575\-ga2ff32d90
>_ string match \-rq \(aq(?<major>\ed+).(?<minor>\ed+).(?<revision>\ed+)\(aq \-\- $version
>_ echo "You are using fish $major!"
You are using fish 3!

>_ string match \-raq \(aq *(?<sentence>[^.!?]+)(?<punctuation>[.!?])?\(aq "hello, friend. goodbye"
>_ printf "%s\en" \-\- $sentence
hello, friend
goodbye
>_ printf "%s\en" \-\- $punctuation
\&.

>_ string match \-rq \(aq(?<word>hello)\(aq \(aqhi\(aq
>_ count $word
0
.ft P
.fi
.UNINDENT
.UNINDENT
.SS "pad" subcommand
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
string pad [(\-r | \-\-right)] [(\-c | \-\-char) CHAR] [(\-w | \-\-width) INTEGER] [STRING...]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBstring pad\fP extends each STRING to the given width by adding CHAR to the left.
.sp
If \fB\-r\fP or \fB\-\-right\fP is given, add the padding after a string.
.sp
If \fB\-c\fP or \fB\-\-char\fP is given, pad with CHAR instead of whitespace.
.sp
The output is padded to the maximum width of all input strings. If \fB\-w\fP or \fB\-\-width\fP is given, use at least that.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>_ string pad \-w 10 abc abcdef
       abc
    abcdef

>_ string pad \-\-right \-\-char=🐟 "fish are pretty" "rich. "
fish are pretty
rich.  🐟🐟🐟🐟

>_ string pad \-w$COLUMNS (date)
# Prints the current time on the right edge of the screen.
.ft P
.fi
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
The printf command can do simple padding, for example \fBprintf %10s\en\fP works like \fBstring pad \-w10\fP\&.
.UNINDENT
.SS "repeat" subcommand
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
string repeat [(\-n | \-\-count) COUNT] [(\-m | \-\-max) MAX] [(\-N | \-\-no\-newline)] [(\-q | \-\-quiet)] [STRING...]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBstring repeat\fP repeats the STRING \fB\-n\fP or \fB\-\-count\fP times. The \fB\-m\fP or \fB\-\-max\fP option will limit the number of outputted char (excluding the newline). This option can be used by itself or in conjunction with \fB\-\-count\fP\&. If both \fB\-\-count\fP and \fB\-\-max\fP are present, max char will be outputed unless the final repeated string size is less than max, in that case, the string will repeat until count has been reached. Both \fB\-\-count\fP and \fB\-\-max\fP will accept a number greater than or equal to zero, in the case of zero, nothing will be outputed. If \fB\-N\fP or \fB\-\-no\-newline\fP is given, the output won\(aqt contain a newline character at the end. Exit status: 0 if yielded string is not empty, 1 otherwise.
.SS Examples
.SS Repeat Examples
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>_ string repeat \-n 2 \(aqfoo \(aq
foo foo

>_ echo foo | string repeat \-n 2
foofoo

>_ string repeat \-n 2 \-m 5 \(aqfoo\(aq
foofo

>_ string repeat \-m 5 \(aqfoo\(aq
foofo
.ft P
.fi
.UNINDENT
.UNINDENT
.SS "replace" subcommand
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
string replace [(\-a | \-\-all)] [(\-f | \-\-filter)] [(\-i | \-\-ignore\-case)] [(\-r | \-\-regex)] [(\-q | \-\-quiet)] PATTERN REPLACEMENT [STRING...]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBstring replace\fP is similar to \fBstring match\fP but replaces non\-overlapping matching substrings with a replacement string and prints the result. By default, PATTERN is treated as a literal substring to be matched.
.sp
If \fB\-r\fP or \fB\-\-regex\fP is given, PATTERN is interpreted as a Perl\-compatible regular expression, and REPLACEMENT can contain C\-style escape sequences like \fB\et\fP as well as references to capturing groups by number or name as \fB$n\fP or \fB${n}\fP\&.
.sp
If you specify the \fB\-f\fP or \fB\-\-filter\fP flag then each input string is printed only if a replacement was done. This is useful where you would otherwise use this idiom: \fBa_cmd | string match pattern | string replace pattern new_pattern\fP\&. You can instead just write \fBa_cmd | string replace \-\-filter pattern new_pattern\fP\&.
.sp
Exit status: 0 if at least one replacement was performed, or 1 otherwise.
.SS Replace Literal Examples
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>_ string replace is was \(aqblue is my favorite\(aq
blue was my favorite

>_ string replace 3rd last 1st 2nd 3rd
1st
2nd
last

>_ string replace \-a \(aq \(aq _ \(aqspaces to underscores\(aq
spaces_to_underscores
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Replace Regex Examples
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>_ string replace \-r \-a \(aq[^\ed.]+\(aq \(aq \(aq \(aq0 one two 3.14 four 5x\(aq
0 3.14 5

>_ string replace \-r \(aq(\ew+)\es+(\ew+)\(aq \(aq$2 $1 $$\(aq \(aqleft right\(aq
right left $

>_ string replace \-r \(aq\es*newline\es*\(aq \(aq\en\(aq \(aqput a newline here\(aq
put a
here
.ft P
.fi
.UNINDENT
.UNINDENT
.SS "split" and "split0" subcommands
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
string split [(\-f | \-\-fields) FIELDS] [(\-m | \-\-max) MAX] [(\-n | \-\-no\-empty)] [(\-q | \-\-quiet)] [(\-r | \-\-right)] SEP [STRING...]
string split0 [(\-f | \-\-fields) FIELDS] [(\-m | \-\-max) MAX] [(\-n | \-\-no\-empty)] [(\-q | \-\-quiet)] [(\-r | \-\-right)] [STRING...]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBstring split\fP splits each STRING on the separator SEP, which can be an empty string. If \fB\-m\fP or \fB\-\-max\fP is specified, at most MAX splits are done on each STRING. If \fB\-r\fP or \fB\-\-right\fP is given, splitting is performed right\-to\-left. This is useful in combination with \fB\-m\fP or \fB\-\-max\fP\&. With \fB\-n\fP or \fB\-\-no\-empty\fP, empty results are excluded from consideration (e.g. \fBhello\en\enworld\fP would expand to two strings and not three). Exit status: 0 if at least one split was performed, or 1 otherwise.
.sp
Use \fB\-f\fP or \fB\-\-fields\fP to print out specific fields. Unless \fB\-\-allow\-empty\fP is used, if a given field does not exist, then the command exits with status 1 and does not print anything.
.sp
See also the \fB\-\-delimiter\fP option of the read command.
.sp
\fBstring split0\fP splits each STRING on the zero byte (NUL). Options are the same as \fBstring split\fP except that no separator is given.
.sp
\fBsplit0\fP has the important property that its output is not further split when used in a command substitution, allowing for the command substitution to produce elements containing newlines. This is most useful when used with Unix tools that produce zero bytes, such as \fBfind \-print0\fP or \fBsort \-z\fP\&. See split0 examples below.
.SS Examples
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>_ string split . example.com
example
com

>_ string split \-r \-m1 / /usr/local/bin/fish
/usr/local/bin
fish

>_ string split \(aq\(aq abc
a
b
c

>_ string split \-\-allow\-empty \-f1,3,5 \(aq\(aq abc
a
c
.ft P
.fi
.UNINDENT
.UNINDENT
.SS NUL Delimited Examples
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>_ # Count files in a directory, without being confused by newlines.
>_ count (find . \-print0 | string split0)
42

>_ # Sort a list of elements which may contain newlines
>_ set foo beta alpha\engamma
>_ set foo (string join0 $foo | sort \-z | string split0)
>_ string escape $foo[1]
alpha\engamma
.ft P
.fi
.UNINDENT
.UNINDENT
.SS "sub" subcommand
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
string sub [(\-s | \-\-start) START] [(\-e | \-\-end) END] [(\-l | \-\-length) LENGTH] [(\-q | \-\-quiet)] [STRING...]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBstring sub\fP prints a substring of each string argument. The start/end of the substring can be specified with \fB\-s\fP/\fB\-e\fP or \fB\-\-start\fP/\fB\-\-end\fP followed by a 1\-based index value. Positive index values are relative to the start of the string and negative index values are relative to the end of the string. The default start value is 1. The length of the substring can be specified with \fB\-l\fP or \fB\-\-length\fP\&. If the length or end is not specified, the substring continues to the end of each STRING. Exit status: 0 if at least one substring operation was performed, 1 otherwise. \fB\-\-length\fP is mutually exclusive with \fB\-\-end\fP\&.
.SS Examples
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>_ string sub \-\-length 2 abcde
ab

>_ string sub \-s 2 \-l 2 abcde
bc

>_ string sub \-\-start=\-2 abcde
de

>_ string sub \-\-end=3 abcde
abc

>_ string sub \-e \-1 abcde
abcd

>_ string sub \-s 2 \-e \-1 abcde
bcd

>_ string sub \-s \-3 \-e \-2 abcde
c
.ft P
.fi
.UNINDENT
.UNINDENT
.SS "trim" subcommand
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
string trim [(\-l | \-\-left)] [(\-r | \-\-right)] [(\-c | \-\-chars CHARS)] [(\-q | \-\-quiet)] [STRING...]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBstring trim\fP removes leading and trailing whitespace from each STRING. If \fB\-l\fP or \fB\-\-left\fP is given, only leading whitespace is removed. If \fB\-r\fP or \fB\-\-right\fP is given, only trailing whitespace is trimmed. The \fB\-c\fP or \fB\-\-chars\fP switch causes the characters in CHARS to be removed instead of whitespace. Exit status: 0 if at least one character was trimmed, or 1 otherwise.
.SS Examples
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>_ string trim \(aq abc  \(aq
abc

>_ string trim \-\-right \-\-chars=yz xyzzy zany
x
zan
.ft P
.fi
.UNINDENT
.UNINDENT
.SS "upper" subcommand
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
string upper [(\-q | \-\-quiet)] [STRING...]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBstring upper\fP converts each string argument to uppercase. Exit status: 0 if at least one string was converted to uppercase, else 1. This means that in conjunction with the \fB\-q\fP flag you can readily test whether a string is already uppercase.
.SS Regular Expressions
.sp
Both the \fBmatch\fP and \fBreplace\fP subcommand support regular expressions when used with the \fB\-r\fP or \fB\-\-regex\fP option. The dialect is that of PCRE2.
.sp
In general, special characters are special by default, so \fBa+\fP matches one or more "a"s, while \fBa\e+\fP matches an "a" and then a "+". \fB(a+)\fP matches one or more "a"s in a capturing group (\fB(?:XXXX)\fP denotes a non\-capturing group). For the replacement parameter of \fBreplace\fP, \fB$n\fP refers to the n\-th group of the match. In the match parameter, \fB\en\fP (e.g. \fB\e1\fP) refers back to groups.
.sp
Some features include repetitions:
.INDENT 0.0
.IP \(bu 2
\fB*\fP refers to 0 or more repetitions of the previous expression
.IP \(bu 2
\fB+\fP 1 or more
.IP \(bu 2
\fB?\fP 0 or 1.
.IP \(bu 2
\fB{n}\fP to exactly n (where n is a number)
.IP \(bu 2
\fB{n,m}\fP at least n, no more than m.
.IP \(bu 2
\fB{n,}\fP n or more
.UNINDENT
.sp
Character classes, some of the more important:
.INDENT 0.0
.IP \(bu 2
\fB\&.\fP any character except newline
.IP \(bu 2
\fB\ed\fP a decimal digit and \fB\eD\fP, not a decimal digit
.IP \(bu 2
\fB\es\fP whitespace and \fB\eS\fP, not whitespace
.IP \(bu 2
\fB\ew\fP a "word" character and \fB\eW\fP, a "non\-word" character
.IP \(bu 2
\fB[...]\fP (where "..." is some characters) is a character set
.IP \(bu 2
\fB[^...]\fP is the inverse of the given character set
.IP \(bu 2
\fB[x\-y]\fP is the range of characters from x\-y
.IP \(bu 2
\fB[[:xxx:]]\fP is a named character set
.IP \(bu 2
\fB[[:^xxx:]]\fP is the inverse of a named character set
.IP \(bu 2
\fB[[:alnum:]]\fP  : "alphanumeric"
.IP \(bu 2
\fB[[:alpha:]]\fP  : "alphabetic"
.IP \(bu 2
\fB[[:ascii:]]\fP  : "0\-127"
.IP \(bu 2
\fB[[:blank:]]\fP  : "space or tab"
.IP \(bu 2
\fB[[:cntrl:]]\fP  : "control character"
.IP \(bu 2
\fB[[:digit:]]\fP  : "decimal digit"
.IP \(bu 2
\fB[[:graph:]]\fP  : "printing, excluding space"
.IP \(bu 2
\fB[[:lower:]]\fP  : "lower case letter"
.IP \(bu 2
\fB[[:print:]]\fP  : "printing, including space"
.IP \(bu 2
\fB[[:punct:]]\fP  : "printing, excluding alphanumeric"
.IP \(bu 2
\fB[[:space:]]\fP  : "white space"
.IP \(bu 2
\fB[[:upper:]]\fP  : "upper case letter"
.IP \(bu 2
\fB[[:word:]]\fP   : "same as w"
.IP \(bu 2
\fB[[:xdigit:]]\fP : "hexadecimal digit"
.UNINDENT
.sp
Groups:
.INDENT 0.0
.IP \(bu 2
\fB(...)\fP is a capturing group
.IP \(bu 2
\fB(?:...)\fP is a non\-capturing group
.IP \(bu 2
\fB\en\fP is a backreference (where n is the number of the group, starting with 1)
.IP \(bu 2
\fB$n\fP is a reference from the replacement expression to a group in the match expression.
.UNINDENT
.sp
And some other things:
.INDENT 0.0
.IP \(bu 2
\fB\eb\fP denotes a word boundary, \fB\eB\fP is not a word boundary.
.IP \(bu 2
\fB^\fP is the start of the string or line, \fB$\fP the end.
.IP \(bu 2
\fB|\fP is "alternation", i.e. the "or".
.UNINDENT
.SS Comparison to other tools
.sp
Most operations \fBstring\fP supports can also be done by external tools. Some of these include \fBgrep\fP, \fBsed\fP and \fBcut\fP\&.
.sp
If you are familiar with these, it is useful to know how \fBstring\fP differs from them.
.sp
In contrast to these classics, \fBstring\fP reads input either from stdin or as arguments. \fBstring\fP also does not deal with files, so it requires redirections to be used with them.
.sp
In contrast to \fBgrep\fP, \fBstring\fP\(aqs \fBmatch\fP defaults to glob\-mode, while \fBreplace\fP defaults to literal matching. If set to regex\-mode, they use PCRE regular expressions, which is comparable to \fBgrep\fP\(aqs \fB\-P\fP option. \fBmatch\fP defaults to printing just the match, which is like \fBgrep\fP with \fB\-o\fP (use \fB\-\-entire\fP to enable grep\-like behavior).
.sp
Like \fBsed\fP\(aqs \fBs/old/new/\fP command, \fBstring replace\fP still prints strings that don\(aqt match. \fBsed\fP\(aqs \fB\-n\fP in combination with a \fB/p\fP modifier or command is like \fBstring replace \-f\fP\&.
.sp
\fBstring split somedelimiter\fP is a replacement for \fBtr somedelimiter \en\fP\&.
.SS string\-collect \- join strings into one
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
string collect [(\-N | \-\-no\-trim\-newlines)] [STRING...]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBstring collect\fP collects its input into a single output argument, without splitting the output when used in a command substitution. This is useful when trying to collect multiline output from another command into a variable. Exit status: 0 if any output argument is non\-empty, or 1 otherwise.
.sp
If invoked with multiple arguments instead of input, \fBstring collect\fP preserves each argument separately, where the number of output arguments is equal to the number of arguments given to \fBstring collect\fP\&.
.sp
Any trailing newlines on the input are trimmed, just as with \fB"$(cmd)"\fP substitution in sh. \fB\-\-no\-trim\-newlines\fP can be used to disable this behavior, which may be useful when running a command such as \fBset contents (cat filename | string collect \-N)\fP\&.
.SS Examples
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>_ echo \e"(echo one\entwo\enthree | string collect)\e"
"one
two
three"

>_ echo \e"(echo one\entwo\enthree | string collect \-N)\e"
"one
two
three
"
.ft P
.fi
.UNINDENT
.UNINDENT
.SS string\-escape \- escape special characters
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
string escape [(\-n | \-\-no\-quoted)] [\-\-style=xxx] [STRING...]
string unescape [\-\-style=xxx] [STRING...]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBstring escape\fP escapes each STRING in one of three ways. The first is \fB\-\-style=script\fP\&. This is the default. It alters the string such that it can be passed back to \fBeval\fP to produce the original argument again. By default, all special characters are escaped, and quotes are used to simplify the output when possible. If \fB\-n\fP or \fB\-\-no\-quoted\fP is given, the simplifying quoted format is not used. Exit status: 0 if at least one string was escaped, or 1 otherwise.
.sp
\fB\-\-style=var\fP ensures the string can be used as a variable name by hex encoding any non\-alphanumeric characters. The string is first converted to UTF\-8 before being encoded.
.sp
\fB\-\-style=url\fP ensures the string can be used as a URL by hex encoding any character which is not legal in a URL. The string is first converted to UTF\-8 before being encoded.
.sp
\fB\-\-style=regex\fP escapes an input string for literal matching within a regex expression. The string is first converted to UTF\-8 before being encoded.
.sp
\fBstring unescape\fP performs the inverse of the \fBstring escape\fP command. If the string to be unescaped is not properly formatted it is ignored. For example, doing \fBstring unescape \-\-style=var (string escape \-\-style=var $str)\fP will return the original string. There is no support for unescaping \fB\-\-style=regex\fP\&.
.SS Examples
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>_ echo \ex07 | string escape
\ecg

>_ string escape \-\-style=var \(aqa1 b2\(aq\eu6161
a1_20_b2_E6_85_A1_
.ft P
.fi
.UNINDENT
.UNINDENT
.SS string\-join \- join strings with delimiter
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
string join [(\-q | \-\-quiet)] SEP [STRING...]
string join0 [(\-q | \-\-quiet)] [STRING...]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBstring join\fP joins its STRING arguments into a single string separated by SEP, which can be an empty string. Exit status: 0 if at least one join was performed, or 1 otherwise.
.sp
\fBstring join0\fP joins its STRING arguments into a single string separated by the zero byte (NUL), and adds a trailing NUL. This is most useful in conjunction with tools that accept NUL\-delimited input, such as \fBsort \-z\fP\&. Exit status: 0 if at least one join was performed, or 1 otherwise.
.sp
Because Unix uses NUL as the string terminator, passing the output of \fBstring join0\fP as an \fIargument\fP to a command (via a command substitution) won\(aqt actually work. Fish will pass the correct bytes along, but the command won\(aqt be able to tell where the argument ends. This is a limitation of Unix\(aq argument passing.
.SS Examples
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>_ seq 3 | string join ...
1...2...3

# Give a list of NUL\-separated filenames to du (this is a GNU extension)
>_ string join0 file1 file2 file\enwith\enmultiple\enlines | du \-\-files0\-from=\-

# Just put the strings together without a separator
>_ string join \(aq\(aq a b c
abc
.ft P
.fi
.UNINDENT
.UNINDENT
.SS string\-join0 \- join strings with zero bytes
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
string join [(\-q | \-\-quiet)] SEP [STRING...]
string join0 [(\-q | \-\-quiet)] [STRING...]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBstring join\fP joins its STRING arguments into a single string separated by SEP, which can be an empty string. Exit status: 0 if at least one join was performed, or 1 otherwise.
.sp
\fBstring join0\fP joins its STRING arguments into a single string separated by the zero byte (NUL), and adds a trailing NUL. This is most useful in conjunction with tools that accept NUL\-delimited input, such as \fBsort \-z\fP\&. Exit status: 0 if at least one join was performed, or 1 otherwise.
.sp
Because Unix uses NUL as the string terminator, passing the output of \fBstring join0\fP as an \fIargument\fP to a command (via a command substitution) won\(aqt actually work. Fish will pass the correct bytes along, but the command won\(aqt be able to tell where the argument ends. This is a limitation of Unix\(aq argument passing.
.SS Examples
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>_ seq 3 | string join ...
1...2...3

# Give a list of NUL\-separated filenames to du (this is a GNU extension)
>_ string join0 file1 file2 file\enwith\enmultiple\enlines | du \-\-files0\-from=\-

# Just put the strings together without a separator
>_ string join \(aq\(aq a b c
abc
.ft P
.fi
.UNINDENT
.UNINDENT
.SS string\-length \- print string lengths
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
string length [(\-q | \-\-quiet)] [STRING...]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBstring length\fP reports the length of each string argument in characters. Exit status: 0 if at least one non\-empty STRING was given, or 1 otherwise.
.SS Examples
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>_ string length \(aqhello, world\(aq
12

>_ set str foo
>_ string length \-q $str; echo $status
0
# Equivalent to test \-n "$str"
.ft P
.fi
.UNINDENT
.UNINDENT
.SS string\-lower \- convert strings to lowercase
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
string lower [(\-q | \-\-quiet)] [STRING...]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBstring lower\fP converts each string argument to lowercase. Exit status: 0 if at least one string was converted to lowercase, else 1. This means that in conjunction with the \fB\-q\fP flag you can readily test whether a string is already lowercase.
.SS string\-match \- match substrings
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
string match [(\-a | \-\-all)] [(\-e | \-\-entire)] [(\-i | \-\-ignore\-case)] [(\-r | \-\-regex)] [(\-n | \-\-index)] [(\-q | \-\-quiet)] [(\-v | \-\-invert)] PATTERN [STRING...]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBstring match\fP tests each STRING against PATTERN and prints matching substrings. Only the first match for each STRING is reported unless \fB\-a\fP or \fB\-\-all\fP is given, in which case all matches are reported.
.sp
If you specify the \fB\-e\fP or \fB\-\-entire\fP then each matching string is printed including any prefix or suffix not matched by the pattern (equivalent to \fBgrep\fP without the \fB\-o\fP flag). You can, obviously, achieve the same result by prepending and appending \fB*\fP or \fB\&.*\fP depending on whether or not you have specified the \fB\-\-regex\fP flag. The \fB\-\-entire\fP flag is simply a way to avoid having to complicate the pattern in that fashion and make the intent of the \fBstring match\fP clearer. Without \fB\-\-entire\fP and \fB\-\-regex\fP, a PATTERN will need to match the entire STRING before it will be reported.
.sp
Matching can be made case\-insensitive with \fB\-\-ignore\-case\fP or \fB\-i\fP\&.
.sp
If \fB\-\-index\fP or \fB\-n\fP is given, each match is reported as a 1\-based start position and a length. By default, PATTERN is interpreted as a glob pattern matched against each entire STRING argument. A glob pattern is only considered a valid match if it matches the entire STRING.
.sp
If \fB\-\-regex\fP or \fB\-r\fP is given, PATTERN is interpreted as a Perl\-compatible regular expression, which does not have to match the entire STRING. For a regular expression containing capturing groups, multiple items will be reported for each match, one for the entire match and one for each capturing group. With this, only the matching part of the STRING will be reported, unless \fB\-\-entire\fP is given.
.sp
When matching via regular expressions, \fBstring match\fP automatically sets variables for all named capturing groups (\fB(?<name>expression)\fP). It will create a variable with the name of the group, in the default scope, for each named capturing group, and set it to the value of the capturing group in the first matched argument. If a named capture group matched an empty string, the variable will be set to the empty string (like \fBset var ""\fP). If it did not match, the variable will be set to nothing (like \fBset var\fP).  When \fB\-\-regex\fP is used with \fB\-\-all\fP, this behavior changes. Each named variable will contain a list of matches, with the first match contained in the first element, the second match in the second, and so on. If the group was empty or did not match, the corresponding element will be an empty string.
.sp
If \fB\-\-invert\fP or \fB\-v\fP is used the selected lines will be only those which do not match the given glob pattern or regular expression.
.sp
Exit status: 0 if at least one match was found, or 1 otherwise.
.SS Examples
.SS Match Glob Examples
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>_ string match \(aq?\(aq a
a

>_ string match \(aqa*b\(aq axxb
axxb

>_ string match \-i \(aqa??B\(aq Axxb
Axxb

>_ echo \(aqok?\(aq | string match \(aq*\e?\(aq
ok?

# Note that only the second STRING will match here.
>_ string match \(aqfoo\(aq \(aqfoo1\(aq \(aqfoo\(aq \(aqfoo2\(aq
foo

>_ string match \-e \(aqfoo\(aq \(aqfoo1\(aq \(aqfoo\(aq \(aqfoo2\(aq
foo1
foo
foo2

>_ string match \(aqfoo?\(aq \(aqfoo1\(aq \(aqfoo\(aq \(aqfoo2\(aq
foo1
foo2
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Match Regex Examples
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>_ string match \-r \(aqcat|dog|fish\(aq \(aqnice dog\(aq
dog

>_ string match \-r \-v "c.*[12]" {cat,dog}(seq 1 4)
dog1
dog2
cat3
dog3
cat4
dog4

>_ string match \-r \(aq(\ed\ed?):(\ed\ed):(\ed\ed)\(aq 2:34:56
2:34:56
2
34
56

>_ string match \-r \(aq^(\ew{2,4})\e1$\(aq papa mud murmur
papa
pa
murmur
mur

>_ string match \-r \-a \-n at ratatat
2 2
4 2
6 2

>_ string match \-r \-i \(aq0x[0\-9a\-f]{1,8}\(aq \(aqint magic = 0xBadC0de;\(aq
0xBadC0de

>_ echo $version
3.1.2\-1575\-ga2ff32d90
>_ string match \-rq \(aq(?<major>\ed+).(?<minor>\ed+).(?<revision>\ed+)\(aq \-\- $version
>_ echo "You are using fish $major!"
You are using fish 3!

>_ string match \-raq \(aq *(?<sentence>[^.!?]+)(?<punctuation>[.!?])?\(aq "hello, friend. goodbye"
>_ printf "%s\en" \-\- $sentence
hello, friend
goodbye
>_ printf "%s\en" \-\- $punctuation
\&.

>_ string match \-rq \(aq(?<word>hello)\(aq \(aqhi\(aq
>_ count $word
0
.ft P
.fi
.UNINDENT
.UNINDENT
.SS string\-pad \- pad strings to a fixed width
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
string pad [(\-r | \-\-right)] [(\-c | \-\-char) CHAR] [(\-w | \-\-width) INTEGER] [STRING...]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBstring pad\fP extends each STRING to the given width by adding CHAR to the left.
.sp
If \fB\-r\fP or \fB\-\-right\fP is given, add the padding after a string.
.sp
If \fB\-c\fP or \fB\-\-char\fP is given, pad with CHAR instead of whitespace.
.sp
The output is padded to the maximum width of all input strings. If \fB\-w\fP or \fB\-\-width\fP is given, use at least that.
.SS Examples
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>_ string pad \-w 10 abc abcdef
       abc
    abcdef

>_ string pad \-\-right \-\-char=🐟 "fish are pretty" "rich. "
fish are pretty
rich.  🐟🐟🐟🐟

>_ string pad \-w$COLUMNS (date)
# Prints the current time on the right edge of the screen.
.ft P
.fi
.UNINDENT
.UNINDENT
.SS See Also
.INDENT 0.0
.IP \(bu 2
The printf command can do simple padding, for example \fBprintf %10s\en\fP works like \fBstring pad \-w10\fP\&.
.UNINDENT
.SS string\-repeat \- multiply a string
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
string repeat [(\-n | \-\-count) COUNT] [(\-m | \-\-max) MAX] [(\-N | \-\-no\-newline)] [(\-q | \-\-quiet)] [STRING...]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBstring repeat\fP repeats the STRING \fB\-n\fP or \fB\-\-count\fP times. The \fB\-m\fP or \fB\-\-max\fP option will limit the number of outputted char (excluding the newline). This option can be used by itself or in conjunction with \fB\-\-count\fP\&. If both \fB\-\-count\fP and \fB\-\-max\fP are present, max char will be outputed unless the final repeated string size is less than max, in that case, the string will repeat until count has been reached. Both \fB\-\-count\fP and \fB\-\-max\fP will accept a number greater than or equal to zero, in the case of zero, nothing will be outputed. If \fB\-N\fP or \fB\-\-no\-newline\fP is given, the output won\(aqt contain a newline character at the end. Exit status: 0 if yielded string is not empty, 1 otherwise.
.SS Examples
.SS Repeat Examples
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>_ string repeat \-n 2 \(aqfoo \(aq
foo foo

>_ echo foo | string repeat \-n 2
foofoo

>_ string repeat \-n 2 \-m 5 \(aqfoo\(aq
foofo

>_ string repeat \-m 5 \(aqfoo\(aq
foofo
.ft P
.fi
.UNINDENT
.UNINDENT
.SS string\-replace \- replace substrings
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
string replace [(\-a | \-\-all)] [(\-f | \-\-filter)] [(\-i | \-\-ignore\-case)] [(\-r | \-\-regex)] [(\-q | \-\-quiet)] PATTERN REPLACEMENT [STRING...]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBstring replace\fP is similar to \fBstring match\fP but replaces non\-overlapping matching substrings with a replacement string and prints the result. By default, PATTERN is treated as a literal substring to be matched.
.sp
If \fB\-r\fP or \fB\-\-regex\fP is given, PATTERN is interpreted as a Perl\-compatible regular expression, and REPLACEMENT can contain C\-style escape sequences like \fB\et\fP as well as references to capturing groups by number or name as \fB$n\fP or \fB${n}\fP\&.
.sp
If you specify the \fB\-f\fP or \fB\-\-filter\fP flag then each input string is printed only if a replacement was done. This is useful where you would otherwise use this idiom: \fBa_cmd | string match pattern | string replace pattern new_pattern\fP\&. You can instead just write \fBa_cmd | string replace \-\-filter pattern new_pattern\fP\&.
.sp
Exit status: 0 if at least one replacement was performed, or 1 otherwise.
.SS Examples
.SS Replace Literal Examples
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>_ string replace is was \(aqblue is my favorite\(aq
blue was my favorite

>_ string replace 3rd last 1st 2nd 3rd
1st
2nd
last

>_ string replace \-a \(aq \(aq _ \(aqspaces to underscores\(aq
spaces_to_underscores
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Replace Regex Examples
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>_ string replace \-r \-a \(aq[^\ed.]+\(aq \(aq \(aq \(aq0 one two 3.14 four 5x\(aq
0 3.14 5

>_ string replace \-r \(aq(\ew+)\es+(\ew+)\(aq \(aq$2 $1 $$\(aq \(aqleft right\(aq
right left $

>_ string replace \-r \(aq\es*newline\es*\(aq \(aq\en\(aq \(aqput a newline here\(aq
put a
here
.ft P
.fi
.UNINDENT
.UNINDENT
.SS string\-split \- split strings by delimiter
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
string split [(\-f | \-\-fields) FIELDS] [(\-m | \-\-max) MAX] [(\-n | \-\-no\-empty)] [(\-q | \-\-quiet)] [(\-r | \-\-right)] SEP [STRING...]
string split0 [(\-f | \-\-fields) FIELDS] [(\-m | \-\-max) MAX] [(\-n | \-\-no\-empty)] [(\-q | \-\-quiet)] [(\-r | \-\-right)] [STRING...]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBstring split\fP splits each STRING on the separator SEP, which can be an empty string. If \fB\-m\fP or \fB\-\-max\fP is specified, at most MAX splits are done on each STRING. If \fB\-r\fP or \fB\-\-right\fP is given, splitting is performed right\-to\-left. This is useful in combination with \fB\-m\fP or \fB\-\-max\fP\&. With \fB\-n\fP or \fB\-\-no\-empty\fP, empty results are excluded from consideration (e.g. \fBhello\en\enworld\fP would expand to two strings and not three). Exit status: 0 if at least one split was performed, or 1 otherwise.
.sp
Use \fB\-f\fP or \fB\-\-fields\fP to print out specific fields. Unless \fB\-\-allow\-empty\fP is used, if a given field does not exist, then the command exits with status 1 and does not print anything.
.sp
See also the \fB\-\-delimiter\fP option of the read command.
.sp
\fBstring split0\fP splits each STRING on the zero byte (NUL). Options are the same as \fBstring split\fP except that no separator is given.
.sp
\fBsplit0\fP has the important property that its output is not further split when used in a command substitution, allowing for the command substitution to produce elements containing newlines. This is most useful when used with Unix tools that produce zero bytes, such as \fBfind \-print0\fP or \fBsort \-z\fP\&. See split0 examples below.
.SS Examples
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>_ string split . example.com
example
com

>_ string split \-r \-m1 / /usr/local/bin/fish
/usr/local/bin
fish

>_ string split \(aq\(aq abc
a
b
c

>_ string split \-\-allow\-empty \-f1,3,5 \(aq\(aq abc
a
c
.ft P
.fi
.UNINDENT
.UNINDENT
.SS NUL Delimited Examples
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>_ # Count files in a directory, without being confused by newlines.
>_ count (find . \-print0 | string split0)
42

>_ # Sort a list of elements which may contain newlines
>_ set foo beta alpha\engamma
>_ set foo (string join0 $foo | sort \-z | string split0)
>_ string escape $foo[1]
alpha\engamma
.ft P
.fi
.UNINDENT
.UNINDENT
.SS string\-split0 \- split on zero bytes
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
string split [(\-f | \-\-fields) FIELDS] [(\-m | \-\-max) MAX] [(\-n | \-\-no\-empty)] [(\-q | \-\-quiet)] [(\-r | \-\-right)] SEP [STRING...]
string split0 [(\-f | \-\-fields) FIELDS] [(\-m | \-\-max) MAX] [(\-n | \-\-no\-empty)] [(\-q | \-\-quiet)] [(\-r | \-\-right)] [STRING...]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBstring split\fP splits each STRING on the separator SEP, which can be an empty string. If \fB\-m\fP or \fB\-\-max\fP is specified, at most MAX splits are done on each STRING. If \fB\-r\fP or \fB\-\-right\fP is given, splitting is performed right\-to\-left. This is useful in combination with \fB\-m\fP or \fB\-\-max\fP\&. With \fB\-n\fP or \fB\-\-no\-empty\fP, empty results are excluded from consideration (e.g. \fBhello\en\enworld\fP would expand to two strings and not three). Exit status: 0 if at least one split was performed, or 1 otherwise.
.sp
Use \fB\-f\fP or \fB\-\-fields\fP to print out specific fields. Unless \fB\-\-allow\-empty\fP is used, if a given field does not exist, then the command exits with status 1 and does not print anything.
.sp
See also the \fB\-\-delimiter\fP option of the read command.
.sp
\fBstring split0\fP splits each STRING on the zero byte (NUL). Options are the same as \fBstring split\fP except that no separator is given.
.sp
\fBsplit0\fP has the important property that its output is not further split when used in a command substitution, allowing for the command substitution to produce elements containing newlines. This is most useful when used with Unix tools that produce zero bytes, such as \fBfind \-print0\fP or \fBsort \-z\fP\&. See split0 examples below.
.SS Examples
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>_ string split . example.com
example
com

>_ string split \-r \-m1 / /usr/local/bin/fish
/usr/local/bin
fish

>_ string split \(aq\(aq abc
a
b
c

>_ string split \-\-allow\-empty \-f1,3,5 \(aq\(aq abc
a
c
.ft P
.fi
.UNINDENT
.UNINDENT
.SS NUL Delimited Examples
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>_ # Count files in a directory, without being confused by newlines.
>_ count (find . \-print0 | string split0)
42

>_ # Sort a list of elements which may contain newlines
>_ set foo beta alpha\engamma
>_ set foo (string join0 $foo | sort \-z | string split0)
>_ string escape $foo[1]
alpha\engamma
.ft P
.fi
.UNINDENT
.UNINDENT
.SS string\-sub \- extract substrings
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
string sub [(\-s | \-\-start) START] [(\-e | \-\-end) END] [(\-l | \-\-length) LENGTH] [(\-q | \-\-quiet)] [STRING...]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBstring sub\fP prints a substring of each string argument. The start/end of the substring can be specified with \fB\-s\fP/\fB\-e\fP or \fB\-\-start\fP/\fB\-\-end\fP followed by a 1\-based index value. Positive index values are relative to the start of the string and negative index values are relative to the end of the string. The default start value is 1. The length of the substring can be specified with \fB\-l\fP or \fB\-\-length\fP\&. If the length or end is not specified, the substring continues to the end of each STRING. Exit status: 0 if at least one substring operation was performed, 1 otherwise. \fB\-\-length\fP is mutually exclusive with \fB\-\-end\fP\&.
.SS Examples
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>_ string sub \-\-length 2 abcde
ab

>_ string sub \-s 2 \-l 2 abcde
bc

>_ string sub \-\-start=\-2 abcde
de

>_ string sub \-\-end=3 abcde
abc

>_ string sub \-e \-1 abcde
abcd

>_ string sub \-s 2 \-e \-1 abcde
bcd

>_ string sub \-s \-3 \-e \-2 abcde
c
.ft P
.fi
.UNINDENT
.UNINDENT
.SS string\-trim \- remove trailing whitespace
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
string trim [(\-l | \-\-left)] [(\-r | \-\-right)] [(\-c | \-\-chars CHARS)] [(\-q | \-\-quiet)] [STRING...]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBstring trim\fP removes leading and trailing whitespace from each STRING. If \fB\-l\fP or \fB\-\-left\fP is given, only leading whitespace is removed. If \fB\-r\fP or \fB\-\-right\fP is given, only trailing whitespace is trimmed. The \fB\-c\fP or \fB\-\-chars\fP switch causes the characters in CHARS to be removed instead of whitespace. Exit status: 0 if at least one character was trimmed, or 1 otherwise.
.SS Examples
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>_ string trim \(aq abc  \(aq
abc

>_ string trim \-\-right \-\-chars=yz xyzzy zany
x
zan
.ft P
.fi
.UNINDENT
.UNINDENT
.SS string\-unescape \- expand escape sequences
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
string escape [(\-n | \-\-no\-quoted)] [\-\-style=xxx] [STRING...]
string unescape [\-\-style=xxx] [STRING...]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBstring escape\fP escapes each STRING in one of three ways. The first is \fB\-\-style=script\fP\&. This is the default. It alters the string such that it can be passed back to \fBeval\fP to produce the original argument again. By default, all special characters are escaped, and quotes are used to simplify the output when possible. If \fB\-n\fP or \fB\-\-no\-quoted\fP is given, the simplifying quoted format is not used. Exit status: 0 if at least one string was escaped, or 1 otherwise.
.sp
\fB\-\-style=var\fP ensures the string can be used as a variable name by hex encoding any non\-alphanumeric characters. The string is first converted to UTF\-8 before being encoded.
.sp
\fB\-\-style=url\fP ensures the string can be used as a URL by hex encoding any character which is not legal in a URL. The string is first converted to UTF\-8 before being encoded.
.sp
\fB\-\-style=regex\fP escapes an input string for literal matching within a regex expression. The string is first converted to UTF\-8 before being encoded.
.sp
\fBstring unescape\fP performs the inverse of the \fBstring escape\fP command. If the string to be unescaped is not properly formatted it is ignored. For example, doing \fBstring unescape \-\-style=var (string escape \-\-style=var $str)\fP will return the original string. There is no support for unescaping \fB\-\-style=regex\fP\&.
.SS Examples
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>_ echo \ex07 | string escape
\ecg

>_ string escape \-\-style=var \(aqa1 b2\(aq\eu6161
a1_20_b2_E6_85_A1_
.ft P
.fi
.UNINDENT
.UNINDENT
.SS string\-upper \- convert strings to uppercase
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
string upper [(\-q | \-\-quiet)] [STRING...]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBstring upper\fP converts each string argument to uppercase. Exit status: 0 if at least one string was converted to uppercase, else 1. This means that in conjunction with the \fB\-q\fP flag you can readily test whether a string is already uppercase.
.SS suspend \- suspend the current shell
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
suspend [\-\-force]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBsuspend\fP suspends execution of the current shell by sending it a SIGTSTP signal, returning to the controlling process. It can be resumed later by sending it a SIGCONT.  In order to prevent suspending a shell that doesn\(aqt have a controlling process, it will not suspend the shell if it is a login shell. This requirement is bypassed if the \fB\-\-force\fP option is given or the shell is not interactive.
.SS switch \- conditionally execute a block of commands
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
switch VALUE; [case [WILDCARD...]; [COMMANDS...]; ...] end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBswitch\fP performs one of several blocks of commands, depending on whether a specified value equals one of several wildcarded values. \fBcase\fP is used together with the \fBswitch\fP statement in order to determine which block should be executed.
.sp
Each \fBcase\fP command is given one or more parameters. The first \fBcase\fP command with a parameter that matches the string specified in the switch command will be evaluated. \fBcase\fP parameters may contain wildcards. These need to be escaped or quoted in order to avoid regular wildcard expansion using filenames.
.sp
Note that fish does not fall through on case statements. Only the first matching case is executed.
.sp
Note that command substitutions in a case statement will be evaluated even if its body is not taken. All substitutions, including command substitutions, must be performed before the value can be compared against the parameter.
.SS Example
.sp
If the variable $animal contains the name of an animal, the following code would attempt to classify it:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
switch $animal
    case cat
        echo evil
    case wolf dog human moose dolphin whale
        echo mammal
    case duck goose albatross
        echo bird
    case shark trout stingray
        echo fish
    case \(aq*\(aq
        echo I have no idea what a $animal is
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If the above code was run with \fB$animal\fP set to \fBwhale\fP, the output
would be \fBmammal\fP\&.
.SS test \- perform tests on files and text
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
test [EXPRESSION]
[ [EXPRESSION] ]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
Tests the expression given and sets the exit status to 0 if true, and 1 if false. An expression is made up of one or more operators and their arguments.
.sp
The first form (\fBtest\fP) is preferred. For compatibility with other shells, the second form is available: a matching pair of square brackets (\fB[ [EXPRESSION ] ]\fP).
.sp
This test is mostly POSIX\-compatible.
.sp
When using a variable as an argument for a test operator you should almost always enclose it in double\-quotes. There are only two situations it is safe to omit the quote marks. The first is when the argument is a literal string with no whitespace or other characters special to the shell (e.g., semicolon). For example, \fBtest \-b /my/file\fP\&. The second is using a variable that expands to exactly one element including if that element is the empty string (e.g., \fBset x \(aq\(aq\fP). If the variable is not set, set but with no value, or set to more than one value you must enclose it in double\-quotes. For example, \fBtest "$x" = "$y"\fP\&. Since it is always safe to enclose variables in double\-quotes when used as \fBtest\fP arguments that is the recommended practice.
.SS Operators for files and directories
.INDENT 0.0
.IP \(bu 2
\fB\-b FILE\fP returns true if \fBFILE\fP is a block device.
.IP \(bu 2
\fB\-c FILE\fP returns true if \fBFILE\fP is a character device.
.IP \(bu 2
\fB\-d FILE\fP returns true if \fBFILE\fP is a directory.
.IP \(bu 2
\fB\-e FILE\fP returns true if \fBFILE\fP exists.
.IP \(bu 2
\fB\-f FILE\fP returns true if \fBFILE\fP is a regular file.
.IP \(bu 2
\fB\-g FILE\fP returns true if \fBFILE\fP has the set\-group\-ID bit set.
.IP \(bu 2
\fB\-G FILE\fP returns true if \fBFILE\fP exists and has the same group ID as the current user.
.IP \(bu 2
\fB\-k FILE\fP returns true if \fBFILE\fP has the sticky bit set. If the OS does not support the concept it returns false. See \fI\%https://en.wikipedia.org/wiki/Sticky_bit\fP\&.
.IP \(bu 2
\fB\-L FILE\fP returns true if \fBFILE\fP is a symbolic link.
.IP \(bu 2
\fB\-O FILE\fP returns true if \fBFILE\fP exists and is owned by the current user.
.IP \(bu 2
\fB\-p FILE\fP returns true if \fBFILE\fP is a named pipe.
.IP \(bu 2
\fB\-r FILE\fP returns true if \fBFILE\fP is marked as readable.
.IP \(bu 2
\fB\-s FILE\fP returns true if the size of \fBFILE\fP is greater than zero.
.IP \(bu 2
\fB\-S FILE\fP returns true if \fBFILE\fP is a socket.
.IP \(bu 2
\fB\-t FD\fP returns true if the file descriptor \fBFD\fP is a terminal (TTY).
.IP \(bu 2
\fB\-u FILE\fP returns true if \fBFILE\fP has the set\-user\-ID bit set.
.IP \(bu 2
\fB\-w FILE\fP returns true if \fBFILE\fP is marked as writable; note that this does not check if the filesystem is read\-only.
.IP \(bu 2
\fB\-x FILE\fP returns true if \fBFILE\fP is marked as executable.
.UNINDENT
.SS Operators for text strings
.INDENT 0.0
.IP \(bu 2
\fBSTRING1 = STRING2\fP returns true if the strings \fBSTRING1\fP and \fBSTRING2\fP are identical.
.IP \(bu 2
\fBSTRING1 != STRING2\fP returns true if the strings \fBSTRING1\fP and \fBSTRING2\fP are not identical.
.IP \(bu 2
\fB\-n STRING\fP returns true if the length of \fBSTRING\fP is non\-zero.
.IP \(bu 2
\fB\-z STRING\fP returns true if the length of \fBSTRING\fP is zero.
.UNINDENT
.SS Operators to compare and examine numbers
.INDENT 0.0
.IP \(bu 2
\fBNUM1 \-eq NUM2\fP returns true if \fBNUM1\fP and \fBNUM2\fP are numerically equal.
.IP \(bu 2
\fBNUM1 \-ne NUM2\fP returns true if \fBNUM1\fP and \fBNUM2\fP are not numerically equal.
.IP \(bu 2
\fBNUM1 \-gt NUM2\fP returns true if \fBNUM1\fP is greater than \fBNUM2\fP\&.
.IP \(bu 2
\fBNUM1 \-ge NUM2\fP returns true if \fBNUM1\fP is greater than or equal to \fBNUM2\fP\&.
.IP \(bu 2
\fBNUM1 \-lt NUM2\fP returns true if \fBNUM1\fP is less than \fBNUM2\fP\&.
.IP \(bu 2
\fBNUM1 \-le NUM2\fP returns true if \fBNUM1\fP is less than or equal to \fBNUM2\fP\&.
.UNINDENT
.sp
Both integers and floating point numbers are supported.
.SS Operators to combine expressions
.INDENT 0.0
.IP \(bu 2
\fBCOND1 \-a COND2\fP returns true if both \fBCOND1\fP and \fBCOND2\fP are true.
.IP \(bu 2
\fBCOND1 \-o COND2\fP returns true if either \fBCOND1\fP or \fBCOND2\fP are true.
.UNINDENT
.sp
Expressions can be inverted using the \fB!\fP operator:
.INDENT 0.0
.IP \(bu 2
\fB! EXPRESSION\fP returns true if \fBEXPRESSION\fP is false, and false if \fBEXPRESSION\fP is true.
.UNINDENT
.sp
Expressions can be grouped using parentheses.
.INDENT 0.0
.IP \(bu 2
\fB( EXPRESSION )\fP returns the value of \fBEXPRESSION\fP\&.
.UNINDENT
.INDENT 0.0
.INDENT 3.5
Note that parentheses will usually require escaping with \fB\e(\fP to avoid being interpreted as a command substitution.
.UNINDENT
.UNINDENT
.SS Examples
.sp
If the \fB/tmp\fP directory exists, copy the \fB/etc/motd\fP file to it:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
if test \-d /tmp
    cp /etc/motd /tmp/motd
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If the variable \fBMANPATH\fP is defined and not empty, print the contents. (If \fBMANPATH\fP is not defined, then it will expand to zero arguments, unless quoted.)
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
if test \-n "$MANPATH"
    echo $MANPATH
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Parentheses and the \fB\-o\fP and \fB\-a\fP operators can be combined to produce more complicated expressions. In this example, success is printed if there is a \fB/foo\fP or \fB/bar\fP file as well as a \fB/baz\fP or \fB/bat\fP file.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
if test \e( \-f /foo \-o \-f /bar \e) \-a \e( \-f /baz \-o \-f /bat \e)
    echo Success.
end.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Numerical comparisons will simply fail if one of the operands is not a number:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
if test 42 \-eq "The answer to life, the universe and everything"
    echo So long and thanks for all the fish # will not be executed
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
A common comparison is with $status:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
if test $status \-eq 0
    echo "Previous command succeeded"
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The previous test can likewise be inverted:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
if test ! $status \-eq 0
    echo "Previous command failed"
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
which is logically equivalent to the following:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
if test $status \-ne 0
    echo "Previous command failed"
end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Standards
.sp
\fBtest\fP implements a subset of the \fI\%IEEE Std 1003.1\-2008 (POSIX.1) standard\fP\&. The following exceptions apply:
.INDENT 0.0
.IP \(bu 2
The \fB<\fP and \fB>\fP operators for comparing strings are not implemented.
.IP \(bu 2
Because this test is a shell builtin and not a standalone utility, using the \-c flag on a special file descriptors like standard input and output may not return the same result when invoked from within a pipe as one would expect when invoking the \fBtest\fP utility in another shell.
.UNINDENT
.INDENT 0.0
.INDENT 3.5
In cases such as this, one can use \fBcommand\fP \fBtest\fP to explicitly use the system\(aqs standalone \fBtest\fP rather than this \fBbuiltin\fP \fBtest\fP\&.
.UNINDENT
.UNINDENT
.SS time \- measure how long a command or block takes
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
time COMMAND
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBtime\fP causes fish to measure how long a command takes and print the results afterwards. The command can be a simple fish command or a block. The results can not currently be redirected.
.sp
For checking timing after a command has completed, check $CMD_DURATION\&.
.sp
Your system most likely also has a \fBtime\fP command. To use that use something like \fBcommand time\fP, as in \fBcommand time sleep 10\fP\&. Because it\(aqs not inside fish, it won\(aqt have access to fish functions and won\(aqt be able to time blocks and such.
.SS Example
.sp
(for obvious reasons exact results will vary on your system)
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>_ time sleep 1s

________________________________________________________
Executed in    1,01 secs   fish           external
   usr time    2,32 millis    0,00 micros    2,32 millis
   sys time    0,88 millis  877,00 micros    0,00 millis

>_ time for i in 1 2 3; sleep 1s; end

________________________________________________________
Executed in    3,01 secs   fish           external
   usr time    9,16 millis    2,94 millis    6,23 millis
   sys time    0,23 millis    0,00 millis    0,23 millis
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Inline variable assignments need to follow the \fBtime\fP keyword:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>_ time a_moment=1.5m sleep $a_moment

________________________________________________________
Executed in   90.00 secs      fish           external
   usr time    4.62 millis    4.62 millis    0.00 millis
   sys time    2.35 millis    0.41 millis    1.95 millis
.ft P
.fi
.UNINDENT
.UNINDENT
.SS trap \- perform an action when the shell receives a signal
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
trap [OPTIONS] [[ARG] REASON ... ]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBtrap\fP is a wrapper around the fish event delivery framework. It exists for backwards compatibility with POSIX shells. For other uses, it is recommended to define an event handler\&.
.sp
The following parameters are available:
.INDENT 0.0
.IP \(bu 2
\fBARG\fP is the command to be executed on signal delivery.
.IP \(bu 2
\fBREASON\fP is the name of the event to trap. For example, a signal like \fBINT\fP or \fBSIGINT\fP, or the special symbol \fBEXIT\fP\&.
.IP \(bu 2
\fB\-l\fP or \fB\-\-list\-signals\fP prints a list of signal names.
.IP \(bu 2
\fB\-p\fP or \fB\-\-print\fP prints all defined signal handlers.
.UNINDENT
.sp
If \fBARG\fP and \fBREASON\fP are both specified, \fBARG\fP is the command to be executed when the event specified by \fBREASON\fP occurs (e.g., the signal is delivered).
.sp
If \fBARG\fP is absent (and there is a single REASON) or \-, each specified signal is reset to its original disposition (the value it had upon entrance to the shell).  If \fBARG\fP is the null string the signal specified by each \fBREASON\fP is ignored by the shell and by the commands it invokes.
.sp
If \fBARG\fP is not present and \fB\-p\fP has been supplied, then the trap commands associated with each \fBREASON\fP are displayed. If no arguments are supplied or if only \fB\-p\fP is given, \fBtrap\fP prints the list of commands associated with each signal.
.sp
Signal names are case insensitive and the \fBSIG\fP prefix is optional.
.sp
The exit status is 1 if any \fBREASON\fP is invalid; otherwise trap returns 0.
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
trap "status \-\-print\-stack\-trace" SIGUSR1
# Prints a stack trace each time the SIGUSR1 signal is sent to the shell.
.ft P
.fi
.UNINDENT
.UNINDENT
.SS true \- return a successful result
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
true
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBtrue\fP sets the exit status to 0.
.SS See Also
.INDENT 0.0
.IP \(bu 2
false command
.IP \(bu 2
$status variable
.UNINDENT
.SS type \- indicate how a command would be interpreted
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
type [OPTIONS] NAME [NAME ...]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
With no options, \fBtype\fP indicates how each \fBNAME\fP would be interpreted if used as a command name.
.sp
The following options are available:
.INDENT 0.0
.IP \(bu 2
\fB\-a\fP or \fB\-\-all\fP prints all of possible definitions of the specified names.
.IP \(bu 2
\fB\-s\fP or \fB\-\-short\fP suppresses function expansion when used with no options or with \fB\-a\fP/\fB\-\-all\fP\&.
.IP \(bu 2
\fB\-f\fP or \fB\-\-no\-functions\fP suppresses function and builtin lookup.
.IP \(bu 2
\fB\-t\fP or \fB\-\-type\fP prints \fBfunction\fP, \fBbuiltin\fP, or \fBfile\fP if \fBNAME\fP is a shell function, builtin, or disk file, respectively.
.IP \(bu 2
\fB\-p\fP or \fB\-\-path\fP prints the path to \fBNAME\fP if \fBNAME\fP resolves to an executable file in $PATH, the path to the script containing the definition of the function \fBNAME\fP if \fBNAME\fP resolves to a function loaded from a file on disk (i.e. not interactively defined at the prompt), or nothing otherwise.
.IP \(bu 2
\fB\-P\fP or \fB\-\-force\-path\fP returns the path to the executable file \fBNAME\fP, presuming \fBNAME\fP is found in \fB$PATH\fP, or nothing otherwise. \fB\-\-force\-path\fP explicitly resolves only the path to executable files in \fB$PATH\fP, regardless of whether \fB$NAME\fP is shadowed by a function or builtin with the same name.
.IP \(bu 2
\fB\-q\fP or \fB\-\-query\fP suppresses all output; this is useful when testing the exit status. For compatibility with old fish versions this is also \fB\-\-quiet\fP\&.
.UNINDENT
.sp
The \fB\-q\fP, \fB\-p\fP, \fB\-t\fP and \fB\-P\fP flags (and their long flag aliases) are mutually exclusive. Only one can be specified at a time.
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>_ type fg
fg is a builtin
.ft P
.fi
.UNINDENT
.UNINDENT
.SS ulimit \- set or get resource usage limits
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ulimit [OPTIONS] [LIMIT]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBulimit\fP sets or outputs the resource usage limits of the shell and any processes spawned by it. If a new limit value is omitted, the current value of the limit of the resource is printed; otherwise, the specified limit is set to the new value.
.sp
Use one of the following switches to specify which resource limit to set or report:
.INDENT 0.0
.IP \(bu 2
\fB\-c\fP or \fB\-\-core\-size\fP: the maximum size of core files created. By setting this limit to zero, core dumps can be disabled.
.IP \(bu 2
\fB\-d\fP or \fB\-\-data\-size\fP: the maximum size of a process\(aq data segment.
.IP \(bu 2
\fB\-f\fP or \fB\-\-file\-size\fP: the maximum size of files created by the shell.
.IP \(bu 2
\fB\-l\fP or \fB\-\-lock\-size\fP: the maximum size that may be locked into memory.
.IP \(bu 2
\fB\-m\fP or \fB\-\-resident\-set\-size\fP: the maximum resident set size.
.IP \(bu 2
\fB\-n\fP or \fB\-\-file\-descriptor\-count\fP: the maximum number of open file descriptors (most systems do not allow this value to be set).
.IP \(bu 2
\fB\-s\fP or \fB\-\-stack\-size\fP: the maximum stack size.
.IP \(bu 2
\fB\-t\fP or \fB\-\-cpu\-time\fP: the maximum amount of CPU time in seconds.
.IP \(bu 2
\fB\-u\fP or \fB\-\-process\-count\fP: the maximum number of processes available to a single user.
.IP \(bu 2
\fB\-v\fP or \fB\-\-virtual\-memory\-size\fP The maximum amount of virtual memory available to the shell.
.UNINDENT
.sp
Note that not all these limits are available in all operating systems.
.sp
The value of limit can be a number in the unit specified for the resource or one of the special values \fBhard\fP, \fBsoft\fP, or \fBunlimited\fP, which stand for the current hard limit, the current soft limit, and no limit, respectively.
.sp
If limit is given, it is the new value of the specified resource. If no option is given, then \fB\-f\fP is assumed. Values are in kilobytes, except for \fB\-t\fP, which is in seconds and \fB\-n\fP and \fB\-u\fP, which are unscaled values. The exit status is 0 unless an invalid option or argument is supplied, or an error occurs while setting a new limit.
.sp
\fBulimit\fP also accepts the following switches that determine what type of limit to set:
.INDENT 0.0
.IP \(bu 2
\fB\-H\fP or \fB\-\-hard\fP sets hard resource limit
.IP \(bu 2
\fB\-S\fP or \fB\-\-soft\fP sets soft resource limit
.UNINDENT
.sp
A hard limit can only be decreased. Once it is set it cannot be increased; a soft limit may be increased up to the value of the hard limit. If neither \fB\-H\fP nor \fB\-S\fP is specified, both the soft and hard limits are updated when assigning a new limit value, and the soft limit is used when reporting the current value.
.sp
The following additional options are also understood by \fBulimit\fP:
.INDENT 0.0
.IP \(bu 2
\fB\-a\fP or \fB\-\-all\fP prints all current limits
.UNINDENT
.sp
The \fBfish\fP implementation of \fBulimit\fP should behave identically to the implementation in bash, except for these differences:
.INDENT 0.0
.IP \(bu 2
Fish \fBulimit\fP supports GNU\-style long options for all switches
.IP \(bu 2
Fish \fBulimit\fP does not support the \fB\-p\fP option for getting the pipe size. The bash implementation consists of a compile\-time check that empirically guesses this number by writing to a pipe and waiting for SIGPIPE. Fish does not do this because it this method of determining pipe size is unreliable. Depending on bash version, there may also be further additional limits to set in bash that do not exist in fish.
.IP \(bu 2
Fish \fBulimit\fP does not support getting or setting multiple limits in one command, except reporting all values using the \fB\-a\fP switch
.UNINDENT
.SS Example
.sp
\fBulimit \-Hs 64\fP sets the hard stack size limit to 64 kB.
.SS umask \- set or get the file creation mode mask
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
umask [OPTIONS] [MASK]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBumask\fP displays and manipulates the "umask", or file creation mode mask, which is used to restrict the default access to files.
.sp
The umask may be expressed either as an octal number, which represents the rights that will be removed by default, or symbolically, which represents the only rights that will be granted by default.
.sp
Access rights are explained in the manual page for the \fBchmod(1)\fP program.
.sp
With no parameters, the current file creation mode mask is printed as an octal number.
.INDENT 0.0
.IP \(bu 2
\fB\-h\fP or \fB\-\-help\fP prints this message.
.IP \(bu 2
\fB\-S\fP or \fB\-\-symbolic\fP prints the umask in symbolic form instead of octal form.
.IP \(bu 2
\fB\-p\fP or \fB\-\-as\-command\fP outputs the umask in a form that may be reused as input
.UNINDENT
.sp
If a numeric mask is specified as a parameter, the current shell\(aqs umask will be set to that value, and the rights specified by that mask will be removed from new files and directories by default.
.sp
If a symbolic mask is specified, the desired permission bits, and not the inverse, should be specified. A symbolic mask is a comma separated list of rights. Each right consists of three parts:
.INDENT 0.0
.IP \(bu 2
The first part specifies to whom this set of right applies, and can be one of \fBu\fP, \fBg\fP, \fBo\fP or \fBa\fP, where \fBu\fP specifies the user who owns the file, \fBg\fP specifies the group owner of the file, \fBo\fP specific other users rights and \fBa\fP specifies all three should be changed.
.IP \(bu 2
The second part of a right specifies the mode, and can be one of \fB=\fP, \fB+\fP or \fB\-\fP, where \fB=\fP specifies that the rights should be set to the new value, \fB+\fP specifies that the specified right should be added to those previously specified and \fB\-\fP specifies that the specified rights should be removed from those previously specified.
.IP \(bu 2
The third part of a right specifies what rights should be changed and can be any combination of \fBr\fP, \fBw\fP and \fBx\fP, representing read, write and execute rights.
.UNINDENT
.sp
If the first and second parts are skipped, they are assumed to be \fBa\fP and \fB=\fP, respectively. As an example, \fBr,u+w\fP means all users should have read access and the file owner should also have write access.
.sp
Note that symbolic masks currently do not work as intended.
.SS Example
.sp
\fBumask 177\fP or \fBumask u=rw\fP sets the file creation mask to read and write for the owner and no permissions at all for any other users.
.SS vared \- interactively edit the value of an environment variable
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
vared VARIABLE_NAME
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBvared\fP is used to interactively edit the value of an environment variable. Array variables as a whole can not be edited using \fBvared\fP, but individual list elements can.
.SS Example
.sp
\fBvared PATH[3]\fP edits the third element of the PATH list
.SS wait \- wait for jobs to complete
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
wait [\-n | \-\-any] [PID | PROCESS_NAME] ...
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBwait\fP waits for child jobs to complete.
.INDENT 0.0
.IP \(bu 2
If a pid is specified, the command waits for the job that the process with the pid belongs to.
.IP \(bu 2
If a process name is specified, the command waits for the jobs that the matched processes belong to.
.IP \(bu 2
If neither a pid nor a process name is specified, the command waits for all background jobs.
.IP \(bu 2
If the \fB\-n\fP / \fB\-\-any\fP flag is provided, the command returns as soon as the first job completes. If it is not provided, it returns after all jobs complete.
.UNINDENT
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
sleep 10 &
wait $last_pid
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
spawns \fBsleep\fP in the background, and then waits until it finishes.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
for i in (seq 1 5); sleep 10 &; end
wait
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
spawns five jobs in the background, and then waits until all of them finishes.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
for i in (seq 1 5); sleep 10 &; end
hoge &
wait sleep
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
spawns five jobs and \fBhoge\fP in the background, and then waits until all \fBsleep\fPs finish, and doesn\(aqt wait for \fBhoge\fP finishing.
.SS while \- perform a command multiple times
.SS Synopsis
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
while CONDITION; COMMANDS...; end
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Description
.sp
\fBwhile\fP repeatedly executes \fBCONDITION\fP, and if the exit status is 0, then executes \fBCOMMANDS\fP\&.
.sp
The exit status of the while loop is the exit status of the last iteration of the \fBCOMMANDS\fP executed, or 0 if none were executed. (This matches other shells and is POSIX\-compatible.)
.sp
You can use and or or for complex conditions. Even more complex control can be achieved with \fBwhile true\fP containing a break\&.
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
while test \-f foo.txt; or test \-f bar.txt ; echo file exists; sleep 10; end
# outputs \(aqfile exists\(aq at 10 second intervals,
# as long as the file foo.txt or bar.txt exists.
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fish for bash users
.sp
This is to give you a quick overview if you come from bash (or to a lesser extent other shells like zsh or ksh) and want to know how fish differs. Fish is intentionally not POSIX\-compatible and as such some of the things you are used to work differently.
.sp
Many things are similar \- they both fundamentally expand commandlines to execute commands, have pipes, redirections, variables, globs, use command output in various ways. This document is there to quickly show you the differences.
.SS Command substitutions
.sp
Fish spells command substitutions as \fB(command)\fP instead of \fB$(command)\fP (or \fB\(gacommand\(ga\fP).
.sp
In addition, it only splits them on newlines instead of $IFS. If you want to split on something else, use string split, string split0 or string collect\&. If those are used as the last command in a command substitution the splits they create are carried over. So:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
for i in (find . \-print0 | string split0)
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
will correctly handle all possible filenames.
.SS Variables
.sp
Fish sets and erases variables with set instead of \fBVAR=VAL\fP and \fBdeclare\fP and \fBunset\fP and \fBexport\fP\&. \fBset\fP takes options to determine the scope and exportedness of a variable:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# Define $PAGER global and exported, so this is like \(ga\(gaexport PAGER=less\(ga\(ga
set \-gx PAGER less

# Define $alocalvariable only locally \- like \(ga\(galocal alocalvariable=foo\(ga\(ga
set \-l alocalvariable foo
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
or to erase variables:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
set \-e PAGER
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBVAR=VAL\fP statements are available as environment overrides:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
PAGER=cat git log
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Fish does not perform word splitting. Once a variable has been set to a value, that value stays as it is, so double\-quoting variable expansions isn\(aqt the necessity it is in bash. [1]
.sp
For instance, here\(aqs bash
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> foo="bar baz"
> printf \(aq"%s"\en\(aq $foo # will print two lines, because we didn\(aqt double\-quote, so the variable is split
"bar"
"baz"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
And here is fish:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> set foo "bar baz"
> printf \(aq"%s"\en\(aq $foo # foo was set as one element, so it will be passed as one element, so this is one line
"bar baz"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
All variables are "arrays" (we use the term "lists"), and expanding a variable expands to all its elements, with each element as its own argument (like bash\(aqs \fB"${var[@]}"\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> set var "foo bar" banana
> printf %s\en $var
foo bar
banana
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Specific elements of a list can be selected:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
echo $list[5..7]
.ft P
.fi
.UNINDENT
.UNINDENT
.IP [1] 5
zsh also does not perform word splitting by default (the SH_WORD_SPLIT option controls this)
.SS Wildcards (globs)
.sp
Fish only supports the \fB*\fP and \fB**\fP glob (and the deprecated \fB?\fP glob). If a glob doesn\(aqt match it fails the command (like with bash\(aqs \fBfailglob\fP) unless the command is \fBfor\fP, \fBset\fP or \fBcount\fP or the glob is used with an environment override (\fBVAR=* command\fP), in which case it expands to nothing (like with bash\(aqs \fBnullglob\fP option).
.sp
Globbing doesn\(aqt happen on expanded variables, so:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
set foo "*"
echo $foo
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
will not match any files.
.sp
There are no options to control globbing so it always behaves like that.
.SS Quoting
.sp
Fish has two quoting styles: \fB""\fP and \fB\(aq\(aq\fP\&. Variables are expanded in double\-quotes, nothing is expanded in single\-quotes.
.sp
There is no \fB$\(aq\(aq\fP, instead the sequences that would transform are transformed \fIwhen unquoted\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> echo a\enb
a
b
.ft P
.fi
.UNINDENT
.UNINDENT
.SS String manipulation
.sp
Fish does not have \fB${foo%bar}\fP, \fB${foo#bar}\fP and \fB${foo/bar/baz}\fP\&. Instead string manipulation is done by the string builtin.
.SS Special variables
.sp
Some bash variables and their closest fish equivalent:
.INDENT 0.0
.IP \(bu 2
\fB$*\fP, \fB$@\fP, \fB$1\fP and so on: \fB$argv\fP
.IP \(bu 2
\fB$?\fP: \fB$status\fP
.IP \(bu 2
\fB$$\fP: \fB$fish_pid\fP
.IP \(bu 2
\fB$#\fP: No variable, instead use \fBcount $argv\fP
.IP \(bu 2
\fB$!\fP: \fB$last_pid\fP
.IP \(bu 2
\fB$0\fP: \fBstatus filename\fP
.IP \(bu 2
\fB$\-\fP: Mostly \fBstatus is\-interactive\fP and \fBstatus is\-login\fP
.UNINDENT
.SS Process substitution
.sp
Instead of \fB<(command)\fP fish uses \fB(command | psub)\fP\&. There is no equivalent to \fB>(command)\fP\&.
.sp
Note that both of these are bashisms, and most things can easily be expressed without. E.g. instead of:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
source (command | psub)
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
just use:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
command | source
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
as fish\(aqs source can read from stdin.
.SS Heredocs
.sp
Fish does not have \fB<<EOF\fP "heredocs". Instead of:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
cat <<EOF
some string
some more string
EOF
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
use:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
printf %s\en "some string" "some more string"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
or:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
echo "some string
some more string"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Quotes are followed across newlines.
.SS Test (\fBtest\fP, \fB[\fP, \fB[[\fP)
.sp
Fish has a POSIX\-compatible \fBtest\fP or \fB[\fP builtin. There is no \fB[[\fP and \fBtest\fP does not accept \fB==\fP as a synonym for \fB=\fP\&. It can compare floating point numbers, however.
.sp
\fBset \-q\fP can be used to determine if a variable exists or has a certain number of elements (\fBset \-q foo[2]\fP).
.SS Arithmetic Expansion
.sp
Fish does not have \fB$((i+1))\fP arithmetic expansion, computation is handled by math:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
math $i + 1
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
It can handle floating point numbers:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> math 5 / 2
2.5
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Prompts
.sp
Fish does not use the \fB$PS1\fP, \fB$PS2\fP and so on variables. Instead the prompt is the output of the fish_prompt function, plus the fish_mode_prompt function if vi\-mode is enabled and the fish_right_prompt function for the right prompt.
.sp
As an example, here\(aqs a relatively simple bash prompt:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# <$HOSTNAME> <$PWD in blue> <Prompt Sign in Yellow> <Rest in default light white>
export PS1=\(aq\eh\e[\ee[1;34m\e]\ew\e[\ee[m\e] \e[\ee[1;32m\e]\e$\e[\ee[m\e] \(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
and a rough fish equivalent:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function fish_prompt
    set \-l prompt_symbol \(aq$\(aq
    fish_is_root_user; and set prompt_symbol \(aq#\(aq

    echo \-s $hostname (set_color blue) (prompt_pwd) \e
    (set_color yellow) $prompt_symbol (set_color normal)
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This shows a few differences:
.INDENT 0.0
.IP \(bu 2
Fish provides set_color to color text. It can use the 16 named colors and also RGB sequences (so you could also use \fBset_color 5555FF\fP)
.IP \(bu 2
Instead of introducing specific escapes like \fB\eh\fP for the hostname, the prompt is simply a function, so you can use variables like \fB$hostname\fP\&.
.IP \(bu 2
Fish offers helper functions for adding things to the prompt, like fish_vcs_prompt for adding a display for common version control systems (git, mercurial, svn) and prompt_pwd for showing a shortened $PWD (the user\(aqs home directory becomes \fB~\fP and any path component is shortened).
.UNINDENT
.sp
The default prompt is reasonably full\-featured and its code can be read via \fBtype fish_prompt\fP\&.
.sp
Fish does not have \fB$PS2\fP for continuation lines, instead it leaves the lines indented to show that the commandline isn\(aqt complete yet.
.SS Blocks and loops
.sp
Fish\(aqs blocking constructs look a little different. They all start with a word, end in \fBend\fP and don\(aqt have a second starting word:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
for i in 1 2 3; do
   echo $i
done

# becomes

for i in 1 2 3
   echo $i
end

while true; do
   echo Weeee
done

# becomes

while true
   echo Weeeeeee
end

{
   echo Hello
}

# becomes

begin
   echo Hello
end

if true; then
   echo Yes I am true
else
   echo "How is true not true?"
fi

# becomes

if true
   echo Yes I am true
else
   echo "How is true not true?"
end

foo() {
   echo foo
}

# becomes

function foo
    echo foo
end

# (note that bash specifically allows the word "function" as an extension, but POSIX only specifies the form without, so it\(aqs more compatible to just use the form without)
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Fish does not have an \fBuntil\fP\&. Use \fBwhile not\fP or \fBwhile !\fP\&.
.SS Subshells
.sp
Bash has a feature called "subshells", where it will start another shell process for certain things. That shell will then be independent and e.g. any changes it makes to variables won\(aqt be visible in the main shell.
.sp
This includes things like:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# A list of commands in \(ga()\(ga parentheses
(foo; bar) | baz

# Both sides of a pipe
foo | while read \-r bar; do
    # This variable will not be visible outside of the while loop.
    VAR=VAL
    # This background process will not be, either
    baz &
done
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB()\fP subshells are often confused with \fB{}\fP grouping, which does \fInot\fP use a subshell. When you just need to group, you can use \fBbegin; end\fP in fish:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
(foo; bar) | baz
# when it should really have been:
{ foo; bar } | baz
# becomes
begin; foo; bar; end | baz
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The pipe will simply be run in the same process, so \fBwhile read\fP loops can set variables outside:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
foo | while read bar
    set \-g VAR VAL
    baz &
end

echo $VAR # will print VAL
jobs # will show "baz"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subshells are also frequently confused with \fI\%command substitutions\fP, which bash writes as \fB\(gacommand\(ga\fP or \fB$(command)\fP and fish writes as \fB(command)\fP\&. Bash also \fIuses\fP subshells to implement them.
.sp
The isolation can usually be achieved by just scoping variables (with \fBset \-l\fP), but if you really do need to run your code in a new shell environment you can always use \fBfish \-c \(aqyour code here\(aq\fP to do so explicitly.
.SS Builtins and other commands
.sp
By now it has become apparent that fish puts much more of a focus on its builtins and external commands rather than its syntax. So here are some helpful builtins and their rough equivalent in bash:
.INDENT 0.0
.IP \(bu 2
string \- this replaces most of the string transformation (\fB${i%foo}\fP et al) and can also be used instead of \fBgrep\fP and \fBsed\fP and such.
.IP \(bu 2
math \- this replaces \fB$((i + 1))\fP arithmetic and can also do floats and some simple functions (sine and friends).
.IP \(bu 2
argparse \- this can handle a script\(aqs option parsing, for which bash would probably use \fBgetopt\fP (zsh provides \fBzparseopts\fP).
.IP \(bu 2
count can be used to count things and therefore replaces \fB$#\fP and can be used instead of \fBwc\fP\&.
.IP \(bu 2
status provides information about the shell status, e.g. if it\(aqs interactive or what the current linenumber is. This replaces \fB$\-\fP and \fB$BASH_LINENO\fP and other variables.
.IP \(bu 2
\fBseq(1)\fP can be used as a replacement for \fB{1..10}\fP range expansion. If your OS doesn\(aqt ship a \fBseq\fP fish includes a replacement function.
.UNINDENT
.SS Tutorial
.SS Why fish?
.sp
Fish is a fully\-equipped command line shell (like bash or zsh) that is smart and user\-friendly. Fish supports powerful features like syntax highlighting, autosuggestions, and tab completions that just work, with nothing to learn or configure.
.sp
If you want to make your command line more productive, more useful, and more fun, without learning a bunch of arcane syntax and configuration options, then fish might be just what you\(aqre looking for!
.SS Getting started
.sp
Once installed, just type in \fBfish\fP into your current shell to try it out!
.sp
You will be greeted by the standard fish prompt,
which means you are all set up and can start using fish:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> fish
Welcome to fish, the friendly interactive shell
Type help for instructions on how to use fish
you@hostname ~>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This prompt that you see above is the fish default prompt: it shows your username, hostname, and working directory.
\- to change this prompt see how to change your prompt
\- to switch to fish permanently see \fI\%switch your default shell to fish\fP\&.
.sp
From now on, we\(aqll pretend your prompt is just a \fB>\fP to save space.
.SS Learning fish
.sp
This tutorial assumes a basic understanding of command line shells and Unix commands, and that you have a working copy of fish.
.sp
If you have a strong understanding of other shells, and want to know what fish does differently, search for the magic phrase \fIunlike other shells\fP, which is used to call out important differences.
.sp
Or, if you want a quick overview over the differences to other shells like Bash, see Fish For Bash Users\&.
.SS Running Commands
.sp
Fish runs commands like other shells: you type a command, followed by its arguments. Spaces are separators:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> echo hello world
hello world
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This runs the command \fBecho\fP with the arguments \fBhello\fP and \fBworld\fP\&. In this case that\(aqs the same as one argument \fBhello world\fP, but in many cases it\(aqs not. If you need to pass an argument that includes a space, you can escape with a backslash, or quote it using single or double quotes:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> mkdir My\e Files
# Makes a directory called "My Files", with a space in the name
> cp ~/Some\e File \(aqMy Files\(aq
# Copies a file called "Some File" in the home directory to "My Files"
> ls "My Files"
Some File
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Getting Help
.sp
Run \fBhelp\fP to open fish\(aqs help in a web browser, and \fBman\fP with the page (like \fBfish\-language\fP) to open it in a man page. You can also ask for help with a specific command, for example, \fBhelp set\fP to open in a web browser, or \fBman set\fP to see it in the terminal.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> man set
set \- handle shell variables
  Synopsis...
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Syntax Highlighting
.sp
You\(aqll quickly notice that fish performs syntax highlighting as you type. Invalid commands are colored red by default:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> /bin/mkd
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
A command may be invalid because it does not exist, or refers to a file that you cannot execute. When the command becomes valid, it is shown in a different color:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> /bin/mkdir
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Valid file paths are underlined as you type them:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> cat ~/somefi
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This tells you that there exists a file that starts with \fBsomefi\fP, which is useful feedback as you type.
.sp
These colors, and many more, can be changed by running \fBfish_config\fP, or by modifying color variables directly.
.SS Wildcards
.sp
Fish supports the familiar wildcard \fB*\fP\&. To list all JPEG files:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> ls *.jpg
lena.jpg
meena.jpg
santa maria.jpg
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
You can include multiple wildcards:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> ls l*.p*
lena.png
lesson.pdf
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Especially powerful is the recursive wildcard ** which searches directories recursively:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> ls /var/**.log
/var/log/system.log
/var/run/sntp.log
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If that directory traversal is taking a long time, you can \fBControl\fP+\fBC\fP out of it.
.sp
For more, see Wildcards\&.
.SS Pipes and Redirections
.sp
You can pipe between commands with the usual vertical bar:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> echo hello world | wc
      1       2      12
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
stdin and stdout can be redirected via the familiar \fB<\fP and \fB>\fP\&. stderr is redirected with a \fB2>\fP\&.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> grep fish < /etc/shells > ~/output.txt 2> ~/errors.txt
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
To redirect stdout and stderr into one file, you need to first redirect stdout, and then stderr into stdout:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> make > make_output.txt 2>&1
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
For more, see Input and output redirections and Pipes\&.
.SS Autosuggestions
.sp
As you type fish will suggest commands to the right of the cursor, in gray. For example:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> /bin/hostname
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
It knows about paths and options:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> grep \-\-ignore\-case
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
And history too. Type a command once, and you can re\-summon it by just typing a few letters:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> rsync \-avze ssh . myname@somelonghost.com:/some/long/path/doo/dee/doo/dee/doo
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
To accept the autosuggestion, hit \fB→\fP (right arrow) or \fBControl\fP+\fBF\fP\&. To accept a single word of the autosuggestion, \fBAlt\fP+\fB→\fP (right arrow). If the autosuggestion is not what you want, just ignore it.
.SS Tab Completions
.sp
A rich set of tab completions work "out of the box".
.sp
Press \fBTab\fP and fish will attempt to complete the command, argument, or path:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> /pri\fBTab\fP => /private/
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If there\(aqs more than one possibility, it will list them:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> ~/stuff/s\fBTab\fP
~/stuff/script.sh  (Executable, 4.8kB)  ~/stuff/sources/  (Directory)
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Hit tab again to cycle through the possibilities.
.sp
fish can also complete many commands, like git branches:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> git merge pr\fBTab\fP => git merge prompt_designer
> git checkout b\fBTab\fP
builtin_list_io_merge (Branch) builtin_set_color (Branch) busted_events (Tag)
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Try hitting tab and see what fish can do!
.SS Variables
.sp
Like other shells, a dollar sign followed by a variable name is replaced with the value of that variable:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> echo My home directory is $HOME
My home directory is /home/tutorial
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This is known as variable substitution, and it also happens in double quotes, but not single quotes:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> echo "My current directory is $PWD"
My current directory is /home/tutorial
> echo \(aqMy current directory is $PWD\(aq
My current directory is $PWD
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Unlike other shells, fish has no dedicated \fBVARIABLE=VALUE\fP syntax for setting variables. Instead it has an ordinary command: \fBset\fP, which takes a variable name, and then its value.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> set name \(aqMister Noodle\(aq
> echo $name
Mister Noodle
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
(Notice the quotes: without them, \fBMister\fP and \fBNoodle\fP would have been separate arguments, and \fB$name\fP would have been made into a list of two elements.)
.sp
Unlike other shells, variables are not further split after substitution:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> mkdir $name
> ls
Mister Noodle
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
In bash, this would have created two directories "Mister" and "Noodle". In fish, it created only one: the variable had the value "Mister Noodle", so that is the argument that was passed to \fBmkdir\fP, spaces and all. Other shells use the term "arrays", rather than lists.
.sp
You can erase (or "delete") a variable with \fB\-e\fP or \fB\-\-erase\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> set \-e MyVariable
> env | grep MyVariable
(no output)
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
For more, see Variable expansion\&.
.SS Exports (Shell Variables)
.sp
Sometimes you need to have a variable available to an external command, often as a setting. For example many programs like \fBgit\fP or \fBman\fP read the \fB$PAGER\fP variable to figure out your preferred pager (the program that lets you scroll text). Other variables used like this include \fB$BROWSER\fP, \fB$LANG\fP (to configure your language) and \fB$PATH\fP\&. You\(aqll note these are written in ALLCAPS, but that\(aqs just a convention.
.sp
To give a variable to an external command, it needs to be "exported". Unlike other shells, fish does not have an export command. Instead, a variable is exported via an option to \fBset\fP, either \fB\-\-export\fP or just \fB\-x\fP\&.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> set \-x MyVariable SomeValue
> env | grep MyVariable
MyVariable=SomeValue
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
It can also be unexported with \fB\-\-unexport\fP or \fB\-u\fP\&.
.sp
This works the other way around as well! If fish is started by something else, it inherits that parents exported variables. So if your terminal emulator starts fish, and it exports \fB$LANG\fP set to \fBen_US.UTF\-8\fP, fish will receive that setting. And whatever started your terminal emulator also gave \fIit\fP some variables that it will then pass on unless it specifically decides not to. This is how fish usually receives the values for things like \fB$LANG\fP, \fB$PATH\fP and \fB$TERM\fP, without you having to specify them again.
.sp
Exported variables can be local or global or universal \- "exported" is not a scope! Usually you\(aqd make them global via \fBset \-gx MyVariable SomeValue\fP\&.
.sp
For more, see Exporting variables\&.
.SS Lists
.sp
The \fBset\fP command above used quotes to ensure that \fBMister Noodle\fP was one argument. If it had been two arguments, then \fBname\fP would have been a list of length 2.  In fact, all variables in fish are really lists, that can contain any number of values, or none at all.
.sp
Some variables, like \fB$PWD\fP, only have one value. By convention, we talk about that variable\(aqs value, but we really mean its first (and only) value.
.sp
Other variables, like \fB$PATH\fP, really do have multiple values. During variable expansion, the variable expands to become multiple arguments:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> echo $PATH
/usr/bin /bin /usr/sbin /sbin /usr/local/bin
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Variables whose name ends in "PATH" are automatically split on colons to become lists. They are joined using colons when exported to subcommands. This is for compatibility with other tools, which expect $PATH to use colons. You can also explicitly add this quirk to a variable with \fBset \-\-path\fP, or remove it with \fBset \-\-unpath\fP\&.
.sp
Lists cannot contain other lists: there is no recursion.  A variable is a list of strings, full stop.
.sp
Get the length of a list with \fBcount\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> count $PATH
5
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
You can append (or prepend) to a list by setting the list to itself, with some additional arguments. Here we append /usr/local/bin to $PATH:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> set PATH $PATH /usr/local/bin
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
You can access individual elements with square brackets. Indexing starts at 1 from the beginning, and \-1 from the end:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> echo $PATH
/usr/bin /bin /usr/sbin /sbin /usr/local/bin
> echo $PATH[1]
/usr/bin
> echo $PATH[\-1]
/usr/local/bin
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
You can also access ranges of elements, known as "slices":
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> echo $PATH[1..2]
/usr/bin /bin
> echo $PATH[\-1..2]
/usr/local/bin /sbin /usr/sbin /bin
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
You can iterate over a list (or a slice) with a for loop:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> for val in $PATH
    echo "entry: $val"
  end
entry: /usr/bin/
entry: /bin
entry: /usr/sbin
entry: /sbin
entry: /usr/local/bin
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Lists adjacent to other lists or strings are expanded as cartesian products unless quoted (see Variable expansion):
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> set a 1 2 3
> set 1 a b c
> echo $a$1
1a 2a 3a 1b 2b 3b 1c 2c 3c
> echo $a" banana"
1 banana 2 banana 3 banana
> echo "$a banana"
1 2 3 banana
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This is similar to Brace expansion\&.
.sp
For more, see Lists\&.
.SS Command Substitutions
.sp
Command substitutions use the output of one command as an argument to another. Unlike other shells, fish does not use backticks \(ga\(ga for command substitutions. Instead, it uses parentheses:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> echo In (pwd), running (uname)
In /home/tutorial, running FreeBSD
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
A common idiom is to capture the output of a command in a variable:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> set os (uname)
> echo $os
Linux
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Command substitutions are not expanded within quotes. Instead, you can temporarily close the quotes, add the command substitution, and reopen them, all in the same argument:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> touch "testing_"(date +%s)".txt"
> ls *.txt
testing_1360099791.txt
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Unlike other shells, fish does not split command substitutions on any whitespace (like spaces or tabs), only newlines. This can be an issue with commands like \fBpkg\-config\fP that print what is meant to be multiple arguments on a single line. To split it on spaces too, use \fBstring split\fP\&.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> printf \(aq%s\en\(aq (pkg\-config \-\-libs gio\-2.0)
\-lgio\-2.0 \-lgobject\-2.0 \-lglib\-2.0
> printf \(aq%s\en\(aq (pkg\-config \-\-libs gio\-2.0 | string split \-n " ")
\-lgio\-2.0
\-lgobject\-2.0
\-lglib\-2.0
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If you need a command substitutions output as one argument, without any splits, use \fBstring collect\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> echo "first line
second line" > myfile
> set myfile (cat myfile | string collect)
> printf \(aq|%s|\(aq $myfile
|first line
second line|
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
For more, see Command substitution\&.
.SS Separating Commands (Semicolon)
.sp
Like other shells, fish allows multiple commands either on separate lines or the same line.
.sp
To write them on the same line, use the semicolon (";"). That means the following two examples are equivalent:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
echo fish; echo chips

# or
echo fish
echo chips
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Exit Status
.sp
When a command exits, it returns a status code as a non\-negative integer.
.sp
Unlike other shells, fish stores the exit status of the last command in \fB$status\fP instead of \fB$?\fP\&.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> false
> echo $status
1
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This indicates how the command fared \- 0 usually means success, while the others signify kinds of failure. For instance fish\(aqs \fBset \-\-query\fP returns the number of variables it queried that weren\(aqt set \- \fBset \-\-query PATH\fP usually returns 0, \fBset \-\-query arglbargl boogagoogoo\fP usually returns 2.
.sp
There is also a \fB$pipestatus\fP list variable for the exit statuses [1] of processes in a pipe.
.sp
For more, see The status variable\&.
.IP [1] 5
or "stati" if you prefer, or "statūs" if you\(aqve time\-travelled from ancient Rome or work as a latin teacher
.SS Combiners (And, Or, Not)
.sp
fish supports the familiar \fB&&\fP and \fB||\fP to combine commands, and \fB!\fP to negate them:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> ./configure && make && sudo make install
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Here, \fBmake\fP is only executed if \fB\&./configure\fP succeeds (returns 0), and \fBsudo make install\fP is only executed if both \fB\&./configure\fP and \fBmake\fP succeed.
.sp
fish also supports and, or, and not\&. The first two are job modifiers and have lower precedence. Example usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> cp file1 file1_bak && cp file2 file2_bak; and echo "Backup successful"; or echo "Backup failed"
Backup failed
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
As mentioned in \fI\%the section on the semicolon\fP, this can also be written in multiple lines, like so:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
cp file1 file1_bak && cp file2 file2_bak
and echo "Backup successful"
or echo "Backup failed"
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Conditionals (If, Else, Switch)
.sp
Use if and else to conditionally execute code, based on the exit status of a command.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
if grep fish /etc/shells
    echo Found fish
else if grep bash /etc/shells
    echo Found bash
else
    echo Got nothing
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
To compare strings or numbers or check file properties (whether a file exists or is writeable and such), use test, like
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
if test "$fish" = "flounder"
    echo FLOUNDER
end

# or

if test "$number" \-gt 5
    echo $number is greater than five
else
    echo $number is five or less
end

# or

# This test is true if the path /etc/hosts exists
# \- it could be a file or directory or symlink (or possibly something else).
if test \-e /etc/hosts
    echo We most likely have a hosts file
else
    echo We do not have a hosts file
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fI\%Combiners\fP can also be used to make more complex conditions, like
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
if grep fish /etc/shells; and command \-sq fish
    echo fish is installed and configured
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
For even more complex conditions, use begin and end to group parts of them.
.sp
There is also a switch command:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
switch (uname)
case Linux
    echo Hi Tux!
case Darwin
    echo Hi Hexley!
case FreeBSD NetBSD DragonFly
    echo Hi Beastie!
case \(aq*\(aq
    echo Hi, stranger!
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
As you see, case does not fall through, and can accept multiple arguments or (quoted) wildcards.
.sp
For more, see Conditions\&.
.SS Functions
.sp
A fish function is a list of commands, which may optionally take arguments. Unlike other shells, arguments are not passed in "numbered variables" like \fB$1\fP, but instead in a single list \fB$argv\fP\&. To create a function, use the function builtin:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> function say_hello
     echo Hello $argv
  end
> say_hello
Hello
> say_hello everybody!
Hello everybody!
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Unlike other shells, fish does not have aliases or special prompt syntax. Functions take their place. [2]
.sp
You can list the names of all functions with the functions builtin (note the plural!). fish starts out with a number of functions:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> functions
N_, abbr, alias, bg, cd, cdh, contains_seq, delete\-or\-exit, dirh, dirs, disown, down\-or\-search, edit_command_buffer, export, fg, fish_add_path, fish_breakpoint_prompt, fish_clipboard_copy, fish_clipboard_paste, fish_config, fish_default_key_bindings, fish_default_mode_prompt, fish_git_prompt, fish_hg_prompt, fish_hybrid_key_bindings, fish_indent, fish_is_root_user, fish_job_summary, fish_key_reader, fish_md5, fish_mode_prompt, fish_npm_helper, fish_opt, fish_print_git_action, fish_print_hg_root, fish_prompt, fish_sigtrap_handler, fish_svn_prompt, fish_title, fish_update_completions, fish_vcs_prompt, fish_vi_cursor, fish_vi_key_bindings, funced, funcsave, grep, help, history, hostname, isatty, kill, la, ll, ls, man, nextd, nextd\-or\-forward\-word, open, popd, prevd, prevd\-or\-backward\-word, prompt_hostname, prompt_pwd, psub, pushd, realpath, seq, setenv, suspend, trap, type, umask, up\-or\-search, vared, wait
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
You can see the source for any function by passing its name to \fBfunctions\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> functions ls
function ls \-\-description \(aqList contents of directory\(aq
    command ls \-G $argv
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
For more, see Functions\&.
.IP [2] 5
There is a function called alias, but it\(aqs just a shortcut to make functions.
.SS Loops
.sp
While loops:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> while true
    echo "Loop forever"
end
Loop forever
Loop forever
Loop forever
\&... # yes, this really will loop forever. Unless you abort it with ctrl\-c.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
For loops can be used to iterate over a list. For example, a list of files:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> for file in *.txt
    cp $file $file.bak
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Iterating over a list of numbers can be done with \fBseq\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> for x in (seq 5)
    touch file_$x.txt
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
For more, see Loops and blocks\&.
.SS Prompt
.sp
Unlike other shells, there is no prompt variable like \fBPS1\fP\&. To display your prompt, fish executes the fish_prompt function and uses its output as the prompt. And if it exists, fish also executes the fish_right_prompt function and uses its output as the right prompt.
.sp
You can define your own prompt from the command line:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> function fish_prompt; echo "New Prompt % "; end
New Prompt % _
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Then, if you are happy with it, you can save it to disk by typing \fBfuncsave fish_prompt\fP\&. This saves the prompt in \fB~/.config/fish/functions/fish_prompt.fish\fP\&. (Or, if you want, you can create that file manually from the start.)
.sp
Multiple lines are OK. Colors can be set via set_color, passing it named ANSI colors, or hex RGB values:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
function fish_prompt
    set_color purple
    date "+%m/%d/%y"
    set_color F00
    echo (pwd) \(aq>\(aq (set_color normal)
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This prompt would look like:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
02/06/13
/home/tutorial > _
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
You can choose among some sample prompts by running \fBfish_config\fP for a web UI or \fBfish_config prompt\fP for a simpler version inside your terminal.
.SS $PATH
.sp
\fB$PATH\fP is an environment variable containing the directories that fish searches for commands. Unlike other shells, $PATH is a \fI\%list\fP, not a colon\-delimited string.
.sp
Fish takes care to set \fB$PATH\fP to a default, but typically it is just inherited from fish\(aqs parent process and is set to a value that makes sense for the system \- see \fI\%Exports\fP\&.
.sp
To prepend /usr/local/bin and /usr/sbin to \fB$PATH\fP, you can write:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> set PATH /usr/local/bin /usr/sbin $PATH
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
To remove /usr/local/bin from \fB$PATH\fP, you can write:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> set PATH (string match \-v /usr/local/bin $PATH)
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
For compatibility with other shells and external commands, $PATH is a path variable, and so will be joined with colons (not spaces) when you quote it:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> echo "$PATH"
/usr/local/sbin:/usr/local/bin:/usr/bin
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
and it will be exported like that, and when fish starts it splits the $PATH it receives into a list on colon.
.sp
You can do so directly in \fBconfig.fish\fP, like you might do in other shells with \fB\&.profile\fP\&. See \fI\%this example\fP\&.
.sp
A faster way is to use the fish_add_path function, which adds given directories to the path if they aren\(aqt already included. It does this by modifying the \fB$fish_user_paths\fP \fI\%universal variable\fP, which is automatically prepended to \fB$PATH\fP\&. For example, to permanently add \fB/usr/local/bin\fP to your \fB$PATH\fP, you could write:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> fish_add_path /usr/local/bin
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The advantage is that you don\(aqt have to go mucking around in files: just run this once at the command line, and it will affect the current session and all future instances too. You can also add this line to \fI\%config.fish\fP, as it only adds the component if necessary.
.sp
Or you can modify $fish_user_paths yourself, but you should be careful \fInot\fP to append to it unconditionally in config.fish, or it will grow longer and longer.
.SS Startup (Where\(aqs .bashrc?)
.sp
Fish starts by executing commands in \fB~/.config/fish/config.fish\fP\&. You can create it if it does not exist.
.sp
It is possible to directly create functions and variables in \fBconfig.fish\fP file, using the commands shown above. For example:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> cat ~/.config/fish/config.fish

set \-x PATH $PATH /sbin/

function ll
    ls \-lh $argv
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
However, it is more common and efficient to use  autoloading functions and universal variables.
.sp
If you want to organize your configuration, fish also reads commands in .fish files in \fB~/.config/fish/conf.d/\fP\&. See Configuration Files for the details.
.SS Autoloading Functions
.sp
When fish encounters a command, it attempts to autoload a function for that command, by looking for a file with the name of that command in \fB~/.config/fish/functions/\fP\&.
.sp
For example, if you wanted to have a function \fBll\fP, you would add a text file \fBll.fish\fP to \fB~/.config/fish/functions\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> cat ~/.config/fish/functions/ll.fish
function ll
    ls \-lh $argv
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This is the preferred way to define your prompt as well:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> cat ~/.config/fish/functions/fish_prompt.fish
function fish_prompt
    echo (pwd) "> "
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
See the documentation for funced and funcsave for ways to create these files automatically, and $fish_function_path to control their location.
.SS Universal Variables
.sp
A universal variable is a variable whose value is shared across all instances of fish, now and in the future – even after a reboot. You can make a variable universal with \fBset \-U\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> set \-U EDITOR vim
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Now in another shell:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> echo $EDITOR
vim
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Switching to fish?
.sp
If you wish to use fish (or any other shell) as your default shell,
you need to enter your new shell\(aqs executable in two places.
.sp
Add the shell to \fB/etc/shells\fP with:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> echo /usr/local/bin/fish | sudo tee \-a /etc/shells
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Change your default shell with:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> chsh \-s /usr/local/bin/fish
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This assumes you installed fish to /usr/local/bin, which is the default location when you\(aqve compiled it yourself. If you installed it with a package manager, the usual location is /usr/bin/fish, but package managers typically already add it to /etc/shells. Just substitute the correct location.
.sp
(To change it back to another shell, just substitute \fB/usr/local/bin/fish\fP
with \fB/bin/bash\fP, \fB/bin/tcsh\fP or \fB/bin/zsh\fP as appropriate in the steps above.)
.SS Ready for more?
.sp
If you want to learn more about fish, there is lots of detailed documentation, the \fI\%official gitter channel\fP, an \fI\%official mailing list\fP, and the \fI\%github page\fP\&.
.SS Writing your own completions
.sp
To specify a completion, use the \fBcomplete\fP command. \fBcomplete\fP takes as a parameter the name of the command to specify a completion for. For example, to add a completion for the program \fBmyprog\fP, one would start the completion command with \fBcomplete \-c myprog ...\fP
.sp
To provide a list of possible completions for myprog, use the \fB\-a\fP switch. If \fBmyprog\fP accepts the arguments start and stop, this can be specified as \fBcomplete \-c myprog \-a \(aqstart stop\(aq\fP\&. The argument to the \fB\-a\fP switch is always a single string. At completion time, it will be tokenized on spaces and tabs, and variable expansion, command substitution and other forms of parameter expansion will take place.
.sp
\fBfish\fP has a special syntax to support specifying switches accepted by a command. The switches \fB\-s\fP, \fB\-l\fP and \fB\-o\fP are used to specify a short switch (single character, such as \fB\-l\fP), a gnu style long switch (such as \fB\-\-color\fP) and an old\-style long switch (like \fB\-shuffle\fP), respectively. If the command \(aqmyprog\(aq has an option \(aq\-o\(aq which can also be written as \fB\-\-output\fP, and which can take an additional value of either \(aqyes\(aq or \(aqno\(aq, this can be specified by writing:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
complete \-c myprog \-s o \-l output \-a "yes no"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
There are also special switches for specifying that a switch requires an argument, to disable filename completion, to create completions that are only available in some combinations, etc..  For a complete description of the various switches accepted by the \fBcomplete\fP command, see the documentation for the complete builtin, or write \fBcomplete \-\-help\fP inside the \fBfish\fP shell.
.sp
As a more comprehensive example, here\(aqs a commented excerpt of the completions for systemd\(aqs \fBtimedatectl\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# All subcommands that timedatectl knows \- this is useful for later.
set \-l commands status set\-time set\-timezone list\-timezones set\-local\-rtc set\-ntp

# Disable file completions for the entire command
# because it does not take files anywhere
# Note that this can be undone by using "\-F".
#
# File completions also need to be disabled
# if you want to have more control over what files are offered
# (e.g. just directories, or just files ending in ".mp3").
complete \-c timedatectl \-f

# This line offers the subcommands
# \-"status",
# \-"set\-timezone",
# \-"set\-time"
# \-"list\-timezones"
# if no subcommand has been given so far.
#
# The \(ga\-n\(ga/\(ga\-\-condition\(ga option takes script as a string, which it executes.
# If it returns true, the completion is offered.
# Here the condition is the \(ga__fish_seen_subcommands_from\(ga helper function.
# If returns true if any of the given commands is used on the commandline,
# as determined by a simple heuristic.
# For more complex uses, you can write your own function.
# See e.g. the git completions for an example.
#
complete \-c timedatectl \-n "not __fish_seen_subcommand_from $commands" \e
    \-a "status set\-time set\-timezone list\-timezones"

# If the "set\-timezone" subcommand is used,
# offer the output of \(gatimedatectl list\-timezones\(ga as completions.
# Each line of output is used as a separate candidate,
# and anything after a tab is taken as the description.
# It\(aqs often useful to transform command output with \(gastring\(ga into that form.
complete \-c timedatectl \-n "__fish_seen_subcommand_from set\-timezone" \e
    \-a "(timedatectl list\-timezones)"

# Completion candidates can also be described via \(ga\-d\(ga,
# which is useful if the description is constant.
# Try to keep these short, because that means the user gets to see more at once.
complete \-c timedatectl \-n "not __fish_seen_subcommand_from $commands" \e
    \-a "set\-local\-rtc" \-d "Maintain RTC in local time"

# We can also limit options to certain subcommands by using conditions.
complete \-c timedatectl \-n "__fish_seen_subcommand_from set\-local\-rtc" \e
    \-l adjust\-system\-clock \-d \(aqSynchronize system clock from the RTC\(aq

# These are simple options that can be used everywhere.
complete \-c timedatectl \-s h \-l help \-d \(aqPrint a short help text and exit\(aq
complete \-c timedatectl \-l version \-d \(aqPrint a short version string and exit\(aq
complete \-c timedatectl \-l no\-pager \-d \(aqDo not pipe output into a pager\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
For examples of how to write your own complex completions, study the completions in \fB/usr/share/fish/completions\fP\&. (The exact path depends on your chosen installation prefix and may be slightly different)
.SS Useful functions for writing completions
.sp
\fBfish\fP ships with several functions that are very useful when writing command specific completions. Most of these functions name begins with the string \fB__fish_\fP\&. Such functions are internal to \fBfish\fP and their name and interface may change in future fish versions. Still, some of them may be very useful when writing completions. A few of these functions are described here. Be aware that they may be removed or changed in future versions of fish.
.sp
Functions beginning with the string \fB__fish_print_\fP print a newline separated list of strings. For example, \fB__fish_print_filesystems\fP prints a list of all known file systems. Functions beginning with \fB__fish_complete_\fP print out a newline separated list of completions with descriptions. The description is separated from the completion by a tab character.
.INDENT 0.0
.IP \(bu 2
\fB__fish_complete_directories STRING DESCRIPTION\fP performs path completion on STRING, allowing only directories, and giving them the description DESCRIPTION.
.IP \(bu 2
\fB__fish_complete_path STRING DESCRIPTION\fP performs path completion on STRING, giving them the description DESCRIPTION.
.IP \(bu 2
\fB__fish_complete_groups\fP prints a list of all user groups with the groups members as description.
.IP \(bu 2
\fB__fish_complete_pids\fP prints a list of all processes IDs with the command name as description.
.IP \(bu 2
\fB__fish_complete_suffix SUFFIX\fP performs file completion but sorts files ending in SUFFIX first. This is useful in conjunction with \fBcomplete \-\-keep\-order\fP\&.
.IP \(bu 2
\fB__fish_complete_users\fP prints a list of all users with their full name as description.
.IP \(bu 2
\fB__fish_print_filesystems\fP prints a list of all known file systems. Currently, this is a static list, and not dependent on what file systems the host operating system actually understands.
.IP \(bu 2
\fB__fish_print_hostnames\fP prints a list of all known hostnames. This functions searches the fstab for nfs servers, ssh for known hosts and checks the \fB/etc/hosts\fP file.
.IP \(bu 2
\fB__fish_print_interfaces\fP prints a list of all known network interfaces.
.IP \(bu 2
\fB__fish_print_packages\fP prints a list of all installed packages. This function currently handles Debian, rpm and Gentoo packages.
.UNINDENT
.SS Where to put completions
.sp
Completions can be defined on the commandline or in a configuration file, but they can also be automatically loaded. Fish automatically searches through any directories in the list variable \fB$fish_complete_path\fP, and any completions defined are automatically loaded when needed. A completion file must have a filename consisting of the name of the command to complete and the suffix \fB\&.fish\fP\&.
.sp
By default, Fish searches the following for completions, using the first available file that it finds:
.INDENT 0.0
.IP \(bu 2
A directory for end\-users to keep their own completions, usually \fB~/.config/fish/completions\fP (controlled by the \fBXDG_CONFIG_HOME\fP environment variable);
.IP \(bu 2
A directory for systems administrators to install completions for all users on the system, usually \fB/etc/fish/completions\fP;
.IP \(bu 2
A directory for third\-party software vendors to ship their own completions for their software, usually \fB/usr/share/fish/vendor_completions.d\fP;
.IP \(bu 2
The completions shipped with fish, usually installed in \fB/usr/share/fish/completions\fP; and
.IP \(bu 2
Completions automatically generated from the operating system\(aqs manual, usually stored in \fB~/.local/share/fish/generated_completions\fP\&.
.UNINDENT
.sp
These paths are controlled by parameters set at build, install, or run time, and may vary from the defaults listed above.
.sp
This wide search may be confusing. If you are unsure, your completions probably belong in \fB~/.config/fish/completions\fP\&.
.sp
If you have written new completions for a common Unix command, please consider sharing your work by submitting it via the instructions in Further help and development
.sp
If you are developing another program and would like to ship completions with your program, install them to the "vendor" completions directory. As this path may vary from system to system, the \fBpkgconfig\fP framework should be used to discover this path with the output of \fBpkg\-config \-\-variable completionsdir fish\fP\&.
.SS Design
.sp
This is a description of the design principles that have been used to design fish. The fish design has three high level goals. These are:
.INDENT 0.0
.IP 1. 3
Everything that can be done in other shell languages should be possible to do in fish, though fish may rely on external commands in doing so.
.IP 2. 3
Fish should be user friendly, but not at the expense of expressiveness. Most tradeoffs between power and ease of use can be avoided with careful design.
.IP 3. 3
Whenever possible without breaking the above goals, fish should follow the Posix syntax.
.UNINDENT
.sp
To achieve these high\-level goals, the fish design relies on a number of more specific design principles. These are presented below, together with a rationale and a few examples for each.
.SS The law of orthogonality
.sp
The shell language should have a small set of orthogonal features. Any situation where two features are related but not identical, one of them should be removed, and the other should be made powerful and general enough to handle all common use cases of either feature.
.sp
Rationale:
Related features make the language larger, which makes it harder to learn. It also increases the size of the source code, making the program harder to maintain and update.
.sp
Examples:
.INDENT 0.0
.IP \(bu 2
Here documents are too similar to using echo inside of a pipeline.
.IP \(bu 2
Subshells, command substitution and process substitution are strongly related. \fBfish\fP only supports command substitution, the others can be achieved either using a block or the psub shellscript function.
.IP \(bu 2
Having both aliases and functions is confusing, especially since both of them have limitations and problems. \fBfish\fP functions have none of the drawbacks of either syntax.
.IP \(bu 2
The many Posix quoting styles are silly, especially \fB$\fP\&.
.UNINDENT
.SS The law of responsiveness
.sp
The shell should attempt to remain responsive to the user at all times, even in the face of contended or unresponsive filesystems. It is only acceptable to block in response to a user initiated action, such as running a command.
.sp
Rationale:
Bad performance increases user\-facing complexity, because it trains users to recognize and route around slow use cases. It is also incredibly frustrating.
.sp
Examples:
.INDENT 0.0
.IP \(bu 2
Features like syntax highlighting and autosuggestions must perform all of their disk I/O asynchronously.
.IP \(bu 2
Startup should minimize forks and disk I/O, so that fish can be started even if the system is under load.
.UNINDENT
.SS Configurability is the root of all evil
.sp
Every configuration option in a program is a place where the program is too stupid to figure out for itself what the user really wants, and should be considered a failure of both the program and the programmer who implemented it.
.sp
Rationale:
Different configuration options are a nightmare to maintain, since the number of potential bugs caused by specific configuration combinations quickly becomes an issue. Configuration options often imply assumptions about the code which change when reimplementing the code, causing issues with backwards compatibility. But mostly, configuration options should be avoided since they simply should not exist, as the program should be smart enough to do what is best, or at least a good enough approximation of it.
.sp
Examples:
.INDENT 0.0
.IP \(bu 2
Fish allows the user to set various syntax highlighting colors. This is needed because fish does not know what colors the terminal uses by default, which might make some things unreadable. The proper solution would be for text color preferences to be defined centrally by the user for all programs, and for the terminal emulator to send these color properties to fish.
.IP \(bu 2
Fish does not allow you to set the number of history entries, different language substyles or any number of other common shell configuration options.
.UNINDENT
.sp
A special note on the evils of configurability is the long list of very useful features found in some shells, that are not turned on by default. Both zsh and bash support command\-specific completions, but no such completions are shipped with bash by default, and they are turned off by default in zsh. Other features that zsh supports that are disabled by default include tab\-completion of strings containing wildcards, a sane completion pager and a history file.
.SS The law of user focus
.sp
When designing a program, one should first think about how to make an intuitive and powerful program. Implementation issues should only be considered once a user interface has been designed.
.sp
Rationale:
This design rule is different than the others, since it describes how one should go about designing new features, not what the features should be. The problem with focusing on what can be done, and what is easy to do, is that too much of the implementation is exposed. This means that the user must know a great deal about the underlying system to be able to guess how the shell works, it also means that the language will often be rather low\-level.
.sp
Examples:
.INDENT 0.0
.IP \(bu 2
There should only be one type of input to the shell, lists of commands. Loops, conditionals and variable assignments are all performed through regular commands.
.IP \(bu 2
The differences between built\-in commands and shellscript functions should be made as small as possible. Built\-ins and shellscript functions should have exactly the same types of argument expansion as other commands, should be possible to use in any position in a pipeline, and should support any I/O redirection.
.IP \(bu 2
Instead of forking when performing command substitution to provide a fake variable scope, all fish commands are performed from the same process, and fish instead supports true scoping.
.IP \(bu 2
All blocks end with the \fBend\fP built\-in.
.UNINDENT
.SS The law of discoverability
.sp
A program should be designed to make its features as easy as possible to discover for the user.
.sp
Rationale:
A program whose features are discoverable turns a new user into an expert in a shorter span of time, since the user will become an expert on the program simply by using it.
.sp
The main benefit of a graphical program over a command\-line\-based program is discoverability. In a graphical program, one can discover all the common features by simply looking at the user interface and guessing what the different buttons, menus and other widgets do. The traditional way to discover features in command\-line programs is through manual pages. This requires both that the user starts to use a different program, and then they remember the new information until the next time they use the same program.
.sp
Examples:
.INDENT 0.0
.IP \(bu 2
Everything should be tab\-completable, and every tab completion should have a description.
.IP \(bu 2
Every syntax error and error in a built\-in command should contain an error message describing what went wrong and a relevant help page. Whenever possible, errors should be flagged red by the syntax highlighter.
.IP \(bu 2
The help manual should be easy to read, easily available from the shell, complete and contain many examples
.IP \(bu 2
The language should be uniform, so that once the user understands the command/argument syntax, they will know the whole language, and be able to use tab\-completion to discover new features.
.UNINDENT
.SS Release notes
.SS fish 3.3.1 (released July 6, 2021)
.sp
This release of fish fixes the following problems identified in fish 3.3.0:
.INDENT 0.0
.IP \(bu 2
The prompt and command line are redrawn correctly in response to universal variable changes (\fI\%#8088\fP).
.IP \(bu 2
A superfluous error that was produced when setting the \fBPATH\fP or \fBCDPATH\fP environment variables to include colon\-delimited components that do not exist was removed (\fI\%#8095\fP).
.IP \(bu 2
The Vi mode indicator in the prompt is repainted correctly after \fBCtrl\-C\fP cancels the current command (\fI\%#8103\fP).
.IP \(bu 2
fish builds correctly on platforms that do not have a \fBspawn.h\fP header, such as old versions of OS X (\fI\%#8097\fP).
.UNINDENT
.sp
A number of improvements to the documentation, and fixes for completions, are included as well.
.sp
If you are upgrading from version 3.2.2 or before, please also review the release notes for 3.3.0 (included below).

.sp
.ce
----

.ce 0
.sp
.SS fish 3.3.0 (released June 28, 2021)
.SS Notable improvements and fixes
.INDENT 0.0
.IP \(bu 2
\fBfish_config\fP gained a \fBprompt\fP subcommand to show and pick from the sample prompts directly in the terminal, instead of having to open a webbrowser. For example \fBfish_config prompt choose default\fP loads the default prompt in the current session (\fI\%#7958\fP).
.IP \(bu 2
The documentation has been reorganized to be easier to understand (\fI\%#7773\fP).
.UNINDENT
.SS Deprecations and removed features
.INDENT 0.0
.IP \(bu 2
The \fB$fish_history\fP value "default" is no longer special. It used to be treated the same as "fish" (\fI\%#7650\fP).
.IP \(bu 2
Redirection to standard error with the \fB^\fP character has been disabled by default. It can be turned back on using the \fBstderr\-nocaret\fP feature flag, but will eventually be disabled completely (\fI\%#7105\fP).
.IP \(bu 2
Specifying an initial tab to \fBfish_config\fP now only works with \fBfish_config browse\fP (e.g. \fBfish_config browse variables\fP), otherwise it would interfere with the new \fBprompt\fP subcommand (see below) (\fI\%#7958\fP).
.UNINDENT
.SS Scripting improvements
.INDENT 0.0
.IP \(bu 2
\fBmath\fP gained new functions \fBlog2\fP (like the documentation claimed), \fBmax\fP and \fBmin\fP (\fI\%#7856\fP). \fBmath\fP functions can be used without the parentheses (eg \fBmath sin 2 + 6\fP), and functions have the lowest precedence in the order of operations (\fI\%#7877\fP).
.IP \(bu 2
Shebang (\fB#!\fP) lines are no longer required within shell scripts, improving support for scripts with concatenated binary contents. If a file fails to execute and passes a (rudimentary) binary safety check, fish will re\-invoke it using \fB/bin/sh\fP (\fI\%#7802\fP).
.IP \(bu 2
Exit codes are better aligned with bash. A failed execution now reports \fB$status\fP of 127 if the file is not found, and 126 if it is not executable.
.IP \(bu 2
\fBecho\fP no longer writes its output one byte at a time, improving performance and allowing use with Linux\(aqs special API files (\fB/proc\fP, \fB/sys\fP and such) (\fI\%#7836\fP).
.IP \(bu 2
fish should now better handle \fBcd\fP on filesystems with broken \fBstat(3)\fP responses (\fI\%#7577\fP).
.IP \(bu 2
Builtins now properly report a \fB$status\fP of 1 upon unsuccessful writes (\fI\%#7857\fP).
.IP \(bu 2
\fBstring match\fP with unmatched capture groups and without the \fB\-\-all\fP flag now sets an empty variable instead of a variable containing the empty string. It also correctly imports the first match if multiple arguments are provided, matching the documentation. (\fI\%#7938\fP).
.IP \(bu 2
fish produces more specific errors when a command in a command substitution wasn\(aqt found or is not allowed. This now prints something like "Unknown command" instead of "Unknown error while evaluating command substitution".
.IP \(bu 2
\fBfish_indent\fP allows inline variable assignments (\fBFOO=BAR command\fP) to use line continuation, instead of joining them into one line (\fI\%#7955\fP).
.IP \(bu 2
fish gained a \fB\-\-no\-config\fP option to disable configuration files. This applies to user\-specific and the systemwide \fBconfig.fish\fP (typically in \fB/etc/fish/config.fish\fP), and configuration snippets (typically in \fBconf.d\fP directories). It also disables universal variables, history, and loading of functions from system or user configuration directories (\fI\%#7921\fP, \fI\%#1256\fP).
.IP \(bu 2
When universal variables are unavailable for some reason, setting a universal variable now sets a global variable instead (\fI\%#7921\fP).
.IP \(bu 2
\fB$last_pid\fP now contains the process ID of the last process in the pipeline, allowing it to be used in scripts (\fI\%#5036\fP, \fI\%#5832\fP, \fI\%#7721\fP). Previously, this value contained the process group ID, but in scripts this was the same as the running fish\(aqs process ID.
.IP \(bu 2
\fBprocess\-exit\fP event handlers now receive the same value as \fB$status\fP in all cases, instead of receiving \-1 when the exit was due to a signal.
.IP \(bu 2
\fBprocess\-exit\fP event handlers for PID 0 also received \fBJOB_EXIT\fP events; this has been fixed.
.IP \(bu 2
\fBjob\-exit\fP event handlers may now be created with any of the PIDs from the job. The handler is passed the last PID in the job as its second argument, instead of the process group.
.IP \(bu 2
Trying to set an empty variable name with \fBset\fP no longer works (these variables could not be used in expansions anyway).
.IP \(bu 2
\fBfish_add_path\fP handles an undefined \fBPATH\fP environment variable correctly (\fI\%#8082\fP).
.UNINDENT
.SS Interactive improvements
.INDENT 0.0
.IP \(bu 2
Commands entered before the previous command finishes will now be properly syntax highlighted.
.IP \(bu 2
fish now automatically creates \fBconfig.fish\fP and the configuration directories in \fB$XDG_CONFIG_HOME/fish\fP (by default \fB~/.config/fish\fP) if they do not already exist (\fI\%#7402\fP).
.IP \(bu 2
\fB$SHLVL\fP is no longer incremented in non\-interactive shells. This means it won\(aqt be set to values larger than 1 just because your environment happens to run some scripts in $SHELL in its startup path (\fI\%#7864\fP).
.IP \(bu 2
fish no longer rings the bell when flashing the command line. The flashing should already be enough notification and the bell can be annoying (\fI\%#7875\fP).
.IP \(bu 2
\fBfish \-\-help\fP is more helpful if the documentation isn\(aqt installed (\fI\%#7824\fP).
.IP \(bu 2
\fBfunced\fP won\(aqt include an entry on where a function is defined, thanks to the new \fBfunctions \-\-no\-details\fP option (\fI\%#7879\fP).
.IP \(bu 2
A new variable, \fBfish_killring\fP, containing entries from the killring, is now available (\fI\%#7445\fP).
.IP \(bu 2
\fBfish \-\-private\fP prints a note on private mode on startup even if \fB$fish_greeting\fP is an empty list (\fI\%#7974\fP).
.IP \(bu 2
fish no longer attempts to lock history or universal variable files on remote filesystems, including NFS and Samba mounts. In rare cases, updates to these files may be dropped if separate fish instances modify them simultaneously. (\fI\%#7968\fP).
.IP \(bu 2
\fBwait\fP and \fBon\-process\-exit\fP work correctly with jobs that have already exited (\fI\%#7210\fP).
.IP \(bu 2
\fB__fish_print_help\fP (used for \fB\-\-help\fP output for fish\(aqs builtins) now respects the \fBLESS\fP environment variable, and if not set, uses better default pager settings (\fI\%#7997\fP).
.IP \(bu 2
Errors from \fBalias\fP are now printed to standard error, matching other builtins and functions (\fI\%#7925\fP).
.IP \(bu 2
\fBls\fP output is colorized on OpenBSD if colorls utility is installed (\fI\%#8035\fP)
.IP \(bu 2
The default pager color looks better in terminals with light backgrounds (\fI\%#3412\fP).
.IP \(bu 2
Further robustness improvements to the bash history import (\fI\%#7874\fP).
.IP \(bu 2
fish now tries to find a Unicode\-aware locale for encoding (\fBLC_CTYPE\fP) if started without any locale information, improving the display of emoji and other non\-ASCII text on misconfigured systems (\fI\%#8031\fP). To allow a C locale, set the variable \fBfish_allow_singlebyte_locale\fP to 1.
.IP \(bu 2
The Web\-based configuration and documentation now feature a dark mode if the browser requests it (\fI\%#8043\fP).
.IP \(bu 2
Color variables can now also be given like \fB\-\-background red\fP and \fB\-b red\fP, not just \fB\-\-background=red\fP (\fI\%#8053\fP).
.IP \(bu 2
\fBexit\fP run within \fBfish_prompt\fP now exits properly (\fI\%#8033\fP).
.IP \(bu 2
When attempting to execute the unsupported POSIX\-style brace command group (\fB{ ... }\fP) fish will suggest its equivalent \fBbegin; ...; end\fP commands (\fI\%#6415\fP).
.UNINDENT
.SS New or improved bindings
.INDENT 0.0
.IP \(bu 2
Pasting in Vi mode puts text in the right place in normal mode (\fI\%#7847\fP).
.IP \(bu 2
Vi mode\(aqs \fBu\fP is bound to \fBundo\fP instead of \fBhistory\-search\-backward\fP, following GNU readline\(aqs behavior. Similarly, \fBControl\-R\fP is bound to \fBredo\fP instead of \fBhistory\-search\-backward\fP, following Vim (\fI\%#7908\fP).
.IP \(bu 2
\fBs\fP in Vi visual mode now does the same thing as \fBc\fP (\fI\%#8039\fP).
.IP \(bu 2
The binding for \fB"*y\fP now uses \fBfish_clipboard_copy\fP, allowing it to support more than just \fBxsel\fP\&.
.IP \(bu 2
The \fBControl\-Space\fP binding can be correctly customised (\fI\%#7922\fP).
.IP \(bu 2
\fBexit\fP works correctly in bindings (\fI\%#7967\fP).
.IP \(bu 2
The \fBF1\fP binding, which opens the manual page for the current command, now works around a bug in certain \fBless\fP versions that fail to clear the screen (\fI\%#7863\fP).
.IP \(bu 2
The binding for \fBAlt\-S\fP now toggles whether \fBsudo\fP is prepended, even when it took the commandline from history instead of only adding it.
.IP \(bu 2
The new functions \fBfish_commandline_prepend\fP and \fBfish_commandline_append\fP allow toggling the presence of a prefix/suffix on the current commandline. (\fI\%#7905\fP).
.IP \(bu 2
\fBbackward\-kill\-path\-component\fP \fBControl\-W\fP) no longer erases parts of two tokens when the cursor is positioned immediately after \fB/\fP\&. (\fI\%#6258\fP).
.UNINDENT
.SS Improved prompts
.INDENT 0.0
.IP \(bu 2
The default Vi mode prompt now uses foreground instead of background colors, making it less obtrusive (\fI\%#7880\fP).
.IP \(bu 2
Performance of the "informative" git prompt is improved somewhat (\fI\%#7871\fP). This is still slower than the non\-informative version by its very nature. In particular it is IO\-bound, so it will be very slow on slow disks or network mounts.
.IP \(bu 2
The sample prompts were updated. Some duplicated prompts, like the various classic variants, or less useful ones, like the "justadollar" prompt were removed, some prompts were cleaned up, and in some cases renamed. A new "simple" and "disco" prompt were added (\fI\%#7884\fP, \fI\%#7897\fP, \fI\%#7930\fP). The new prompts will only take effect when selected and existing installed prompts will remain unchanged.
.IP \(bu 2
A new \fBprompt_login\fP helper function to describe the kind of "login" (user, host and chroot status) for use in prompts. This replaces the old "debian chroot" prompt and has been added to the default and terlar prompts (\fI\%#7932\fP).
.IP \(bu 2
The Web\-based configuration\(aqs prompt picker now shows and installs right prompts (\fI\%#7930\fP).
.IP \(bu 2
The git prompt now has the same symbol order in normal and "informative" mode, and it\(aqs customizable via \fB$__fish_git_prompt_status_order\fP (\fI\%#7926\fP).
.UNINDENT
.SS Completions
.INDENT 0.0
.IP \(bu 2
Added completions for:
.INDENT 2.0
.IP \(bu 2
\fBfirewall\-cmd\fP (\fI\%#7900\fP)
.IP \(bu 2
\fBsv\fP (\fI\%#8069\fP)
.UNINDENT
.IP \(bu 2
Improvements to plenty of completions!
.IP \(bu 2
Commands that wrap \fBcd\fP (using \fBcomplete \-\-wraps cd\fP) get the same completions as \fBcd\fP (\fI\%#4693\fP).
.IP \(bu 2
The \fB\-\-force\-files\fP option to \fBcomplete\fP works for bare arguments, not just options (\fI\%#7920\fP).
.IP \(bu 2
Completion descriptions for functions don\(aqt include the function definition, making them more concise (\fI\%#7911\fP).
.IP \(bu 2
The \fBkill\fP completions no longer error on MSYS2 (\fI\%#8046\fP).
.IP \(bu 2
Completion scripts are now loaded when calling a command via a relative path (like \fB\&./git\fP) (\fI\%#6001\fP, \fI\%#7992\fP).
.IP \(bu 2
When there are multiple completion candidates, fish inserts their shared prefix. This prefix was computed in a case\-insensitive way, resulting in wrong case in the completion pager. This was fixed by only inserting prefixes with matching case (\fI\%#7744\fP).
.UNINDENT
.SS Improved terminal support
.INDENT 0.0
.IP \(bu 2
fish no longer tries to detect a missing new line during startup, preventing an erroneous \fB⏎\fP from appearing if the terminal is resized at the wrong time, which can happen in tiling window managers (\fI\%#7893\fP).
.IP \(bu 2
fish behaves better when it disagrees with the terminal on the width of characters. In particular, staircase effects with right prompts should be gone in most cases (\fI\%#8011\fP).
.IP \(bu 2
If the prompt takes up the entire line, the last character should no longer be chopped off in certain terminals (\fI\%#8002\fP).
.IP \(bu 2
fish\(aqs reflow handling has been disabled by default for kitty (\fI\%#7961\fP).
.IP \(bu 2
The default prompt no longer produces errors when used with a dumb terminal (\fI\%#7904\fP).
.IP \(bu 2
Terminal size variables are updated for window size change signal handlers (\fBSIGWINCH\fP).
.IP \(bu 2
Pasting within a multi\-line command using a terminal that supports bracketed paste works correctly, instead of producing an error (\fI\%#7782\fP).
.IP \(bu 2
\fBset_color\fP produces an error when used with invalid arguments, rather than empty output which interacts badly with Cartesian product expansion.
.UNINDENT
.SS For distributors
.INDENT 0.0
.IP \(bu 2
fish runs correctly on platforms without the \fBO_CLOEXEC\fP flag for \fBopen(2)\fP (\fI\%#8023\fP).
.UNINDENT

.sp
.ce
----

.ce 0
.sp
.SS fish 3.2.2 (released April 7, 2021)
.sp
This release of fish fixes a number of additional issues identified in the fish 3.2 series:
.INDENT 0.0
.IP \(bu 2
The command\-not\-found handler used suggestions from \fBpacman\fP on Arch Linux, but this caused major slowdowns on some systems and has been disabled (\fI\%#7841\fP).
.IP \(bu 2
fish will no longer hang on exit if another process is in the foreground on macOS (\fI\%#7901\fP).
.IP \(bu 2
Certain programs (such as \fBlazygit\fP) could create situations where fish would not receive keystrokes correctly, but it is now more robust in these situations (\fI\%#7853\fP).
.IP \(bu 2
Arguments longer than 1024 characters no longer trigger excessive CPU usage on macOS (\fI\%#7837\fP).
.IP \(bu 2
fish builds correctly on macOS when using new versions of Xcode (\fI\%#7838\fP).
.IP \(bu 2
Completions for \fBaura\fP (\fI\%#7865\fP) and \fBtshark\fP (\fI\%#7858\fP) should no longer produce errors.
.IP \(bu 2
Background jobs no longer interfere with syntax highlighting (a regression introduced in fish 3.2.1, \fI\%#7842\fP).
.UNINDENT
.sp
If you are upgrading from version 3.1.2 or before, please also review the release notes for 3.2.1 and 3.2.0 (included below).

.sp
.ce
----

.ce 0
.sp
.SS fish 3.2.1 (released March 18, 2021)
.sp
This release of fish fixes the following problems identified in fish 3.2.0:
.INDENT 0.0
.IP \(bu 2
Commands in key bindings are run with fish\(aqs internal terminal modes, instead of the terminal modes typically used for commands. This fixes a bug introduced in 3.2.0, where text would unexpectedly appear on the terminal, especially when pasting (\fI\%#7770\fP).
.IP \(bu 2
Prompts which use the internal \fB__fish_print_pipestatus\fP function will display correctly rather than carrying certain modifiers (such as bold) further than intended (\fI\%#7771\fP).
.IP \(bu 2
Redirections to internal file descriptors is allowed again, reversing the changes in 3.2.0. This fixes a problem with Midnight Commander (\fI\%#7769\fP).
.IP \(bu 2
Universal variables should be fully reliable regardless of operating system again (\fI\%#7774\fP).
.IP \(bu 2
\fBfish_git_prompt\fP no longer causes screen flickering in certain terminals (\fI\%#7775\fP).
.IP \(bu 2
\fBfish_add_path\fP manipulates the \fBfish_user_paths\fP variable correctly when moving multiple paths (\fI\%#7776\fP).
.IP \(bu 2
Pasting with a multi\-line command no longer causes a \fB__fish_tokenizer_state\fP error (\fI\%#7782\fP).
.IP \(bu 2
\fBpsub\fP inside event handlers cleans up temporary files properly (\fI\%#7792\fP).
.IP \(bu 2
Event handlers declared with \fB\-\-on\-job\-exit $fish_pid\fP no longer run constantly (\fI\%#7721\fP), although these functions should use \fB\-\-on\-event fish_exit\fP instead.
.IP \(bu 2
Changing terminal modes inside \fBconfig.fish\fP works (\fI\%#7783\fP).
.IP \(bu 2
\fBset_color \-\-print\-colors\fP no longer prints all colors in bold (\fI\%#7805\fP)
.IP \(bu 2
Completing commands starting with a \fB\-\fP no longer prints an error (\fI\%#7809\fP).
.IP \(bu 2
Running \fBfish_command_not_found\fP directly no longer produces an error on macOS or other OSes which do not have a handler available (\fI\%#7777\fP).
.IP \(bu 2
The new \fBtype\fP builtin now has the (deprecated) \fB\-\-quiet\fP long form of \fB\-q\fP (\fI\%#7766\fP).
.UNINDENT
.sp
It also includes some small enhancements:
.INDENT 0.0
.IP \(bu 2
\fBhelp\fP and \fBfish_config\fP work correctly when fish is running in a Chrome OS Crostini Linux VM (\fI\%#7789\fP).
.IP \(bu 2
The history file can be made a symbolic link without it being overwritten (\fI\%#7754\fP), matching a similar improvement for the universal variable file in 3.2.0.
.IP \(bu 2
An unhelpful error ("access: No error"), seen on Cygwin, is no longer produced (\fI\%#7785\fP).
.IP \(bu 2
Improvements to the \fBrsync\fP completions (\fI\%#7763\fP), some completion descriptions (\fI\%#7788\fP), and completions that use IP address (\fI\%#7787\fP).
.IP \(bu 2
Improvements to the appearance of \fBfish_config\fP (\fI\%#7811\fP).
.UNINDENT
.sp
If you are upgrading from version 3.1.2 or before, please also review
the release notes for 3.2.0 (included below).

.sp
.ce
----

.ce 0
.sp
.SS fish 3.2.0 (released March 1, 2021)
.SS Notable improvements and fixes
.INDENT 0.0
.IP \(bu 2
\fBUndo and redo support\fP for the command\-line editor and pager search (\fI\%#1367\fP). By default, undo is bound to Control+Z, and redo to Alt+/.
.IP \(bu 2
\fBBuiltins can now output before all data is read\fP\&. For example, \fBstring replace\fP no longer has to read all of stdin before it can begin to output.
This makes it usable also for pipes where the previous command hasn\(aqt finished yet, like:
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
# Show all dmesg lines related to "usb"
dmesg \-w | string match \(aq*usb*\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.IP \(bu 2
\fBPrompts will now be truncated\fP instead of replaced with \fB"> "\fP if they are wider than the terminal (\fI\%#904\fP).
For example:
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
~/dev/build/fish\-shell\-git/src/fish\-shell/build (makepkg)>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
will turn into:
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
…h\-shell/build (makepkg)>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
It is still possible to react to the \fBCOLUMNS\fP variable inside the prompt to implement smarter behavior.
.IP \(bu 2
\fBfish completes ambiguous completions\fP after pressing \fBTab\fP even when they
have a common prefix, without the user having to press \fBTab\fP again
(\fI\%#6924\fP).
.IP \(bu 2
fish is less aggressive about resetting terminal modes, such as flow control, after every command.
Although flow control remains off by default, enterprising users can now enable it with
\fBstty\fP (\fI\%#2315\fP, \fI\%#7704\fP).
.IP \(bu 2
A new \fB"fish_add_path" helper function to add paths to $PATH\fP without producing duplicates,
to be used interactively or in \fBconfig.fish\fP (\fI\%#6960\fP, \fI\%#7028\fP).
For example:
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
fish_add_path /opt/mycoolthing/bin
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
will add /opt/mycoolthing/bin to the beginning of $fish_user_path without creating duplicates,
so it can be called safely from config.fish or interactively, and the path will just be there, once.
.IP \(bu 2
\fBBetter errors with "test"\fP (\fI\%#6030\fP):
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
> test 1 = 2 and echo true or false
test: Expected a combining operator like \(aq\-a\(aq at index 4
1 = 2 and echo true or echo false
      ^
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This includes numbering the index from 1 instead of 0, like fish lists.
.IP \(bu 2
\fBA new theme for the documentation and Web\-based configuration\fP (\fI\%#6500\fP, \fI\%#7371\fP, \fI\%#7523\fP), matching the design on fishshell.com.
.IP \(bu 2
\fBfish \-\-no\-execute\fP \fBwill no longer complain about unknown commands\fP
or non\-matching wildcards, as these could be defined differently at
runtime (especially for functions). This makes it usable as a static syntax checker (\fI\%#977\fP).
.IP \(bu 2
\fBstring match \-\-regex\fP now integrates \fBnamed PCRE2 capture groups as fish variables\fP, allowing variables to be set directly from \fBstring match\fP (\fI\%#7459\fP). To support this functionality, \fBstring\fP is now a reserved word and can no longer be wrapped in a function.
.IP \(bu 2
Globs and other \fBexpansions are limited to 512,288 results\fP (\fI\%#7226\fP). Because operating systems limit the number of arguments to commands, larger values are unlikely to work anyway, and this helps to avoid hangs.
.IP \(bu 2
A new \fB"fish for bash users" documentation page\fP gives a quick overview of the scripting differences between bash and fish (\fI\%#2382\fP), and the completion tutorial has also been moved out into its own document (\fI\%#6709\fP).
.UNINDENT
.SS Syntax changes and new commands
.INDENT 0.0
.IP \(bu 2
Range limits in index range expansions like \fB$x[$start..$end]\fP may be omitted: \fB$start\fP and \fB$end\fP default to 1 and \-1 (the last item) respectively (\fI\%#6574\fP):
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
echo $var[1..]
echo $var[..\-1]
echo $var[..]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
All print the full list \fB$var\fP\&.
.IP \(bu 2
When globbing, a segment which is exactly \fB**\fP may now match zero directories. For example \fB**/foo\fP may match \fBfoo\fP in the current directory (\fI\%#7222\fP).
.UNINDENT
.SS Scripting improvements
.INDENT 0.0
.IP \(bu 2
The \fBtype\fP, \fB_\fP (gettext), \fB\&.\fP (source) and \fB:\fP (no\-op) functions
are now implemented builtins for performance purposes (\fI\%#7342\fP, \fI\%#7036\fP, \fI\%#6854\fP).
.IP \(bu 2
\fBset\fP and backgrounded jobs no longer overwrite \fB$pipestatus\fP (\fI\%#6820\fP), improving its use in command substitutions (\fI\%#6998\fP).
.IP \(bu 2
Computed ("electric") variables such as \fBstatus\fP are now only global in scope, so \fBset \-Uq status\fP returns false (\fI\%#7032\fP).
.IP \(bu 2
The output for \fBset \-\-show\fP has been shortened, only mentioning the scopes in which a variable exists (\fI\%#6944\fP).
In addition, it now shows if a variable is a path variable.
.IP \(bu 2
A new variable, \fBfish_kill_signal\fP, is set to the signal that terminated the last foreground job, or \fB0\fP if the job exited normally (\fI\%#6824\fP, \fI\%#6822\fP).
.IP \(bu 2
A new subcommand, \fBstring pad\fP, allows extending strings to a given width (\fI\%#7340\fP, \fI\%#7102\fP).
.IP \(bu 2
\fBstring sub\fP has a new \fB\-\-end\fP option to specify the end index of
a substring (\fI\%#6765\fP, \fI\%#5974\fP).
.IP \(bu 2
\fBstring split\fP has a new \fB\-\-fields\fP option to specify fields to
output, similar to \fBcut \-f\fP (\fI\%#6770\fP).
.IP \(bu 2
\fBstring trim\fP now also trims vertical tabs by default (\fI\%#6795\fP).
.IP \(bu 2
\fBstring replace\fP no longer prints an error if a capturing group wasn\(aqt matched, instead treating it as empty (\fI\%#7343\fP).
.IP \(bu 2
\fBstring\fP subcommands now quit early when used with \fB\-\-quiet\fP (\fI\%#7495\fP).
.IP \(bu 2
\fBstring repeat\fP now handles multiple arguments, repeating each one (\fI\%#5988\fP).
.IP \(bu 2
\fBprintf\fP no longer prints an error if not given an argument (not
even a format string).
.IP \(bu 2
The \fBtrue\fP and \fBfalse\fP builtins ignore any arguments, like other shells (\fI\%#7030\fP).
.IP \(bu 2
\fBfish_indent\fP now removes unnecessary quotes in simple cases (\fI\%#6722\fP)
and gained a \fB\-\-check\fP option to just check if a file is indented correctly (\fI\%#7251\fP).
.IP \(bu 2
\fBfish_indent\fP indents continuation lines that follow a line ending in a backslash, \fB|\fP, \fB&&\fP or \fB||\fP\&.
.IP \(bu 2
\fBpushd\fP only adds a directory to the stack if changing to it was successful (\fI\%#6947\fP).
.IP \(bu 2
A new \fBfish_job_summary\fP function is called whenever a
background job stops or ends, or any job terminates from a signal (\fI\%#6959\fP, \fI\%#2727\fP, \fI\%#4319\fP).
The default behaviour can now be customized by redefining it.
.IP \(bu 2
\fBstatus\fP gained new \fBdirname\fP and \fBbasename\fP convenience subcommands
to get just the directory to the running script or the name of it,
to simplify common tasks such as running \fB(dirname (status filename))\fP (\fI\%#7076\fP, \fI\%#1818\fP).
.IP \(bu 2
Broken pipelines are now handled more smoothly; in particular, bad redirection mid\-pipeline
results in the job continuing to run but with the broken file descriptor replaced with a closed
file descriptor. This allows better error recovery and is more in line with other shells\(aq
behaviour (\fI\%#7038\fP).
.IP \(bu 2
\fBjobs \-\-quiet PID\fP no longer prints "no suitable job" if the job for PID does not exist (eg\ because it has finished) (\fI\%#6809\fP, \fI\%#6812\fP).
.IP \(bu 2
\fBjobs\fP now shows continued child processes correctly (\fI\%#6818\fP)
.IP \(bu 2
\fBdisown\fP should no longer create zombie processes when job control is off, such as in \fBconfig.fish\fP (\fI\%#7183\fP).
.IP \(bu 2
\fBcommand\fP, \fBjobs\fP and \fBtype\fP builtins support \fB\-\-query\fP as the long form of \fB\-q\fP, matching other builtins.
The long form \fB\-\-quiet\fP is deprecated (\fI\%#7276\fP).
.IP \(bu 2
\fBargparse\fP no longer requires a short flag letter for long\-only options (\fI\%#7585\fP)
and only prints a backtrace with invalid options to argparse itself (\fI\%#6703\fP).
.IP \(bu 2
\fBargparse\fP now passes the validation variables (e.g. \fB$_flag_value\fP) as local\-exported variables,
avoiding the need for \fB\-\-no\-scope\-shadowing\fP in validation functions.
.IP \(bu 2
\fBcomplete\fP takes the first argument as the name of the command if the \fB\-\-command\fP/\fB\-c\fP option is not used,
so \fBcomplete git\fP is treated like \fBcomplete \-\-command git\fP,
and it can show the loaded completions for specific commands with \fBcomplete COMMANDNAME\fP (\fI\%#7321\fP).
.IP \(bu 2
\fBset_color \-b\fP (without an argument) no longer prints an error message, matching other invalid invocations of this command (\fI\%#7154\fP).
.IP \(bu 2
\fBexec\fP no longer produces a syntax error when the command cannot be found (\fI\%#6098\fP).
.IP \(bu 2
\fBset \-\-erase\fP and \fBabbr \-\-erase\fP can now erase multiple things in one go, matching \fBfunctions \-\-erase\fP (\fI\%#7377\fP).
.IP \(bu 2
\fBabbr \-\-erase\fP no longer prints errors when used with no arguments or on an unset abbreviation (\fI\%#7376\fP, \fI\%#7732\fP).
.IP \(bu 2
\fBtest \-t\fP, for testing whether file descriptors are connected to a terminal, works for file descriptors 0, 1, and 2 (\fI\%#4766\fP).
It can still return incorrect results in other cases (\fI\%#1228\fP).
.IP \(bu 2
Trying to execute scripts with Windows line endings (CRLF) produces a sensible error (\fI\%#2783\fP).
.IP \(bu 2
Trying to execute commands with arguments that exceed the operating system limit now produces a specific error (\fI\%#6800\fP).
.IP \(bu 2
An \fBalias\fP that delegates to a command with the same name no longer triggers an error about recursive completion (\fI\%#7389\fP).
.IP \(bu 2
\fBmath\fP now has a \fB\-\-base\fP option to output the result in hexadecimal or octal (\fI\%#7496\fP) and produces more specific error messages (\fI\%#7508\fP).
.IP \(bu 2
\fBmath\fP learned bitwise functions \fBbitand\fP, \fBbitor\fP and \fBbitxor\fP, used like \fBmath "bitand(0xFE, 5)"\fP (\fI\%#7281\fP).
.IP \(bu 2
\fBmath\fP learned tau for those who don\(aqt like typing "2 * pi".
.IP \(bu 2
Failed redirections will now set \fB$status\fP (\fI\%#7540\fP).
.IP \(bu 2
fish sets exit status in a more consistent manner after errors, including invalid expansions like \fB$foo[\fP\&.
.IP \(bu 2
Using \fBread \-\-silent\fP while fish is in private mode was adding these potentially\-sensitive entries to the history; this has been fixed (\fI\%#7230\fP).
.IP \(bu 2
\fBread\fP can now read interactively from other files, and can be used to read from the terminal via \fBread </dev/tty\fP (if the operating system provides \fB/dev/tty\fP) (\fI\%#7358\fP).
.IP \(bu 2
A new \fBfish_status_to_signal\fP function for transforming exit statuses to signal names has been added (\fI\%#7597\fP, \fI\%#7595\fP).
.IP \(bu 2
The fallback \fBrealpath\fP builtin supports the \fB\-s\fP/\fB\-\-no\-symlinks\fP option, like GNU realpath (\fI\%#7574\fP).
.IP \(bu 2
\fBfunctions\fP and \fBtype\fP now explain when a function was defined via \fBsource\fP instead of just saying \fBDefined in \-\fP\&.
.IP \(bu 2
Significant performance improvements when globbing, appending to variables or in \fBmath\fP\&.
.IP \(bu 2
\fBecho\fP no longer interprets options at the beginning of an argument (eg \fBecho "\-n foo"\fP) (\fI\%#7614\fP).
.IP \(bu 2
fish now finds user configuration even if the \fBHOME\fP environment variable is not set (\fI\%#7620\fP).
.IP \(bu 2
fish no longer crashes when started from a Windows\-style working directory (eg \fBF:\epath\fP) (\fI\%#7636\fP).
.IP \(bu 2
\fBfish \-c\fP now reads the remaining arguments into \fB$argv\fP (\fI\%#2314\fP).
.IP \(bu 2
The \fBpwd\fP command supports the long options \fB\-\-logical\fP and \fB\-\-physical\fP, matching other implementations (\fI\%#6787\fP).
.IP \(bu 2
\fBfish \-\-profile\fP now only starts profiling after fish is ready to execute commands (all configuration is completed). There is a new \fB\-\-profile\-startup\fP option that only profiles the startup and configuration process (\fI\%#7648\fP).
.IP \(bu 2
Builtins return a maximum exit status of 255, rather than potentially overflowing. In particular, this affects \fBexit\fP, \fBreturn\fP, \fBfunctions \-\-query\fP, and \fBset \-\-query\fP (\fI\%#7698\fP, \fI\%#7702\fP).
.IP \(bu 2
It is no longer an error to run builtin with closed stdin. For example \fBcount <&\-\fP now prints 0, instead of failing.
.IP \(bu 2
Blocks, functions, and builtins no longer permit redirecting to file descriptors other than 0 (standard input), 1 (standard output) and 2 (standard error). For example, \fBecho hello >&5\fP is now an error. This prevents corruption of internal state (\fI\%#3303\fP).
.UNINDENT
.SS Interactive improvements
.INDENT 0.0
.IP \(bu 2
fish will now always attempt to become process group leader in interactive mode (\fI\%#7060\fP). This helps avoid hangs in certain circumstances, and allows tmux\(aqs current directory introspection to work (\fI\%#5699\fP).
.IP \(bu 2
The interactive reader now allows ending a line in a logical operators (\fB&&\fP and \fB||\fP) instead of complaining about a missing command. (This was already syntactically valid, but interactive sessions didn\(aqt know about it yet).
.IP \(bu 2
The prompt is reprinted after a background job exits (\fI\%#1018\fP).
.IP \(bu 2
fish no longer inserts a space after a completion ending in \fB\&.\fP, \fB,\fP or \fB\-\fP is accepted, improving completions for tools that provide dynamic completions (\fI\%#6928\fP).
.IP \(bu 2
If a filename is invalid when first pressing \fBTab\fP, but becomes valid, it will be completed properly on the next attempt (\fI\%#6863\fP).
.IP \(bu 2
\fBhelp string match/replace/<subcommand>\fP will show the help for string subcommands (\fI\%#6786\fP).
.IP \(bu 2
\fBfish_key_reader\fP sets the exit status to 0 when used with \fB\-\-help\fP or \fB\-\-version\fP (\fI\%#6964\fP).
.IP \(bu 2
\fBfish_key_reader\fP and \fBfish_indent\fP send output from \fB\-\-version\fP to standard output, matching other fish binaries (\fI\%#6964\fP).
.IP \(bu 2
A new variable \fB$status_generation\fP is incremented only when the previous command produces an exit status (\fI\%#6815\fP). This can be used, for example, to check whether a failure status is a holdover due to a background job, or actually produced by the last run command.
.IP \(bu 2
\fBfish_greeting\fP is now a function that reads a variable of the same name, and defaults to setting it globally.
This removes a universal variable by default and helps with updating the greeting.
However, to disable the greeting it is now necessary to explicitly specify universal scope (\fBset \-U fish_greeting\fP) or to disable it in config.fish (\fI\%#7265\fP).
.IP \(bu 2
Events are properly emitted after a job is cancelled (\fI\%#2356\fP).
.IP \(bu 2
\fBfish_preexec\fP and \fBfish_postexec\fP events are no longer triggered for empty commands (\fI\%#4829\fP, \fI\%#7085\fP).
.IP \(bu 2
Functions triggered by the \fBfish_exit\fP event are correctly run when the terminal is closed or the shell receives SIGHUP (\fI\%#7014\fP).
.IP \(bu 2
The \fBfish_prompt\fP event no longer fires when \fBread\fP is used. If
you need a function to run any time \fBread\fP is invoked by a script,
use the new \fBfish_read\fP event instead (\fI\%#7039\fP).
.IP \(bu 2
A new \fBfish_posterror\fP event is emitted when attempting to execute a command with syntax errors (\fI\%#6880\fP, \fI\%#6816\fP).
.IP \(bu 2
The debugging system has now fully switched from the old numbered level to the new named category system introduced in 3.1. A number of new debugging categories have been added, including \fBconfig\fP, \fBpath\fP, \fBreader\fP and \fBscreen\fP (\fI\%#6511\fP). See the output of \fBfish \-\-print\-debug\-categories\fP for the full list.
.IP \(bu 2
The warning about read\-only filesystems has been moved to a new "warning\-path" debug category
and can be disabled by setting a debug category of \fB\-warning\-path\fP (\fI\%#6630\fP):
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
fish \-\-debug=\-warning\-path
.ft P
.fi
.UNINDENT
.UNINDENT
.IP \(bu 2
The enabled debug categories are now printed on shell startup (\fI\%#7007\fP).
.IP \(bu 2
The \fB\-o\fP short option to fish, for \fB\-\-debug\-output\fP, works correctly instead of producing an
invalid option error (\fI\%#7254\fP).
.IP \(bu 2
fish\(aqs debugging can now also be enabled via \fBFISH_DEBUG\fP and \fBFISH_DEBUG_OUTPUT\fP environment variables.
This helps with debugging when no commandline options can be passed, like when fish is called in a shebang (\fI\%#7359\fP).
.IP \(bu 2
Abbreviations are now expanded after all command terminators (eg \fB;\fP or \fB|\fP), not just space,
as in fish 2.7.1 and before (\fI\%#6970\fP), and after closing a command substitution (\fI\%#6658\fP).
.IP \(bu 2
The history file is now created with user\-private permissions,
matching other shells (\fI\%#6926\fP). The directory containing the history
file was already private, so there should not have been any private data
revealed.
.IP \(bu 2
The output of \fBtime\fP is now properly aligned in all cases (\fI\%#6726\fP, \fI\%#6714\fP) and no longer depends on locale (\fI\%#6757\fP).
.IP \(bu 2
The command\-not\-found handling has been simplified.
When it can\(aqt find a command, fish now just executes a function called \fBfish_command_not_found\fP
instead of firing an event, making it easier to replace and reason about.
Previously\-defined \fB__fish_command_not_found_handler\fP functions with an appropriate event listener will still work (\fI\%#7293\fP).
.IP \(bu 2
\fBControl\-C\fP handling has been reimplemented in C++ and is therefore quicker (\fI\%#5259\fP), no longer occasionally prints an "unknown command" error (\fI\%#7145\fP) or overwrites multiline prompts (\fI\%#3537\fP).
.IP \(bu 2
\fBControl\-C\fP no longer kills background jobs for which job control is
disabled, matching POSIX semantics (\fI\%#6828\fP, \fI\%#6861\fP).
.IP \(bu 2
Autosuggestions work properly after \fBControl\-C\fP cancels the current commmand line (\fI\%#6937\fP).
.IP \(bu 2
History search is now case\-insensitive unless the search string contains an uppercase character (\fI\%#7273\fP).
.IP \(bu 2
\fBfish_update_completions\fP gained a new \fB\-\-keep\fP option, which improves speed by skipping completions that already exist (\fI\%#6775\fP, \fI\%#6796\fP).
.IP \(bu 2
Aliases containing an embedded backslash appear properly in the output of \fBalias\fP (\fI\%#6910\fP).
.IP \(bu 2
\fBopen\fP no longer hangs indefinitely on certain systems, as a bug in \fBxdg\-open\fP has been worked around (\fI\%#7215\fP).
.IP \(bu 2
Long command lines no longer add a blank line after execution (\fI\%#6826\fP) and behave better with \fBBackspace\fP (\fI\%#6951\fP).
.IP \(bu 2
\fBfunctions \-t\fP works like the long option \fB\-\-handlers\-type\fP, as documented, instead of producing an error (\fI\%#6985\fP).
.IP \(bu 2
History search now flashes when it found no more results (\fI\%#7362\fP)
.IP \(bu 2
fish now creates the path in the environment variable \fBXDG_RUNTIME_DIR\fP if it does not exist, before using it for runtime data storage (\fI\%#7335\fP).
.IP \(bu 2
\fBset_color \-\-print\-colors\fP now also respects the bold, dim, underline, reverse, italic and background modifiers, to better show their effect (\fI\%#7314\fP).
.IP \(bu 2
The fish Web configuration tool (\fBfish_config\fP) shows prompts correctly on Termux for Android (\fI\%#7298\fP) and detects Windows Services for Linux 2 properly (\fI\%#7027\fP). It no longer shows the \fBhistory\fP variable as it may be too large (one can use the History tab instead). It also starts the browser in another thread, avoiding hangs in some circumstances, especially with Firefox\(aqs Developer Edition (\fI\%#7158\fP). Finally, a bug in the Source Code Pro font may cause browsers to hang, so this font is no longer chosen by default (\fI\%#7714\fP).
.IP \(bu 2
\fBfuncsave\fP gained a new \fB\-\-directory\fP option to specify the location of the saved function (\fI\%#7041\fP).
.IP \(bu 2
\fBhelp\fP works properly on MSYS2 (\fI\%#7113\fP) and only uses \fBcmd.exe\fP if running on WSL (\fI\%#6797\fP).
.IP \(bu 2
Resuming a piped job by its number, like \fBfg %1\fP, works correctly (\fI\%#7406\fP). Resumed jobs show the correct title in the terminal emulator (\fI\%#7444\fP).
.IP \(bu 2
Commands run from key bindings now use the same TTY modes as normal commands (\fI\%#7483\fP).
.IP \(bu 2
Autosuggestions from history are now case\-sensitive (\fI\%#3978\fP).
.IP \(bu 2
\fB$status\fP from completion scripts is no longer passed outside the completion, which keeps the status display in the prompt as the last command\(aqs status (\fI\%#7555\fP).
.IP \(bu 2
Updated localisations for pt_BR (\fI\%#7480\fP).
.IP \(bu 2
\fBfish_trace\fP output now starts with \fB\->\fP (like \fBfish \-\-profile\fP), making the depth more visible (\fI\%#7538\fP).
.IP \(bu 2
Resizing the terminal window no longer produces a corrupted prompt (\fI\%#6532\fP, \fI\%#7404\fP).
.IP \(bu 2
\fBfunctions\fP produces an error rather than crashing on certain invalid arguments (\fI\%#7515\fP).
.IP \(bu 2
A crash in completions with inline variable assignment (eg \fBA= b\fP) has been fixed (\fI\%#7344\fP).
.IP \(bu 2
\fBfish_private_mode\fP may now be changed dynamically using \fBset\fP (\fI\%#7589\fP), and history is kept in memory in private mode (but not stored permanently) (\fI\%#7590\fP).
.IP \(bu 2
Commands with leading spaces may be retrieved from history with up\-arrow until a new command is run, matching zsh\(aqs \fBHIST_IGNORE_SPACE\fP (\fI\%#1383\fP).
.IP \(bu 2
Importing bash history or reporting errors with recursive globs (\fB**\fP) no longer hangs (\fI\%#7407\fP, \fI\%#7497\fP).
.IP \(bu 2
\fBbind\fP now shows \fB\ex7f\fP for the del key instead of a literal DEL character (\fI\%#7631\fP)
.IP \(bu 2
Paths containing variables or tilde expansion are only suggested when they are still valid (\fI\%#7582\fP).
.IP \(bu 2
Syntax highlighting can now color a command as invalid even if executed quickly (\fI\%#5912\fP).
.IP \(bu 2
Redirection targets are no longer highlighted as error if they contain variables which will likely be defined by the current commandline (\fI\%#6654\fP).
.IP \(bu 2
fish is now more resilient against broken terminal modes (\fI\%#7133\fP, \fI\%#4873\fP).
.IP \(bu 2
fish handles being in control of the TTY without owning its own process group better, avoiding some hangs in special configurations (\fI\%#7388\fP).
.IP \(bu 2
Keywords can now be colored differently by setting the \fBfish_color_keyword\fP variable (\fBfish_color_command\fP is used as a fallback) (\fI\%#7678\fP).
.IP \(bu 2
Just like \fBfish_indent\fP, the interactive reader will indent continuation lines that follow a line ending in a backslash, \fB|\fP, \fB&&\fP or \fB||\fP (\fI\%#7694\fP).
.IP \(bu 2
Commands with a trailing escaped space are saved in history correctly (\fI\%#7661\fP).
.IP \(bu 2
\fBfish_prompt\fP no longer mangles Unicode characters in the private\-use range U+F600\-U+F700. (\fI\%#7723\fP).
.IP \(bu 2
The universal variable file, \fBfish_variables\fP, can be made a symbolic link without it being overwritten (\fI\%#7466\fP).
.IP \(bu 2
fish is now more resilient against \fBmktemp\fP failing (\fI\%#7482\fP).
.UNINDENT
.SS New or improved bindings
.INDENT 0.0
.IP \(bu 2
As mentioned above, new special input functions \fBundo\fP (\fBControl+_\fP or \fBControl+Z\fP) and \fBredo\fP (\fBAlt\-/\fP) can be used to revert changes to the command line or the pager search field (\fI\%#6570\fP).
.IP \(bu 2
\fBControl\-Z\fP is now available for binding (\fI\%#7152\fP).
.IP \(bu 2
Additionally, using the \fBcancel\fP special input function (bound to \fBEscape\fP by default) right after fish picked an unambiguous completion will undo that (\fI\%#7433\fP).
.IP \(bu 2
\fBfish_clipboard_paste\fP (\fBControl+V\fP) trims indentation from multiline commands, because fish already indents (\fI\%#7662\fP).
.IP \(bu 2
Vi mode bindings now support \fBdh\fP, \fBdl\fP, \fBc0\fP, \fBcf\fP, \fBct\fP, \fBcF\fP, \fBcT\fP, \fBch\fP, \fBcl\fP, \fBy0\fP, \fBci\fP, \fBca\fP, \fByi\fP, \fBya\fP, \fBdi\fP, \fBda\fP, \fBd;\fP, \fBd,\fP, \fBo\fP, \fBO\fP and Control+left/right keys to navigate by word (\fI\%#6648\fP, \fI\%#6755\fP, \fI\%#6769\fP, \fI\%#7442\fP, \fI\%#7516\fP).
.IP \(bu 2
Vi mode bindings support \fB~\fP (tilde) to toggle the case of the selected character (\fI\%#6908\fP).
.IP \(bu 2
Functions \fBup\-or\-search\fP and \fBdown\-or\-search\fP (\fBUp\fP and \fBDown\fP) can cross empty lines, and don\(aqt activate search mode if the search fails, which makes them easier to use to move between lines in some situations.
.IP \(bu 2
If history search fails to find a match, the cursor is no longer moved. This is useful when accidentally starting a history search on a multi\-line commandline.
.IP \(bu 2
The special input function \fBbeginning\-of\-history\fP (\fBPage Up\fP) now moves to the oldest search instead of the youngest \- that\(aqs \fBend\-of\-history\fP (\fBPage Down\fP).
.IP \(bu 2
A new special input function \fBforward\-single\-char\fP moves one character to the right, and if an autosuggestion is available, only take a single character from it (\fI\%#7217\fP, \fI\%#4984\fP).
.IP \(bu 2
Special input functions can now be joined with \fBor\fP as a modifier (adding to \fBand\fP), though only some commands set an exit status (\fI\%#7217\fP). This includes \fBsuppress\-autosuggestion\fP to reflect whether an autosuggestion was suppressed (\fI\%#1419\fP)
.IP \(bu 2
A new function \fB__fish_preview_current_file\fP, bound to \fBAlt+O\fP, opens the
current file at the cursor in a pager (\fI\%#6838\fP, \fI\%#6855\fP).
.IP \(bu 2
\fBedit_command_buffer\fP (\fBAlt\-E\fP and \fBAlt\-V\fP) passes the cursor position
to the external editor if the editor is recognized (\fI\%#6138\fP, \fI\%#6954\fP).
.IP \(bu 2
\fB__fish_prepend_sudo\fP (\fBAlt\-S\fP) now toggles a \fBsudo\fP prefix (\fI\%#7012\fP) and avoids shifting the cursor (\fI\%#6542\fP).
.IP \(bu 2
\fB__fish_prepend_sudo\fP (\fBAlt\-S\fP) now uses the previous commandline if the current one is empty,
to simplify rerunning the previous command with \fBsudo\fP (\fI\%#7079\fP).
.IP \(bu 2
\fB__fish_toggle_comment_commandline\fP (\fBAlt\-#\fP) now uncomments and presents the last comment
from history if the commandline is empty (\fI\%#7137\fP).
.IP \(bu 2
\fB__fish_whatis_current_token\fP (\fBAlt\-W\fP) prints descriptions for functions and builtins (\fI\%#7191\fP, \fI\%#2083\fP).
.IP \(bu 2
The definition of "word" and "bigword" for movements was refined, fixing (eg) vi mode\(aqs behavior with \fBe\fP on the second\-to\-last char, and bigword\(aqs behavior with single\-character words and non\-blank non\-graphical characters (\fI\%#7353\fP, \fI\%#7354\fP, \fI\%#4025\fP, \fI\%#7328\fP, \fI\%#7325\fP)
.IP \(bu 2
fish\(aqs clipboard bindings now also support Windows Subsystem for Linux via PowerShell and clip.exe (\fI\%#7455\fP, \fI\%#7458\fP) and will properly copy newlines in multi\-line commands.
.IP \(bu 2
Using the \fB*\-jump\fP special input functions before typing anything else no longer crashes fish.
.IP \(bu 2
Completing variable overrides (\fBfoo=bar\fP) could replace the entire thing with just the completion in some circumstances. This has been fixed (\fI\%#7398\fP).
.UNINDENT
.SS Improved prompts
.INDENT 0.0
.IP \(bu 2
The default and example prompts print the correct exit status for
commands prefixed with \fBnot\fP (\fI\%#6566\fP).
.IP \(bu 2
git prompts include all untracked files in the repository, not just those in the current
directory (\fI\%#6086\fP).
.IP \(bu 2
The git prompts correctly show stash states (\fI\%#6876\fP, \fI\%#7136\fP) and clean states (\fI\%#7471\fP).
.IP \(bu 2
The Mercurial prompt correctly shows untracked status (\fI\%#6906\fP), and by default only shows the branch for performance reasons.
A new variable \fB$fish_prompt_hg_show_informative_status\fP can be set to enable more information.
.IP \(bu 2
The \fBfish_vcs_prompt\fP passes its arguments to the various VCS prompts that it calls (\fI\%#7033\fP).
.IP \(bu 2
The Subversion prompt was broken in a number of ways in 3.1.0 and has been restored (\fI\%#6715\fP, \fI\%#7278\fP).
.IP \(bu 2
A new helper function \fBfish_is_root_user\fP simplifies checking for superuser privilege (\fI\%#7031\fP, \fI\%#7123\fP).
.IP \(bu 2
New colorschemes \- \fBayu Light\fP, \fBayu Dark\fP and \fBayu Mirage\fP (\fI\%#7596\fP).
.IP \(bu 2
Bugs related to multiline prompts, including repainting (\fI\%#5860\fP) or navigating directory history (\fI\%#3550\fP) leading to graphical glitches have been fixed.
.IP \(bu 2
The \fBnim\fP prompt now handles vi mode better (\fI\%#6802\fP)
.UNINDENT
.SS Improved terminal support
.INDENT 0.0
.IP \(bu 2
A new variable, \fBfish_vi_force_cursor\fP, can be set to force \fBfish_vi_cursor\fP to attempt changing the cursor
shape in vi mode, regardless of terminal (\fI\%#6968\fP). The \fBfish_vi_cursor\fP option \fB\-\-force\-iterm\fP has been deprecated.
.IP \(bu 2
\fBdiff\fP will now colourize output, if supported (\fI\%#7308\fP).
.IP \(bu 2
Autosuggestions appear when the cursor passes the right prompt (\fI\%#6948\fP) or wraps to the next line (\fI\%#7213\fP).
.IP \(bu 2
The cursor shape in Vi mode changes properly in Windows Terminal (\fI\%#6999\fP, \fI\%#6478\fP).
.IP \(bu 2
The spurious warning about terminal size in small terminals has been removed (\fI\%#6980\fP).
.IP \(bu 2
Dynamic titles are now enabled in Alacritty (\fI\%#7073\fP) and emacs\(aq vterm (\fI\%#7122\fP).
.IP \(bu 2
Current working directory updates are enabled in foot (\fI\%#7099\fP) and WezTerm (\fI\%#7649\fP).
.IP \(bu 2
The width computation for certain emoji agrees better with terminals (especially flags). (\fI\%#7237\fP).
.IP \(bu 2
Long command lines are wrapped in all cases, instead of sometimes being put on a new line (\fI\%#5118\fP).
.IP \(bu 2
The pager is properly rendered with long command lines selected (\fI\%#2557\fP).
.IP \(bu 2
Sessions with right prompts can be resized correctly in terminals that handle reflow, like GNOME Terminal (and other VTE\-based terminals), upcoming Konsole releases and Alacritty. This detection can be overridden with the new \fBfish_handle_reflow\fP variable (\fI\%#7491\fP).
.IP \(bu 2
fish now sets terminal modes sooner, which stops output from appearing before the greeting and prompt are ready (\fI\%#7489\fP).
.IP \(bu 2
Better detection of new Konsole versions for true color support and cursor shape changing.
.IP \(bu 2
fish no longer attempts to modify the terminal size via \fBTIOCSWINSZ\fP, improving compatibility with Kitty (\fI\%#6994\fP).
.UNINDENT
.SS Completions
.INDENT 0.0
.IP \(bu 2
Added completions for
.INDENT 2.0
.IP \(bu 2
\fB7z\fP, \fB7za\fP and \fB7zr\fP (\fI\%#7220\fP)
.IP \(bu 2
\fBalias\fP (\fI\%#7035\fP)
.IP \(bu 2
\fBalternatives\fP (\fI\%#7616\fP)
.IP \(bu 2
\fBapk\fP (\fI\%#7108\fP)
.IP \(bu 2
\fBasciidoctor\fP (\fI\%#7000\fP)
.IP \(bu 2
\fBavifdec\fP and \fBavifenc\fP (\fI\%#7674\fP)
.IP \(bu 2
\fBbluetoothctl\fP (\fI\%#7438\fP)
.IP \(bu 2
\fBcjxl\fP and \fBdjxl\fP (\fI\%#7673\fP)
.IP \(bu 2
\fBcmark\fP (\fI\%#7000\fP)
.IP \(bu 2
\fBcreate_ap\fP (\fI\%#7096\fP)
.IP \(bu 2
\fBdeno\fP (\fI\%#7138\fP)
.IP \(bu 2
\fBdhclient\fP (\fI\%#6684\fP)
.IP \(bu 2
Postgres\-related commands \fBdropdb\fP, \fBcreatedb\fP, \fBpg_restore\fP, \fBpg_dump\fP and
\fBpg_dumpall\fP (\fI\%#6620\fP)
.IP \(bu 2
\fBdotnet\fP (\fI\%#7558\fP)
.IP \(bu 2
\fBdowngrade\fP (\fI\%#6751\fP)
.IP \(bu 2
\fBgapplication\fP, \fBgdbus\fP, \fBgio\fP and \fBgresource\fP (\fI\%#7300\fP)
.IP \(bu 2
\fBgh\fP (\fI\%#7112\fP)
.IP \(bu 2
\fBgitk\fP
.IP \(bu 2
\fBgroups\fP (\fI\%#6889\fP)
.IP \(bu 2
\fBhashcat\fP (\fI\%#7746\fP)
.IP \(bu 2
\fBhikari\fP (\fI\%#7083\fP)
.IP \(bu 2
\fBicdiff\fP (\fI\%#7503\fP)
.IP \(bu 2
\fBimv\fP (\fI\%#6675\fP)
.IP \(bu 2
\fBjohn\fP (\fI\%#7746\fP)
.IP \(bu 2
\fBjulia\fP (\fI\%#7468\fP)
.IP \(bu 2
\fBk3d\fP (\fI\%#7202\fP)
.IP \(bu 2
\fBldapsearch\fP (\fI\%#7578\fP)
.IP \(bu 2
\fBlightdm\fP and \fBdm\-tool\fP (\fI\%#7624\fP)
.IP \(bu 2
\fBlosetup\fP (\fI\%#7621\fP)
.IP \(bu 2
\fBmicro\fP (\fI\%#7339\fP)
.IP \(bu 2
\fBmpc\fP (\fI\%#7169\fP)
.IP \(bu 2
Metasploit\(aqs \fBmsfconsole\fP, \fBmsfdb\fP and \fBmsfvenom\fP (\fI\%#6930\fP)
.IP \(bu 2
\fBmtr\fP (\fI\%#7638\fP)
.IP \(bu 2
\fBmysql\fP (\fI\%#6819\fP)
.IP \(bu 2
\fBncat\fP, \fBnc.openbsd\fP, \fBnc.traditional\fP and \fBnmap\fP (\fI\%#6873\fP)
.IP \(bu 2
\fBopenssl\fP (\fI\%#6845\fP)
.IP \(bu 2
\fBprime\-run\fP (\fI\%#7241\fP)
.IP \(bu 2
\fBps2pdf{12,13,14,wr}\fP (\fI\%#6673\fP)
.IP \(bu 2
\fBpyenv\fP (\fI\%#6551\fP)
.IP \(bu 2
\fBrst2html\fP, \fBrst2html4\fP, \fBrst2html5\fP, \fBrst2latex\fP,
\fBrst2man\fP, \fBrst2odt\fP, \fBrst2pseudoxml\fP, \fBrst2s5\fP,
\fBrst2xetex\fP, \fBrst2xml\fP and \fBrstpep2html\fP (\fI\%#7019\fP)
.IP \(bu 2
\fBspago\fP (\fI\%#7381\fP)
.IP \(bu 2
\fBsphinx\-apidoc\fP, \fBsphinx\-autogen\fP, \fBsphinx\-build\fP and
\fBsphinx\-quickstart\fP (\fI\%#7000\fP)
.IP \(bu 2
\fBstrace\fP (\fI\%#6656\fP)
.IP \(bu 2
systemd\(aqs \fBbootctl\fP, \fBcoredumpctl\fP, \fBhostnamectl\fP (\fI\%#7428\fP), \fBhomectl\fP (\fI\%#7435\fP), \fBnetworkctl\fP (\fI\%#7668\fP) and \fBuserdbctl\fP (\fI\%#7667\fP)
.IP \(bu 2
\fBtcpdump\fP (\fI\%#6690\fP)
.IP \(bu 2
\fBtig\fP
.IP \(bu 2
\fBtraceroute\fP and \fBtracepath\fP (\fI\%#6803\fP)
.IP \(bu 2
\fBwindscribe\fP (\fI\%#6788\fP)
.IP \(bu 2
\fBwireshark\fP, \fBtshark\fP, and \fBdumpcap\fP
.IP \(bu 2
\fBxbps\-*\fP (\fI\%#7239\fP)
.IP \(bu 2
\fBxxhsum\fP, \fBxxh32sum\fP, \fBxxh64sum\fP and \fBxxh128sum\fP (\fI\%#7103\fP)
.IP \(bu 2
\fByadm\fP (\fI\%#7100\fP)
.IP \(bu 2
\fBzopfli\fP and \fBzopflipng\fP (\fI\%#6872\fP)
.UNINDENT
.IP \(bu 2
Lots of improvements to completions, including:
.INDENT 2.0
.IP \(bu 2
\fBgit\fP completions can complete the right and left parts of a commit range like \fBfrom..to\fP or \fBleft...right\fP\&.
.IP \(bu 2
Completion scripts for custom Git subcommands like \fBgit\-xyz\fP are now loaded with Git completions. The completions can now be defined directly on the subcommand (using \fBcomplete git\-xyz\fP), and completion for \fBgit xyz\fP will work. (\fI\%#7075\fP, \fI\%#7652\fP, \fI\%#4358\fP)
.IP \(bu 2
\fBmake\fP completions no longer second\-guess make\(aqs file detection, fixing target completion in some cases (\fI\%#7535\fP).
.IP \(bu 2
Command completions now correctly print the description even if the command was fully matched (like in \fBls<TAB>\fP).
.IP \(bu 2
\fBset\fP completions no longer hide variables starting with \fB__\fP, they are sorted last instead.
.UNINDENT
.IP \(bu 2
Improvements to the manual page completion generator (\fI\%#7086\fP, \fI\%#6879\fP, \fI\%#7187\fP).
.IP \(bu 2
Significant performance improvements to completion of the available commands (\fI\%#7153\fP), especially on macOS Big Sur where there was a significant regression (\fI\%#7365\fP, \fI\%#7511\fP).
.IP \(bu 2
Suffix completion using \fB__fish_complete_suffix\fP uses the same fuzzy matching logic as normal file completion, and completes any file but sorts files with matching suffix first (\fI\%#7040\fP, \fI\%#7547\fP). Previously, it only completed files with matching suffix.
.UNINDENT
.SS For distributors
.INDENT 0.0
.IP \(bu 2
fish has a new interactive test driver based on pexpect, removing the optional dependency on expect (and adding an optional dependency on pexpect) (\fI\%#5451\fP, \fI\%#6825\fP).
.IP \(bu 2
The CHANGELOG was moved to restructured text, allowing it to be included in the documentation (\fI\%#7057\fP).
.IP \(bu 2
fish handles ncurses installed in a non\-standard prefix better (\fI\%#6600\fP, \fI\%#7219\fP), and uses variadic tparm on NetBSD curses (\fI\%#6626\fP).
.IP \(bu 2
The Web\-based configuration tool no longer uses an obsolete Angular version (\fI\%#7147\fP).
.IP \(bu 2
The fish project has adopted the Contributor Covenant code of conduct (\fI\%#7151\fP).
.UNINDENT
.SS Deprecations and removed features
.INDENT 0.0
.IP \(bu 2
The \fBfish_color_match\fP variable is no longer used. (Previously this controlled the color of matching quotes and parens when using \fBread\fP).
.IP \(bu 2
fish 3.2.0 will be the last release in which the redirection to standard error with the \fB^\fP character is enabled.
The \fBstderr\-nocaret\fP feature flag will be changed to "on" in future releases.
.IP \(bu 2
\fBstring\fP is now a reserved word and cannot be used for function names (see above).
.IP \(bu 2
\fBfish_vi_cursor\fP\(aqs option \fB\-\-force\-iterm\fP has been deprecated (see above).
.IP \(bu 2
\fBcommand\fP, \fBjobs\fP and \fBtype\fP long\-form option \fB\-\-quiet\fP is deprecated in favor of \fB\-\-query\fP (see above).
.IP \(bu 2
The \fBfish_command_not_found\fP event is no longer emitted, instead there is a function of that name.
By default it will call a previously\-defined \fB__fish_command_not_found_handler\fP\&. To emit the event manually use \fBemit fish_command_not_found\fP\&.
.IP \(bu 2
The \fBfish_prompt\fP event no longer fires when \fBread\fP is used. If
you need a function to run any time \fBread\fP is invoked by a script,
use the new \fBfish_read\fP event instead (\fI\%#7039\fP).
.IP \(bu 2
To disable the greeting message permanently it is no longer enough to just run \fBset fish_greeting\fP interactively as it is
no longer implicitly a universal variable. Use \fBset \-U fish_greeting\fP or disable it in config.fish with \fBset \-g fish_greeting\fP\&.
.IP \(bu 2
The long\-deprecated and non\-functional \fB\-m\fP/\fB\-\-read\-mode\fP options to \fBread\fP were removed in 3.1b1. Using the short form, or a never\-implemented \fB\-B\fP option, no longer crashes fish (\fI\%#7659\fP).
.IP \(bu 2
With the addition of new categories for debug options, the old numbered debugging levels have been removed.
.UNINDENT
.SS For distributors and developers
.INDENT 0.0
.IP \(bu 2
fish source tarballs are now distributed using the XZ compression
method (\fI\%#5460\fP).
.IP \(bu 2
The fish source tarball contains an example FreeDesktop entry and icon.
.IP \(bu 2
The CMake variable \fBMAC_CODESIGN_ID\fP can now be set to "off" to disable code\-signing (\fI\%#6952\fP, \fI\%#6792\fP).
.IP \(bu 2
Building on on macOS earlier than 10.13.6 succeeds, instead of failing on code\-signing (\fI\%#6791\fP).
.IP \(bu 2
The pkg\-config file now uses variables to ensure paths used are portable across prefixes.
.IP \(bu 2
The default values for the \fBextra_completionsdir\fP, \fBextra_functionsdir\fP
and \fBextra_confdir\fP options now use the installation prefix rather than \fB/usr/local\fP (\fI\%#6778\fP).
.IP \(bu 2
A new CMake variable \fBFISH_USE_SYSTEM_PCRE2\fP controls whether fish
builds with the system\-installed PCRE2, or the version it bundles. By
default it prefers the system library if available, unless Mac
codesigning is enabled (\fI\%#6952\fP).
.IP \(bu 2
Running the full interactive test suite now requires Python 3.5+ and the pexpect package (\fI\%#6825\fP); the expect package is no longer required.
.IP \(bu 2
Support for Python 2 in fish\(aqs tools (\fBfish_config\fP and the manual page completion generator) is no longer guaranteed. Please use Python 3.5 or later (\fI\%#6537\fP).
.IP \(bu 2
The Web\-based configuration tool is compatible with Python 3.10  (\fI\%#7600\fP) and no longer requires Python\(aqs distutils package (\fI\%#7514\fP).
.IP \(bu 2
fish 3.2 is the last release to support Red Hat Enterprise Linux & CentOS version 6.
.UNINDENT

.sp
.ce
----

.ce 0
.sp
.SS fish 3.1.2 (released April 29, 2020)
.sp
This release of fish fixes a major issue discovered in fish 3.1.1:
.INDENT 0.0
.IP \(bu 2
Commands such as \fBfzf\fP and \fBenhancd\fP, when used with \fBeval\fP,
would hang. \fBeval\fP buffered output too aggressively, which has been
fixed (\fI\%#6955\fP).
.UNINDENT
.sp
If you are upgrading from version 3.0.0 or before, please also review
the release notes for 3.1.1, 3.1.0 and 3.1b1 (included below).

.sp
.ce
----

.ce 0
.sp
.SS fish 3.1.1 (released April 27, 2020)
.sp
This release of fish fixes a number of major issues discovered in fish
3.1.0.
.INDENT 0.0
.IP \(bu 2
Commands which involve \fB\&. ( ... | psub)\fP now work correctly, as a
bug in the \fBfunction \-\-on\-job\-exit\fP option has been fixed (\fI\%#6613\fP).
.IP \(bu 2
Conflicts between upstream packages for ripgrep and bat, and the fish
packages, have been resolved (\fI\%#5822\fP).
.IP \(bu 2
Starting fish in a directory without read access, such as via \fBsu\fP,
no longer crashes (\fI\%#6597\fP).
.IP \(bu 2
Glob ordering changes which were introduced in 3.1.0 have been
reverted, returning the order of globs to the previous state (\fI\%#6593\fP).
.IP \(bu 2
Redirections using the deprecated caret syntax to a file descriptor
(eg \fB^&2\fP) work correctly (\fI\%#6591\fP).
.IP \(bu 2
Redirections that append to a file descriptor (eg \fB2>>&1\fP) work
correctly (\fI\%#6614\fP).
.IP \(bu 2
Building fish on macOS (\fI\%#6602\fP) or with new versions of GCC (\fI\%#6604\fP,
\fI\%#6609\fP) is now successful.
.IP \(bu 2
\fBtime\fP is now correctly listed in the output of \fBbuiltin \-n\fP, and
\fBtime \-\-help\fP works correctly (\fI\%#6598\fP).
.IP \(bu 2
Exported universal variables now update properly (\fI\%#6612\fP).
.IP \(bu 2
\fBstatus current\-command\fP gives the expected output when used with
an environment override \- that is, \fBF=B status current\-command\fP
returns \fBstatus\fP instead of \fBF=B\fP (\fI\%#6635\fP).
.IP \(bu 2
\fBtest\fP no longer crashes when used with “\fBnan\fP” or “\fBinf\fP”
arguments, erroring out instead (\fI\%#6655\fP).
.IP \(bu 2
Copying from the end of the command line no longer crashes fish
(\fI\%#6680\fP).
.IP \(bu 2
\fBread\fP no longer removes multiple separators when splitting a
variable into a list, restoring the previous behaviour from fish 3.0
and before (\fI\%#6650\fP).
.IP \(bu 2
Functions using \fB\-\-on\-job\-exit\fP and \fB\-\-on\-process\-exit\fP work
reliably again (\fI\%#6679\fP).
.IP \(bu 2
Functions using \fB\-\-on\-signal INT\fP work reliably in interactive
sessions, as they did in fish 2.7 and before (\fI\%#6649\fP). These handlers
have never worked in non\-interactive sessions, and making them work
is an ongoing process.
.IP \(bu 2
Functions using \fB\-\-on\-variable\fP work reliably with variables which
are set implicitly (rather than with \fBset\fP), such as
“\fBfish_bind_mode\fP” and “\fBPWD\fP” (\fI\%#6653\fP).
.IP \(bu 2
256 colors are properly enabled under certain conditions that were
incorrectly detected in fish 3.1.0 (\fB$TERM\fP begins with xterm, does
not include “\fB256color\fP”, and \fB$TERM_PROGRAM\fP is not set)
(\fI\%#6701\fP).
.IP \(bu 2
The Mercurial (\fBhg\fP) prompt no longer produces an error when the
current working directory is removed (\fI\%#6699\fP). Also, for performance
reasons it shows only basic information by default; to restore the
detailed status, set \fB$fish_prompt_hg_show_informative_status\fP\&.
.IP \(bu 2
The VCS prompt, \fBfish_vcs_prompt\fP, no longer displays Subversion
(\fBsvn\fP) status by default, due to the potential slowness of this
operation (\fI\%#6681\fP).
.IP \(bu 2
Pasting of commands has been sped up (\fI\%#6713\fP).
.IP \(bu 2
Using extended Unicode characters, such as emoji, in a non\-Unicode
capable locale (such as the \fBC\fP or \fBPOSIX\fP locale) no longer
renders all output blank (\fI\%#6736\fP).
.IP \(bu 2
\fBhelp\fP prefers to use \fBxdg\-open\fP, avoiding the use of \fBopen\fP on
Debian systems where this command is actually \fBopenvt\fP (\fI\%#6739\fP).
.IP \(bu 2
Command lines starting with a space, which are not saved in history,
now do not get autosuggestions. This fixes an issue with Midnight
Commander integration (\fI\%#6763\fP), but may be changed in a future
version.
.IP \(bu 2
Copying to the clipboard no longer inserts a newline at the end of
the content, matching fish 2.7 and earlier (\fI\%#6927\fP).
.IP \(bu 2
\fBfzf\fP in complex pipes no longer hangs. More generally, code run as
part of command substitutions or \fBeval\fP will no longer have
separate process groups. (\fI\%#6624\fP, \fI\%#6806\fP).
.UNINDENT
.sp
This release also includes:
.INDENT 0.0
.IP \(bu 2
several changes to improve macOS compatibility with code signing
and notarization;
.IP \(bu 2
several improvements to completions; and
.IP \(bu 2
several content and formatting improvements to the documentation.
.UNINDENT
.sp
If you are upgrading from version 3.0.0 or before, please also review
the release notes for 3.1.0 and 3.1b1 (included below).
.SS Errata for fish 3.1
.sp
A new builtin, \fBtime\fP, was introduced in the fish 3.1 releases. This
builtin is a reserved word (like \fBtest\fP, \fBfunction\fP, and others)
because of the way it is implemented, and functions can no longer be
named \fBtime\fP\&. This was not clear in the fish 3.1b1 changelog.

.sp
.ce
----

.ce 0
.sp
.SS fish 3.1.0 (released February 12, 2020)
.sp
Compared to the beta release of fish 3.1b1, fish version 3.1.0:
.INDENT 0.0
.IP \(bu 2
Fixes a regression where spaces after a brace were removed despite
brace expansion not occurring (\fI\%#6564\fP).
.IP \(bu 2
Fixes a number of problems in compiling and testing on Cygwin
(\fI\%#6549\fP) and Solaris\-derived systems such as Illumos (\fI\%#6553\fP, \fI\%#6554\fP,
\fI\%#6555\fP, \fI\%#6556\fP, and \fI\%#6558\fP).
.IP \(bu 2
Fixes the process for building macOS packages.
.IP \(bu 2
Fixes a regression where excessive error messages are printed if
Unicode characters are emitted in non\-Unicode\-capable locales
(\fI\%#6584\fP).
.IP \(bu 2
Contains some improvements to the documentation and a small number
of completions.
.UNINDENT
.sp
If you are upgrading from version 3.0.0 or before, please also review
the release notes for 3.1b1 (included below).

.sp
.ce
----

.ce 0
.sp
.SS fish 3.1b1 (released January 26, 2020)
.SS Notable improvements and fixes
.INDENT 0.0
.IP \(bu 2
A new \fB$pipestatus\fP variable contains a list of exit statuses of
the previous job, for each of the separate commands in a pipeline
(\fI\%#5632\fP).
.IP \(bu 2
fish no longer buffers pipes to the last function in a pipeline,
improving many cases where pipes appeared to block or hang (\fI\%#1396\fP).
.IP \(bu 2
An overhaul of error messages for builtin commands, including a
removal of the overwhelming usage summary, more readable stack traces
(\fI\%#3404\fP, \fI\%#5434\fP), and stack traces for \fBtest\fP (aka \fB[\fP) (\fI\%#5771\fP).
.IP \(bu 2
fish’s debugging arguments have been significantly improved. The
\fB\-\-debug\-level\fP option has been removed, and a new \fB\-\-debug\fP
option replaces it. This option accepts various categories, which may
be listed via \fBfish \-\-print\-debug\-categories\fP (\fI\%#5879\fP). A new
\fB\-\-debug\-output\fP option allows for redirection of debug output.
.IP \(bu 2
\fBstring\fP has a new \fBcollect\fP subcommand for use in command
substitutions, producing a single output instead of splitting on new
lines (similar to \fB"$(cmd)"\fP in other shells) (\fI\%#159\fP).
.IP \(bu 2
The fish manual, tutorial and FAQ are now available in \fBman\fP format
as \fBfish\-doc\fP, \fBfish\-tutorial\fP and \fBfish\-faq\fP respectively
(\fI\%#5521\fP).
.IP \(bu 2
Like other shells, \fBcd\fP now always looks for its argument in the
current directory as a last resort, even if the \fBCDPATH\fP variable
does not include it or “.” (\fI\%#4484\fP).
.IP \(bu 2
fish now correctly handles \fBCDPATH\fP entries that start with \fB\&..\fP
(\fI\%#6220\fP) or contain \fB\&./\fP (\fI\%#5887\fP).
.IP \(bu 2
The \fBfish_trace\fP variable may be set to trace execution (\fI\%#3427\fP).
This performs a similar role as \fBset \-x\fP in other shells.
.IP \(bu 2
fish uses the temporary directory determined by the system, rather
than relying on \fB/tmp\fP (\fI\%#3845\fP).
.IP \(bu 2
The fish Web configuration tool (\fBfish_config\fP) prints a list of
commands it is executing, to help understanding and debugging
(\fI\%#5584\fP).
.IP \(bu 2
Major performance improvements when pasting (\fI\%#5866\fP), executing lots
of commands (\fI\%#5905\fP), importing history from bash (\fI\%#6295\fP), and when
completing variables that might match \fB$history\fP (\fI\%#6288\fP).
.UNINDENT
.SS Syntax changes and new commands
.INDENT 0.0
.IP \(bu 2
A new builtin command, \fBtime\fP, which allows timing of fish
functions and builtins as well as external commands (\fI\%#117\fP).
.IP \(bu 2
Brace expansion now only takes place if the braces include a “,” or a
variable expansion, meaning common commands such as
\fBgit reset HEAD@{0}\fP do not require escaping (\fI\%#5869\fP).
.IP \(bu 2
New redirections \fB&>\fP and \fB&|\fP may be used to redirect or pipe
stdout, and also redirect stderr to stdout (\fI\%#6192\fP).
.IP \(bu 2
\fBswitch\fP now allows arguments that expand to nothing, like empty
variables (\fI\%#5677\fP).
.IP \(bu 2
The \fBVAR=val cmd\fP syntax can now be used to run a command in a
modified environment (\fI\%#6287\fP).
.IP \(bu 2
\fBand\fP is no longer recognised as a command, so that nonsensical
constructs like \fBand and and\fP produce a syntax error (\fI\%#6089\fP).
.IP \(bu 2
\fBmath\fP‘s exponent operator,’\fB^\fP‘, was previously
left\-associative, but now uses the more commonly\-used
right\-associative behaviour (\fI\%#6280\fP). This means that
\fBmath \(aq3^0.5^2\(aq\fP was previously calculated as’(3\s-2\u0.5)\d\s02’,
but is now calculated as ‘3\s-2\u(0.5\d\s02)’.
.IP \(bu 2
In fish 3.0, the variable used with \fBfor\fP loops inside command
substitutions could leak into enclosing scopes; this was an
inadvertent behaviour change and has been reverted (\fI\%#6480\fP).
.UNINDENT
.SS Scripting improvements
.INDENT 0.0
.IP \(bu 2
\fBstring split0\fP now returns 0 if it split something (\fI\%#5701\fP).
.IP \(bu 2
In the interest of consistency, \fBbuiltin \-q\fP and \fBcommand \-q\fP can
now be used to query if a builtin or command exists (\fI\%#5631\fP).
.IP \(bu 2
\fBmath\fP now accepts \fB\-\-scale=max\fP for the maximum scale (\fI\%#5579\fP).
.IP \(bu 2
\fBbuiltin $var\fP now works correctly, allowing a variable as the
builtin name (\fI\%#5639\fP).
.IP \(bu 2
\fBcd\fP understands the \fB\-\-\fP argument to make it possible to change
to directories starting with a hyphen (\fI\%#6071\fP).
.IP \(bu 2
\fBcomplete \-\-do\-complete\fP now also does fuzzy matches (\fI\%#5467\fP).
.IP \(bu 2
\fBcomplete \-\-do\-complete\fP can be used inside completions, allowing
limited recursion (\fI\%#3474\fP).
.IP \(bu 2
\fBcount\fP now also counts lines fed on standard input (\fI\%#5744\fP).
.IP \(bu 2
\fBeval\fP produces an exit status of 0 when given no arguments, like
other shells (\fI\%#5692\fP).
.IP \(bu 2
\fBprintf\fP prints what it can when input hasn’t been fully converted
to a number, but still prints an error (\fI\%#5532\fP).
.IP \(bu 2
\fBcomplete \-C foo\fP now works as expected, rather than requiring
\fBcomplete \-Cfoo\fP\&.
.IP \(bu 2
\fBcomplete\fP has a new \fB\-\-force\-files\fP option, to re\-enable file
completions. This allows \fBsudo \-E\fP and \fBpacman \-Qo\fP to complete
correctly (\fI\%#5646\fP).
.IP \(bu 2
\fBargparse\fP now defaults to showing the current function name
(instead of \fBargparse\fP) in its errors, making \fB\-\-name\fP often
superfluous (\fI\%#5835\fP).
.IP \(bu 2
\fBargparse\fP has a new \fB\-\-ignore\-unknown\fP option to keep
unrecognized options, allowing multiple argparse passes to parse
options (\fI\%#5367\fP).
.IP \(bu 2
\fBargparse\fP correctly handles flag value validation of options that
only have short names (\fI\%#5864\fP).
.IP \(bu 2
\fBread \-S\fP (short option of \fB\-\-shell\fP) is recognised correctly
(\fI\%#5660\fP).
.IP \(bu 2
\fBread\fP understands \fB\-\-list\fP, which acts like \fB\-\-array\fP in
reading all arguments into a list inside a single variable, but is
better named (\fI\%#5846\fP).
.IP \(bu 2
\fBread\fP has a new option, \fB\-\-tokenize\fP, which splits a string into
variables according to the shell’s tokenization rules, considering
quoting, escaping, and so on (\fI\%#3823\fP).
.IP \(bu 2
\fBread\fP interacts more correctly with the deprecated \fB$IFS\fP
variable, in particular removing multiple separators when splitting a
variable into a list (\fI\%#6406\fP), matching other shells.
.IP \(bu 2
\fBfish_indent\fP now handles semicolons better, including leaving them
in place for \fB; and\fP and \fB; or\fP instead of breaking the line
(\fI\%#5859\fP).
.IP \(bu 2
\fBfish_indent \-\-write\fP now supports multiple file arguments,
indenting them in turn.
.IP \(bu 2
The default read limit has been increased to 100MiB (\fI\%#5267\fP).
.IP \(bu 2
\fBmath\fP now also understands \fBx\fP for multiplication, provided it
is followed by whitespace (\fI\%#5906\fP).
.IP \(bu 2
\fBmath\fP reports the right error when incorrect syntax is used inside
parentheses (\fI\%#6063\fP), and warns when unsupported logical operations
are used (\fI\%#6096\fP).
.IP \(bu 2
\fBfunctions \-\-erase\fP now also prevents fish from autoloading a
function for the first time (\fI\%#5951\fP).
.IP \(bu 2
\fBjobs \-\-last\fP returns 0 to indicate success when a job is found
(\fI\%#6104\fP).
.IP \(bu 2
\fBcommandline \-p\fP and \fBcommandline \-j\fP now split on \fB&&\fP and
\fB||\fP in addition to \fB;\fP and \fB&\fP (\fI\%#6214\fP).
.IP \(bu 2
A bug where \fBstring split\fP would drop empty strings if the output
was only empty strings has been fixed (\fI\%#5987\fP).
.IP \(bu 2
\fBeval\fP no long creates a new local variable scope, but affects
variables in the scope it is called from (\fI\%#4443\fP). \fBsource\fP still
creates a new local scope.
.IP \(bu 2
\fBabbr\fP has a new \fB\-\-query\fP option to check for the existence of
an abbreviation.
.IP \(bu 2
Local values for \fBfish_complete_path\fP and \fBfish_function_path\fP
are now ignored; only their global values are respected.
.IP \(bu 2
Syntax error reports now display a marker in the correct position
(\fI\%#5812\fP).
.IP \(bu 2
Empty universal variables may now be exported (\fI\%#5992\fP).
.IP \(bu 2
Exported universal variables are no longer imported into the global
scope, preventing shadowing. This makes it easier to change such
variables for all fish sessions and avoids breakage when the value is
a list of multiple elements (\fI\%#5258\fP).
.IP \(bu 2
A bug where \fBfor\fP could use invalid variable names has been fixed
(\fI\%#5800\fP).
.IP \(bu 2
A bug where local variables would not be exported to functions has
been fixed (\fI\%#6153\fP).
.IP \(bu 2
The null command (\fB:\fP) now always exits successfully, rather than
passing through the previous exit status (\fI\%#6022\fP).
.IP \(bu 2
The output of \fBfunctions FUNCTION\fP matches the declaration of the
function, correctly including comments or blank lines (\fI\%#5285\fP), and
correctly includes any \fB\-\-wraps\fP flags (\fI\%#1625\fP).
.IP \(bu 2
\fBtype\fP supports a new option, \fB\-\-short\fP, which suppress function
expansion (\fI\%#6403\fP).
.IP \(bu 2
\fBtype \-\-path\fP with a function argument will now output the path to
the file containing the definition of that function, if it exists.
.IP \(bu 2
\fBtype \-\-force\-path\fP with an argument that cannot be found now
correctly outputs nothing, as documented (\fI\%#6411\fP).
.IP \(bu 2
The \fB$hostname\fP variable is no longer truncated to 32 characters
(\fI\%#5758\fP).
.IP \(bu 2
Line numbers in function backtraces are calculated correctly (\fI\%#6350\fP).
.IP \(bu 2
A new \fBfish_cancel\fP event is emitted when the command line is
cancelled, which is useful for terminal integration (\fI\%#5973\fP).
.UNINDENT
.SS Interactive improvements
.INDENT 0.0
.IP \(bu 2
New Base16 color options are available through the Web\-based
configuration (\fI\%#6504\fP).
.IP \(bu 2
fish only parses \fB/etc/paths\fP on macOS in login shells, matching
the bash implementation (\fI\%#5637\fP) and avoiding changes to path ordering
in child shells (\fI\%#5456\fP). It now ignores blank lines like the bash
implementation (\fI\%#5809\fP).
.IP \(bu 2
The locale is now reloaded when the \fBLOCPATH\fP variable is changed
(\fI\%#5815\fP).
.IP \(bu 2
\fBread\fP no longer keeps a history, making it suitable for operations
that shouldn’t end up there, like password entry (\fI\%#5904\fP).
.IP \(bu 2
\fBdirh\fP outputs its stack in the correct order (\fI\%#5477\fP), and behaves
as documented when universal variables are used for its stack
(\fI\%#5797\fP).
.IP \(bu 2
\fBfunced\fP and the edit\-commandline\-in\-buffer bindings did not work
in fish 3.0 when the \fB$EDITOR\fP variable contained spaces; this has
been corrected (\fI\%#5625\fP).
.IP \(bu 2
Builtins now pipe their help output to a pager automatically (\fI\%#6227\fP).
.IP \(bu 2
\fBset_color\fP now colors the \fB\-\-print\-colors\fP output in the
matching colors if it is going to a terminal.
.IP \(bu 2
fish now underlines every valid entered path instead of just the last
one (\fI\%#5872\fP).
.IP \(bu 2
When syntax highlighting a string with an unclosed quote, only the
quote itself will be shown as an error, instead of the whole
argument.
.IP \(bu 2
Syntax highlighting works correctly with variables as commands
(\fI\%#5658\fP) and redirections to close file descriptors (\fI\%#6092\fP).
.IP \(bu 2
\fBhelp\fP works properly on Windows Subsytem for Linux (\fI\%#5759\fP, \fI\%#6338\fP).
.IP \(bu 2
A bug where \fBdisown\fP could crash the shell has been fixed (\fI\%#5720\fP).
.IP \(bu 2
fish will not autosuggest files ending with \fB~\fP unless there are no
other candidates, as these are generally backup files (\fI\%#985\fP).
.IP \(bu 2
Escape in the pager works correctly (\fI\%#5818\fP).
.IP \(bu 2
Key bindings that call \fBfg\fP no longer leave the terminal in a
broken state (\fI\%#2114\fP).
.IP \(bu 2
Brackets (\fI\%#5831\fP) and filenames containing \fB$\fP (\fI\%#6060\fP) are completed
with appropriate escaping.
.IP \(bu 2
The output of \fBcomplete\fP and \fBfunctions\fP is now colorized in
interactive terminals.
.IP \(bu 2
The Web\-based configuration handles aliases that include single
quotes correctly (\fI\%#6120\fP), and launches correctly under Termux (\fI\%#6248\fP)
and OpenBSD (\fI\%#6522\fP).
.IP \(bu 2
\fBfunction\fP now correctly validates parameters for
\fB\-\-argument\-names\fP as valid variable names (\fI\%#6147\fP) and correctly
parses options following \fB\-\-argument\-names\fP, as in
“\fB\-\-argument\-names foo \-\-description bar\fP” (\fI\%#6186\fP).
.IP \(bu 2
History newly imported from bash includes command lines using \fB&&\fP
or \fB||\fP\&.
.IP \(bu 2
The automatic generation of completions from manual pages is better
described in job and process listings, and no longer produces a
warning when exiting fish (\fI\%#6269\fP).
.IP \(bu 2
In private mode, setting \fB$fish_greeting\fP to an empty string before
starting the private session will prevent the warning about history
not being saved from being printed (\fI\%#6299\fP).
.IP \(bu 2
In the interactive editor, a line break (Enter) inside unclosed
brackets will insert a new line, rather than executing the command
and producing an error (\fI\%#6316\fP).
.IP \(bu 2
Ctrl\-C always repaints the prompt (\fI\%#6394\fP).
.IP \(bu 2
When run interactively from another program (such as Python), fish
will correctly start a new process group, like other shells (\fI\%#5909\fP).
.IP \(bu 2
Job identifiers (for example, for background jobs) are assigned more
logically (\fI\%#6053\fP).
.IP \(bu 2
A bug where history would appear truncated if an empty command was
executed was fixed (\fI\%#6032\fP).
.UNINDENT
.SS New or improved bindings
.INDENT 0.0
.IP \(bu 2
Pasting strips leading spaces to avoid pasted commands being omitted
from the history (\fI\%#4327\fP).
.IP \(bu 2
Shift\-Left and Shift\-Right now default to moving backwards and
forwards by one bigword (words separated by whitespace) (\fI\%#1505\fP).
.IP \(bu 2
The default escape delay (to differentiate between the escape key and
an alt\-combination) has been reduced to 30ms, down from 300ms for the
default mode and 100ms for Vi mode (\fI\%#3904\fP).
.IP \(bu 2
The \fBforward\-bigword\fP binding now interacts correctly with
autosuggestions (\fI\%#5336\fP).
.IP \(bu 2
The \fBfish_clipboard_*\fP functions support Wayland by using
\fI\%wl\-clipboard\fP
(\fI\%#5450\fP).
.IP \(bu 2
The \fBnextd\fP and \fBprevd\fP functions no longer print “Hit end of
history”, instead using a bell. They correctly store working
directories containing symbolic links (\fI\%#6395\fP).
.IP \(bu 2
If a \fBfish_mode_prompt\fP function exists, Vi mode will only execute
it on mode\-switch instead of the entire prompt. This should make it
much more responsive with slow prompts (\fI\%#5783\fP).
.IP \(bu 2
The path\-component bindings (like Ctrl\-w) now also stop at “:” and
“@”, because those are used to denote user and host in commands such
as \fBssh\fP (\fI\%#5841\fP).
.IP \(bu 2
The NULL character can now be bound via \fBbind \-k nul\fP\&. Terminals
often generate this character via control\-space. (\fI\%#3189\fP).
.IP \(bu 2
A new readline command \fBexpand\-abbr\fP can be used to trigger
abbreviation expansion (\fI\%#5762\fP).
.IP \(bu 2
A new readline command, \fBdelete\-or\-exit\fP, removes a character to
the right of the cursor or exits the shell if the command line is
empty (moving this functionality out of the \fBdelete\-or\-exit\fP
function).
.IP \(bu 2
The \fBself\-insert\fP readline command will now insert the binding
sequence, if not empty.
.IP \(bu 2
A new binding to prepend \fBsudo\fP, bound to Alt\-S by default (\fI\%#6140\fP).
.IP \(bu 2
The Alt\-W binding to describe a command should now work better with
multiline prompts (\fI\%#6110\fP)
.IP \(bu 2
The Alt\-H binding to open a command’s man page now tries to ignore
\fBsudo\fP (\fI\%#6122\fP).
.IP \(bu 2
A new pair of bind functions, \fBhistory\-prefix\-search\-backward\fP (and
\fBforward\fP), was introduced (\fI\%#6143\fP).
.IP \(bu 2
Vi mode now supports R to enter replace mode (\fI\%#6342\fP), and \fBd0\fP to
delete the current line (\fI\%#6292\fP).
.IP \(bu 2
In Vi mode, hitting Enter in replace\-one mode no longer erases the
prompt (\fI\%#6298\fP).
.IP \(bu 2
Selections in Vi mode are inclusive, matching the actual behaviour of
Vi (\fI\%#5770\fP).
.UNINDENT
.SS Improved prompts
.INDENT 0.0
.IP \(bu 2
The Git prompt in informative mode now shows the number of stashes if
enabled.
.IP \(bu 2
The Git prompt now has an option
(\fB$__fish_git_prompt_use_informative_chars\fP) to use the (more
modern) informative characters without enabling informative mode.
.IP \(bu 2
The default prompt now also features VCS integration and will color
the host if running via SSH (\fI\%#6375\fP).
.IP \(bu 2
The default and example prompts print the pipe status if an earlier
command in the pipe fails.
.IP \(bu 2
The default and example prompts try to resolve exit statuses to
signal names when appropriate.
.UNINDENT
.SS Improved terminal output
.INDENT 0.0
.IP \(bu 2
New \fBfish_pager_color_\fP options have been added to control more
elements of the pager’s colors (\fI\%#5524\fP).
.IP \(bu 2
Better detection and support for using fish from various system
consoles, where limited colors and special characters are supported
(\fI\%#5552\fP).
.IP \(bu 2
fish now tries to guess if the system supports Unicode 9 (and
displays emoji as wide), eliminating the need to set
\fB$fish_emoji_width\fP in most cases (\fI\%#5722\fP).
.IP \(bu 2
Improvements to the display of wide characters, particularly Korean
characters and emoji (\fI\%#5583\fP, \fI\%#5729\fP).
.IP \(bu 2
The Vi mode cursor is correctly redrawn when regaining focus under
terminals that report focus (eg tmux) (\fI\%#4788\fP).
.IP \(bu 2
Variables that control background colors (such as
\fBfish_pager_color_search_match\fP) can now use \fB\-\-reverse\fP\&.
.UNINDENT
.SS Completions
.INDENT 0.0
.IP \(bu 2
Added completions for
.INDENT 2.0
.IP \(bu 2
\fBaws\fP
.IP \(bu 2
\fBbat\fP (\fI\%#6052\fP)
.IP \(bu 2
\fBbosh\fP (\fI\%#5700\fP)
.IP \(bu 2
\fBbtrfs\fP
.IP \(bu 2
\fBcamcontrol\fP
.IP \(bu 2
\fBcf\fP (\fI\%#5700\fP)
.IP \(bu 2
\fBchronyc\fP (\fI\%#6496\fP)
.IP \(bu 2
\fBcode\fP (\fI\%#6205\fP)
.IP \(bu 2
\fBcryptsetup\fP (\fI\%#6488\fP)
.IP \(bu 2
\fBcsc\fP and \fBcsi\fP (\fI\%#6016\fP)
.IP \(bu 2
\fBcwebp\fP (\fI\%#6034\fP)
.IP \(bu 2
\fBcygpath\fP and \fBcygstart\fP (\fI\%#6239\fP)
.IP \(bu 2
\fBepkginfo\fP (\fI\%#5829\fP)
.IP \(bu 2
\fBffmpeg\fP, \fBffplay\fP, and \fBffprobe\fP (\fI\%#5922\fP)
.IP \(bu 2
\fBfsharpc\fP and \fBfsharpi\fP (\fI\%#6016\fP)
.IP \(bu 2
\fBfzf\fP (\fI\%#6178\fP)
.IP \(bu 2
\fBg++\fP (\fI\%#6217\fP)
.IP \(bu 2
\fBgpg1\fP (\fI\%#6139\fP)
.IP \(bu 2
\fBgpg2\fP (\fI\%#6062\fP)
.IP \(bu 2
\fBgrub\-mkrescue\fP (\fI\%#6182\fP)
.IP \(bu 2
\fBhledger\fP (\fI\%#6043\fP)
.IP \(bu 2
\fBhwinfo\fP (\fI\%#6496\fP)
.IP \(bu 2
\fBirb\fP (\fI\%#6260\fP)
.IP \(bu 2
\fBiw\fP (\fI\%#6232\fP)
.IP \(bu 2
\fBkak\fP
.IP \(bu 2
\fBkeepassxc\-cli\fP (\fI\%#6505\fP)
.IP \(bu 2
\fBkeybase\fP (\fI\%#6410\fP)
.IP \(bu 2
\fBloginctl\fP (\fI\%#6501\fP)
.IP \(bu 2
\fBlz4\fP, \fBlz4c\fP and \fBlz4cat\fP (\fI\%#6364\fP)
.IP \(bu 2
\fBmariner\fP (\fI\%#5718\fP)
.IP \(bu 2
\fBnethack\fP (\fI\%#6240\fP)
.IP \(bu 2
\fBpatool\fP (\fI\%#6083\fP)
.IP \(bu 2
\fBphpunit\fP (\fI\%#6197\fP)
.IP \(bu 2
\fBplutil\fP (\fI\%#6301\fP)
.IP \(bu 2
\fBpzstd\fP (\fI\%#6364\fP)
.IP \(bu 2
\fBqubes\-gpg\-client\fP (\fI\%#6067\fP)
.IP \(bu 2
\fBresolvectl\fP (\fI\%#6501\fP)
.IP \(bu 2
\fBrg\fP
.IP \(bu 2
\fBrustup\fP
.IP \(bu 2
\fBsfdx\fP (\fI\%#6149\fP)
.IP \(bu 2
\fBspeedtest\fP and \fBspeedtest\-cli\fP (\fI\%#5840\fP)
.IP \(bu 2
\fBsrc\fP (\fI\%#6026\fP)
.IP \(bu 2
\fBtokei\fP (\fI\%#6085\fP)
.IP \(bu 2
\fBtsc\fP (\fI\%#6016\fP)
.IP \(bu 2
\fBunlz4\fP (\fI\%#6364\fP)
.IP \(bu 2
\fBunzstd\fP (\fI\%#6364\fP)
.IP \(bu 2
\fBvbc\fP (\fI\%#6016\fP)
.IP \(bu 2
\fBzpaq\fP (\fI\%#6245\fP)
.IP \(bu 2
\fBzstd\fP, \fBzstdcat\fP, \fBzstdgrep\fP, \fBzstdless\fP and \fBzstdmt\fP
(\fI\%#6364\fP)
.UNINDENT
.IP \(bu 2
Lots of improvements to completions.
.IP \(bu 2
Selecting short options which also have a long name from the
completion pager is possible (\fI\%#5634\fP).
.IP \(bu 2
Tab completion will no longer add trailing spaces if they already
exist (\fI\%#6107\fP).
.IP \(bu 2
Completion of subcommands to builtins like \fBand\fP or \fBnot\fP now
works correctly (\fI\%#6249\fP).
.IP \(bu 2
Completion of arguments to short options works correctly when
multiple short options are used together (\fI\%#332\fP).
.IP \(bu 2
Activating completion in the middle of an invalid completion does not
move the cursor any more, making it easier to fix a mistake (\fI\%#4124\fP).
.IP \(bu 2
Completion in empty commandlines now lists all available commands.
.IP \(bu 2
Functions listed as completions could previously leak parts of the
function as other completions; this has been fixed.
.UNINDENT
.SS Deprecations and removed features
.INDENT 0.0
.IP \(bu 2
The vcs\-prompt functions have been promoted to names without
double\-underscore, so __fish_git_prompt is now fish_git_prompt,
__fish_vcs_prompt is now fish_vcs_prompt, __fish_hg_prompt is now
fish_hg_prompt and __fish_svn_prompt is now fish_svn_prompt. Shims
at the old names have been added, and the variables have kept their
old names (\fI\%#5586\fP).
.IP \(bu 2
\fBstring replace\fP has an additional round of escaping in the
replacement expression, so escaping backslashes requires many escapes
(eg \fBstring replace \-ra \(aq([ab])\(aq \(aq\e\e\e\e\e\e\e$1\(aq a\fP). The new feature
flag \fBregex\-easyesc\fP can be used to disable this, so that the same
effect can be achieved with
\fBstring replace \-ra \(aq([ab])\(aq \(aq\e\e\e\e$1\(aq a\fP (\fI\%#5556\fP). As a reminder,
the intention behind feature flags is that this will eventually
become the default and then only option, so scripts should be
updated.
.IP \(bu 2
The \fBfish_vi_mode\fP function, deprecated in fish 2.3, has been
removed. Use \fBfish_vi_key_bindings\fP instead (\fI\%#6372\fP).
.UNINDENT
.SS For distributors and developers
.INDENT 0.0
.IP \(bu 2
fish 3.0 introduced a CMake\-based build system. In fish 3.1, both the
Autotools\-based build and legacy Xcode build system have been
removed, leaving only the CMake build system. All distributors and
developers must install CMake.
.IP \(bu 2
fish now depends on the common \fBtee\fP external command, for the
\fBpsub\fP process substitution function.
.IP \(bu 2
The documentation is now built with Sphinx. The old Doxygen\-based
documentation system has been removed. Developers, and distributors
who wish to rebuild the documentation, must install Sphinx.
.IP \(bu 2
The \fBINTERNAL_WCWIDTH\fP build option has been removed, as fish now
always uses an internal \fBwcwidth\fP function. It has a number of
configuration options that make it more suitable for general use
(\fI\%#5777\fP).
.IP \(bu 2
mandoc can now be used to format the output from \fB\-\-help\fP if
\fBnroff\fP is not installed, reducing the number of external
dependencies on systems with \fBmandoc\fP installed (\fI\%#5489\fP).
.IP \(bu 2
Some bugs preventing building on Solaris\-derived systems such as
Illumos were fixed (\fI\%#5458\fP, \fI\%#5461\fP, \fI\%#5611\fP).
.IP \(bu 2
Completions for \fBnpm\fP, \fBbower\fP and \fByarn\fP no longer require the
\fBjq\fP utility for full functionality, but will use Python instead if
it is available.
.IP \(bu 2
The paths for completions, functions and configuration snippets have
been extended. On systems that define \fBXDG_DATA_DIRS\fP, each of the
directories in this variable are searched in the subdirectories
\fBfish/vendor_completions.d\fP, \fBfish/vendor_functions.d\fP, and
\fBfish/vendor_conf.d\fP respectively. On systems that do not define
this variable in the environment, the vendor directories are searched
for in both the installation prefix and the default “extra”
directory, which now defaults to \fB/usr/local\fP (\fI\%#5029\fP).
.UNINDENT

.sp
.ce
----

.ce 0
.sp
.SS fish 3.0.2 (released February 19, 2019)
.sp
This release of fish fixes an issue discovered in fish 3.0.1.
.SS Fixes and improvements
.INDENT 0.0
.IP \(bu 2
The PWD environment variable is now ignored if it does not resolve to
the true working directory, fixing strange behaviour in terminals
started by editors and IDEs (\fI\%#5647\fP).
.UNINDENT
.sp
If you are upgrading from version 2.7.1 or before, please also review
the release notes for 3.0.1, 3.0.0 and 3.0b1 (included below).
.SS fish 3.0.1 (released February 11, 2019)
.sp
This release of fish fixes a number of major issues discovered in fish
3.0.0.
.SS Fixes and improvements
.INDENT 0.0
.IP \(bu 2
\fBexec\fP does not complain about running foreground jobs when called
(\fI\%#5449\fP).
.IP \(bu 2
while loops now evaluate to the last executed command in the loop
body (or zero if the body was empty), matching POSIX semantics
(\fI\%#4982\fP).
.IP \(bu 2
\fBread \-\-silent\fP no longer echoes to the tty when run from a
non\-interactive script (\fI\%#5519\fP).
.IP \(bu 2
On macOS, path entries with spaces in \fB/etc/paths\fP and
\fB/etc/paths.d\fP now correctly set path entries with spaces.
Likewise, \fBMANPATH\fP is correctly set from \fB/etc/manpaths\fP and
\fB/etc/manpaths.d\fP (\fI\%#5481\fP).
.IP \(bu 2
fish starts correctly under Cygwin/MSYS2 (\fI\%#5426\fP).
.IP \(bu 2
The \fBpager\-toggle\-search\fP binding (Ctrl\-S by default) will now
activate the search field, even when the pager is not focused.
.IP \(bu 2
The error when a command is not found is now printed a single time,
instead of once per argument (\fI\%#5588\fP).
.IP \(bu 2
Fixes and improvements to the git completions, including printing
correct paths with older git versions, fuzzy matching again, reducing
unnecessary offers of root paths (starting with \fB:/\fP) (\fI\%#5578\fP,
\fI\%#5574\fP, \fI\%#5476\fP), and ignoring shell aliases, so enterprising users can
set up the wrapping command (via
\fBset \-g __fish_git_alias_$command $whatitwraps\fP) (\fI\%#5412\fP).
.IP \(bu 2
Significant performance improvements to core shell functions (\fI\%#5447\fP)
and to the \fBkill\fP completions (\fI\%#5541\fP).
.IP \(bu 2
Starting in symbolically\-linked working directories works correctly
(\fI\%#5525\fP).
.IP \(bu 2
The default \fBfish_title\fP function no longer contains extra spaces
(\fI\%#5517\fP).
.IP \(bu 2
The \fBnim\fP prompt now works correctly when chosen in the Web\-based
configuration (\fI\%#5490\fP).
.IP \(bu 2
\fBstring\fP now prints help to stdout, like other builtins (\fI\%#5495\fP).
.IP \(bu 2
Killing the terminal while fish is in vi normal mode will no longer
send it spinning and eating CPU. (\fI\%#5528\fP)
.IP \(bu 2
A number of crashes have been fixed (\fI\%#5550\fP, \fI\%#5548\fP, \fI\%#5479\fP, \fI\%#5453\fP).
.IP \(bu 2
Improvements to the documentation and certain completions.
.UNINDENT
.SS Known issues
.sp
There is one significant known issue that was not corrected before the
release:
.INDENT 0.0
.IP \(bu 2
fish does not run correctly under Windows Services for Linux before
Windows 10 version 1809/17763, and the message warning of this may
not be displayed (\fI\%#5619\fP).
.UNINDENT
.sp
If you are upgrading from version 2.7.1 or before, please also review
the release notes for 3.0.0 and 3.0b1 (included below).

.sp
.ce
----

.ce 0
.sp
.SS fish 3.0.0 (released December 28, 2018)
.sp
fish 3 is a major release, which introduces some breaking changes
alongside improved functionality. Although most existing scripts will
continue to work, they should be reviewed against the list contained in
the 3.0b1 release notes below.
.sp
Compared to the beta release of fish 3.0b1, fish version 3.0.0:
.INDENT 0.0
.IP \(bu 2
builds correctly against musl libc (\fI\%#5407\fP)
.IP \(bu 2
handles huge numeric arguments to \fBtest\fP correctly (\fI\%#5414\fP)
.IP \(bu 2
removes the history colouring introduced in 3.0b1, which did not
always work correctly
.UNINDENT
.sp
There is one significant known issue which was not able to be corrected
before the release:
.INDENT 0.0
.IP \(bu 2
fish 3.0.0 builds on Cygwin (\fI\%#5423\fP), but does not run correctly
(\fI\%#5426\fP) and will result in a hanging terminal when started. Cygwin
users are encouraged to continue using 2.7.1 until a release which
corrects this is available.
.UNINDENT
.sp
If you are upgrading from version 2.7.1 or before, please also review
the release notes for 3.0b1 (included below).

.sp
.ce
----

.ce 0
.sp
.SS fish 3.0b1 (released December 11, 2018)
.sp
fish 3 is a major release, which introduces some breaking changes
alongside improved functionality. Although most existing scripts will
continue to work, they should be reviewed against the list below.
.SS Notable non\-backward compatible changes
.INDENT 0.0
.IP \(bu 2
Process and job expansion has largely been removed. \fB%\fP will no
longer perform these expansions, except for \fB%self\fP for the PID of
the current shell. Additionally, job management commands (\fBdisown\fP,
\fBwait\fP, \fBbg\fP, \fBfg\fP and \fBkill\fP) will expand job specifiers
starting with \fB%\fP (\fI\%#4230\fP, \fI\%#1202\fP).
.IP \(bu 2
\fBset x[1] x[2] a b\fP, to set multiple elements of an array at once,
is no longer valid syntax (\fI\%#4236\fP).
.IP \(bu 2
A literal \fB{}\fP now expands to itself, rather than nothing. This
makes working with \fBfind \-exec\fP easier (\fI\%#1109\fP, \fI\%#4632\fP).
.IP \(bu 2
Literally accessing a zero\-index is now illegal syntax and is caught
by the parser (\fI\%#4862\fP). (fish indices start at 1)
.IP \(bu 2
Successive commas in brace expansions are handled in less surprising
manner. For example, \fB{,,,}\fP expands to four empty strings rather
than an empty string, a comma and an empty string again (\fI\%#3002\fP,
\fI\%#4632\fP).
.IP \(bu 2
\fBfor\fP loop control variables are no longer local to the \fBfor\fP
block (\fI\%#1935\fP).
.IP \(bu 2
Variables set in \fBif\fP and \fBwhile\fP conditions are available
outside the block (\fI\%#4820\fP).
.IP \(bu 2
Local exported (\fBset \-lx\fP) vars are now visible to functions
(\fI\%#1091\fP).
.IP \(bu 2
The new \fBmath\fP builtin (see below) does not support logical
expressions; \fBtest\fP should be used instead (\fI\%#4777\fP).
.IP \(bu 2
Range expansion will now behave sensibly when given a single positive
and negative index (\fB$foo[5..\-1]\fP or \fB$foo[\-1..5]\fP), clamping to
the last valid index without changing direction if the list has fewer
elements than expected.
.IP \(bu 2
\fBread\fP now uses \fB\-s\fP as short for \fB\-\-silent\fP (à la \fBbash\fP);
\fB\-\-shell\fP’s abbreviation (formerly \fB\-s\fP) is now \fB\-S\fP instead
(\fI\%#4490\fP).
.IP \(bu 2
\fBcd\fP no longer resolves symlinks. fish now maintains a virtual
path, matching other shells (\fI\%#3350\fP).
.IP \(bu 2
\fBsource\fP now requires an explicit \fB\-\fP as the filename to read
from the terminal (\fI\%#2633\fP).
.IP \(bu 2
Arguments to \fBend\fP are now errors, instead of being silently
ignored.
.IP \(bu 2
The names \fBargparse\fP, \fBread\fP, \fBset\fP, \fBstatus\fP, \fBtest\fP and
\fB[\fP are now reserved and not allowed as function names. This
prevents users unintentionally breaking stuff (\fI\%#3000\fP).
.IP \(bu 2
The \fBfish_user_abbreviations\fP variable is no longer used;
abbreviations will be migrated to the new storage format
automatically.
.IP \(bu 2
The \fBFISH_READ_BYTE_LIMIT\fP variable is now called
\fBfish_byte_limit\fP (\fI\%#4414\fP).
.IP \(bu 2
Environment variables are no longer split into arrays based on the
record separator character on startup. Instead, variables are not
split, unless their name ends in PATH, in which case they are split
on colons (\fI\%#436\fP).
.IP \(bu 2
The \fBhistory\fP builtin’s \fB\-\-with\-time\fP option has been removed;
this has been deprecated in favor of \fB\-\-show\-time\fP since 2.7.0
(\fI\%#4403\fP).
.IP \(bu 2
The internal variables \fB__fish_datadir\fP and \fB__fish_sysconfdir\fP
are now known as \fB__fish_data_dir\fP and \fB__fish_sysconf_dir\fP
respectively.
.UNINDENT
.SS Deprecations
.sp
With the release of fish 3, a number of features have been marked for
removal in the future. All users are encouraged to explore alternatives.
A small number of these features are currently behind feature flags,
which are turned on at present but may be turned off by default in the
future.
.sp
A new feature flags mechanism is added for staging deprecations and
breaking changes. Feature flags may be specified at launch with
\fBfish \-\-features ...\fP or by setting the universal \fBfish_features\fP
variable. (\fI\%#4940\fP)
.INDENT 0.0
.IP \(bu 2
The use of the \fBIFS\fP variable for \fBread\fP is deprecated; \fBIFS\fP
will be ignored in the future (\fI\%#4156\fP). Use the \fBread \-\-delimiter\fP
option instead.
.IP \(bu 2
The \fBfunction \-\-on\-process\-exit\fP switch will be removed in future
(\fI\%#4700\fP). Use the \fBfish_exit\fP event instead:
\fBfunction \-\-on\-event fish_exit\fP\&.
.IP \(bu 2
\fB$_\fP is deprecated and will removed in the future (\fI\%#813\fP). Use
\fBstatus current\-command\fP in a command substitution instead.
.IP \(bu 2
\fB^\fP as a redirection deprecated and will be removed in the future.
(\fI\%#4394\fP). Use \fB2>\fP to redirect stderr. This is controlled by the
\fBstderr\-nocaret\fP feature flag.
.IP \(bu 2
\fB?\fP as a glob (wildcard) is deprecated and will be removed in the
future (\fI\%#4520\fP). This is controlled by the \fBqmark\-noglob\fP feature
flag.
.UNINDENT
.SS Notable fixes and improvements
.SS Syntax changes and new commands
.INDENT 0.0
.IP \(bu 2
fish now supports \fB&&\fP (like \fBand\fP), \fB||\fP (like \fBor\fP), and
\fB!\fP (like \fBnot\fP), for better migration from POSIX\-compliant
shells (\fI\%#4620\fP).
.IP \(bu 2
Variables may be used as commands (\fI\%#154\fP).
.IP \(bu 2
fish may be started in private mode via \fBfish \-\-private\fP\&. Private
mode fish sessions do not have access to the history file and any
commands evaluated in private mode are not persisted for future
sessions. A session variable \fB$fish_private_mode\fP can be queried to
detect private mode and adjust the behavior of scripts accordingly to
respect the user’s wish for privacy.
.IP \(bu 2
A new \fBwait\fP command for waiting on backgrounded processes (\fI\%#4498\fP).
.IP \(bu 2
\fBmath\fP is now a builtin rather than a wrapper around \fBbc\fP
(\fI\%#3157\fP). Floating point computations is now used by default, and can
be controlled with the new \fB\-\-scale\fP option (\fI\%#4478\fP).
.IP \(bu 2
Setting \fB$PATH\fP no longer warns on non\-existent directories,
allowing for a single $PATH to be shared across machines (eg via
dotfiles) (\fI\%#2969\fP).
.IP \(bu 2
\fBwhile\fP sets \fB$status\fP to a non\-zero value if the loop is not
executed (\fI\%#4982\fP).
.IP \(bu 2
Command substitution output is now limited to 10 MB by default,
controlled by the \fBfish_read_limit\fP variable (\fI\%#3822\fP). Notably, this
is larger than most operating systems’ argument size limit, so trying
to pass argument lists this size to external commands has never
worked.
.IP \(bu 2
The machine hostname, where available, is now exposed as the
\fB$hostname\fP reserved variable. This removes the dependency on the
\fBhostname\fP executable (\fI\%#4422\fP).
.IP \(bu 2
Bare \fBbind\fP invocations in config.fish now work. The
\fBfish_user_key_bindings\fP function is no longer necessary, but will
still be executed if it exists (\fI\%#5191\fP).
.IP \(bu 2
\fB$fish_pid\fP and \fB$last_pid\fP are available as replacements for
\fB%self\fP and \fB%last\fP\&.
.UNINDENT
.SS New features in commands
.INDENT 0.0
.IP \(bu 2
\fBalias\fP has a new \fB\-\-save\fP option to save the generated function
immediately (\fI\%#4878\fP).
.IP \(bu 2
\fBbind\fP has a new \fB\-\-silent\fP option to ignore bind requests for
named keys not available under the current terminal (\fI\%#4188\fP, \fI\%#4431\fP).
.IP \(bu 2
\fBcomplete\fP has a new \fB\-\-keep\-order\fP option to show the provided
or dynamically\-generated argument list in the same order as
specified, rather than alphabetically (\fI\%#361\fP).
.IP \(bu 2
\fBexec\fP prompts for confirmation if background jobs are running.
.IP \(bu 2
\fBfunced\fP has a new \fB\-\-save\fP option to automatically save the
edited function after successfully editing (\fI\%#4668\fP).
.IP \(bu 2
\fBfunctions\fP has a new \fB\-\-handlers\fP option to show functions
registered as event handlers (\fI\%#4694\fP).
.IP \(bu 2
\fBhistory search\fP supports globs for wildcard searching (\fI\%#3136\fP) and
has a new \fB\-\-reverse\fP option to show entries from oldest to newest
(\fI\%#4375\fP).
.IP \(bu 2
\fBjobs\fP has a new \fB\-\-quiet\fP option to silence the output.
.IP \(bu 2
\fBread\fP has a new \fB\-\-delimiter\fP option for splitting input into
arrays (\fI\%#4256\fP).
.IP \(bu 2
\fBread\fP writes directly to stdout if called without arguments
(\fI\%#4407\fP).
.IP \(bu 2
\fBread\fP can now read individual lines into separate variables
without consuming the input in its entirety via the new \fB/\-\-line\fP
option.
.IP \(bu 2
\fBset\fP has new \fB\-\-append\fP and \fB\-\-prepend\fP options (\fI\%#1326\fP).
.IP \(bu 2
\fBstring match\fP with an empty pattern and \fB\-\-entire\fP in glob mode
now matches everything instead of nothing (\fI\%#4971\fP).
.IP \(bu 2
\fBstring split\fP supports a new \fB\-\-no\-empty\fP option to exclude
empty strings from the result (\fI\%#4779\fP).
.IP \(bu 2
\fBstring\fP has new subcommands \fBsplit0\fP and \fBjoin0\fP for working
with NUL\-delimited output.
.IP \(bu 2
\fBstring\fP no longer stops processing text after NUL characters
(\fI\%#4605\fP)
.IP \(bu 2
\fBstring escape\fP has a new \fB\-\-style regex\fP option for escaping
strings to be matched literally in \fBstring\fP regex operations.
.IP \(bu 2
\fBtest\fP now supports floating point values in numeric comparisons.
.UNINDENT
.SS Interactive improvements
.INDENT 0.0
.IP \(bu 2
A pipe at the end of a line now allows the job to continue on the
next line (\fI\%#1285\fP).
.IP \(bu 2
Italics and dim support out of the box on macOS for Terminal.app and
iTerm (\fI\%#4436\fP).
.IP \(bu 2
\fBcd\fP tab completions no longer descend into the deepest unambiguous
path (\fI\%#4649\fP).
.IP \(bu 2
Pager navigation has been improved. Most notably, moving down now
wraps around, moving up from the commandline now jumps to the last
element and moving right and left now reverse each other even when
wrapping around (\fI\%#4680\fP).
.IP \(bu 2
Typing normal characters while the completion pager is active no
longer shows the search field. Instead it enters them into the
command line, and ends paging (\fI\%#2249\fP).
.IP \(bu 2
A new input binding \fBpager\-toggle\-search\fP toggles the search field
in the completions pager on and off. By default, this is bound to
Ctrl\-S.
.IP \(bu 2
Searching in the pager now does a full fuzzy search (\fI\%#5213\fP).
.IP \(bu 2
The pager will now show the full command instead of just its last
line if the number of completions is large (\fI\%#4702\fP).
.IP \(bu 2
Abbreviations can be tab\-completed (\fI\%#3233\fP).
.IP \(bu 2
Tildes in file names are now properly escaped in completions (\fI\%#2274\fP).
.IP \(bu 2
Wrapping completions (from \fBcomplete \-\-wraps\fP or
\fBfunction \-\-wraps\fP) can now inject arguments. For example,
\fBcomplete gco \-\-wraps \(aqgit checkout\(aq\fP now works properly (\fI\%#1976\fP).
The \fBalias\fP function has been updated to respect this behavior.
.IP \(bu 2
Path completions now support expansions, meaning expressions like
\fBpython ~/<TAB>\fP now provides file suggestions just like any other
relative or absolute path. (This includes support for other
expansions, too.)
.IP \(bu 2
Autosuggestions try to avoid arguments that are already present in
the command line.
.IP \(bu 2
Notifications about crashed processes are now always shown, even in
command substitutions (\fI\%#4962\fP).
.IP \(bu 2
The screen is no longer reset after a BEL, fixing graphical glitches
(\fI\%#3693\fP).
.IP \(bu 2
vi\-mode now supports ‘;’ and ‘,’ motions. This introduces new
{forward,backward}\-jump\-till and repeat\-jump{,\-reverse} bind
functions (\fI\%#5140\fP).
.IP \(bu 2
The \fB*y\fP vi\-mode binding now works (\fI\%#5100\fP).
.IP \(bu 2
True color is now enabled in neovim by default (\fI\%#2792\fP).
.IP \(bu 2
Terminal size variables (\fB$COLUMNS\fP/\fB$LINES\fP) are now updated
before \fBfish_prompt\fP is called, allowing the prompt to react
(\fI\%#904\fP).
.IP \(bu 2
Multi\-line prompts no longer repeat when the terminal is resized
(\fI\%#2320\fP).
.IP \(bu 2
\fBxclip\fP support has been added to the clipboard integration
(\fI\%#5020\fP).
.IP \(bu 2
The Alt\-P keybinding paginates the last command if the command line
is empty.
.IP \(bu 2
\fB$cmd_duration\fP is no longer reset when no command is executed
(\fI\%#5011\fP).
.IP \(bu 2
Deleting a one\-character word no longer erases the next word as well
(\fI\%#4747\fP).
.IP \(bu 2
Token history search (Alt\-Up) omits duplicate entries (\fI\%#4795\fP).
.IP \(bu 2
The \fBfish_escape_delay_ms\fP timeout, allowing the use of the escape
key both on its own and as part of a control sequence, was applied to
all control characters; this has been reduced to just the escape key.
.IP \(bu 2
Completing a function shows the description properly (\fI\%#5206\fP).
.IP \(bu 2
Added completions for
.INDENT 2.0
.IP \(bu 2
\fBansible\fP, including \fBansible\-galaxy\fP, \fBansible\-playbook\fP
and \fBansible\-vault\fP (\fI\%#4697\fP)
.IP \(bu 2
\fBbb\-power\fP (\fI\%#4800\fP)
.IP \(bu 2
\fBbd\fP (\fI\%#4472\fP)
.IP \(bu 2
\fBbower\fP
.IP \(bu 2
\fBclang\fP and \fBclang++\fP (\fI\%#4174\fP)
.IP \(bu 2
\fBconda\fP (\fI\%#4837\fP)
.IP \(bu 2
\fBconfigure\fP (for autoconf\-generated files only)
.IP \(bu 2
\fBcurl\fP
.IP \(bu 2
\fBdoas\fP (\fI\%#5196\fP)
.IP \(bu 2
\fBebuild\fP (\fI\%#4911\fP)
.IP \(bu 2
\fBemaint\fP (\fI\%#4758\fP)
.IP \(bu 2
\fBeopkg\fP (\fI\%#4600\fP)
.IP \(bu 2
\fBexercism\fP (\fI\%#4495\fP)
.IP \(bu 2
\fBhjson\fP
.IP \(bu 2
\fBhugo\fP (\fI\%#4529\fP)
.IP \(bu 2
\fBj\fP (from autojump \fI\%#4344\fP)
.IP \(bu 2
\fBjbake\fP (\fI\%#4814\fP)
.IP \(bu 2
\fBjhipster\fP (\fI\%#4472\fP)
.IP \(bu 2
\fBkitty\fP
.IP \(bu 2
\fBkldload\fP
.IP \(bu 2
\fBkldunload\fP
.IP \(bu 2
\fBmakensis\fP (\fI\%#5242\fP)
.IP \(bu 2
\fBmeson\fP
.IP \(bu 2
\fBmkdocs\fP (\fI\%#4906\fP)
.IP \(bu 2
\fBngrok\fP (\fI\%#4642\fP)
.IP \(bu 2
OpenBSD’s \fBpkg_add\fP, \fBpkg_delete\fP, \fBpkg_info\fP, \fBpfctl\fP,
\fBrcctl\fP, \fBsignify\fP, and \fBvmctl\fP (\fI\%#4584\fP)
.IP \(bu 2
\fBopenocd\fP
.IP \(bu 2
\fBoptipng\fP
.IP \(bu 2
\fBopkg\fP (\fI\%#5168\fP)
.IP \(bu 2
\fBpandoc\fP (\fI\%#2937\fP)
.IP \(bu 2
\fBport\fP (\fI\%#4737\fP)
.IP \(bu 2
\fBpowerpill\fP (\fI\%#4800\fP)
.IP \(bu 2
\fBpstack\fP (\fI\%#5135\fP)
.IP \(bu 2
\fBserve\fP (\fI\%#5026\fP)
.IP \(bu 2
\fBttx\fP
.IP \(bu 2
\fBunzip\fP
.IP \(bu 2
\fBvirsh\fP (\fI\%#5113\fP)
.IP \(bu 2
\fBxclip\fP (\fI\%#5126\fP)
.IP \(bu 2
\fBxsv\fP
.IP \(bu 2
\fBzfs\fP and \fBzpool\fP (\fI\%#4608\fP)
.UNINDENT
.IP \(bu 2
Lots of improvements to completions (especially \fBdarcs\fP (\fI\%#5112\fP),
\fBgit\fP, \fBhg\fP and \fBsudo\fP).
.IP \(bu 2
Completions for \fByarn\fP and \fBnpm\fP now require the
\fBall\-the\-package\-names\fP NPM package for full functionality.
.IP \(bu 2
Completions for \fBbower\fP and \fByarn\fP now require the \fBjq\fP utility
for full functionality.
.IP \(bu 2
Improved French translations.
.UNINDENT
.SS Other fixes and improvements
.INDENT 0.0
.IP \(bu 2
Significant performance improvements to \fBabbr\fP (\fI\%#4048\fP), setting
variables (\fI\%#4200\fP, \fI\%#4341\fP), executing functions, globs (\fI\%#4579\fP),
\fBstring\fP reading from standard input (\fI\%#4610\fP), and slicing history
(in particular, \fB$history[1]\fP for the last executed command).
.IP \(bu 2
Fish’s internal wcwidth function has been updated to deal with newer
Unicode, and the width of some characters can be configured via the
\fBfish_ambiguous_width\fP (\fI\%#5149\fP) and \fBfish_emoji_width\fP (\fI\%#2652\fP)
variables. Alternatively, a new build\-time option INTERNAL_WCWIDTH
can be used to use the system’s wcwidth instead (\fI\%#4816\fP).
.IP \(bu 2
\fBfunctions\fP correctly supports \fB\-d\fP as the short form of
\fB\-\-description\fP\&. (\fI\%#5105\fP)
.IP \(bu 2
\fB/etc/paths\fP is now parsed like macOS’ bash \fBpath_helper\fP, fixing
$PATH order (\fI\%#4336\fP, \fI\%#4852\fP) on macOS.
.IP \(bu 2
Using a read\-only variable in a \fBfor\fP loop produces an error,
rather than silently producing incorrect results (\fI\%#4342\fP).
.IP \(bu 2
The universal variables filename no longer contains the hostname or
MAC address. It is now at the fixed location
\fB\&.config/fish/fish_variables\fP (\fI\%#1912\fP).
.IP \(bu 2
Exported variables in the global or universal scope no longer have
their exported status affected by local variables (\fI\%#2611\fP).
.IP \(bu 2
Major rework of terminal and job handling to eliminate bugs (\fI\%#3805\fP,
\fI\%#3952\fP, \fI\%#4178\fP, \fI\%#4235\fP, \fI\%#4238\fP, \fI\%#4540\fP, \fI\%#4929\fP, \fI\%#5210\fP).
.IP \(bu 2
Improvements to the manual page completion generator (\fI\%#2937\fP, \fI\%#4313\fP).
.IP \(bu 2
\fBsuspend \-\-force\fP now works correctly (\fI\%#4672\fP).
.IP \(bu 2
Pressing Ctrl\-C while running a script now reliably terminates fish
(\fI\%#5253\fP).
.UNINDENT
.SS For distributors and developers
.INDENT 0.0
.IP \(bu 2
fish ships with a new build system based on CMake. CMake 3.2 is the
minimum required version. Although the autotools\-based Makefile and
the Xcode project are still shipped with this release, they will be
removed in the near future. All distributors and developers are
encouraged to migrate to the CMake build.
.IP \(bu 2
Build scripts for most platforms no longer require bash, using the
standard sh instead.
.IP \(bu 2
The \fBhostname\fP command is no longer required for fish to operate.
.UNINDENT
.sp
–
.SS fish 2.7.1 (released December 23, 2017)
.sp
This release of fish fixes an issue where iTerm 2 on macOS would display
a warning about paste bracketing being left on when starting a new fish
session (\fI\%#4521\fP).
.sp
If you are upgrading from version 2.6.0 or before, please also review
the release notes for 2.7.0 and 2.7b1 (included below).
.sp
–
.SS fish 2.7.0 (released November 23, 2017)
.sp
There are no major changes between 2.7b1 and 2.7.0. If you are upgrading
from version 2.6.0 or before, please also review the release notes for
2.7b1 (included below).
.sp
Xcode builds and macOS packages could not be produced with 2.7b1, but
this is fixed in 2.7.0.
.sp
–
.SS fish 2.7b1 (released October 31, 2017)
.SS Notable improvements
.INDENT 0.0
.IP \(bu 2
A new \fBcdh\fP (change directory using recent history) command
provides a more friendly alternative to prevd/nextd and pushd/popd
(\fI\%#2847\fP).
.IP \(bu 2
A new \fBargparse\fP command is available to allow fish script to parse
arguments with the same behavior as builtin commands. This also
includes the \fBfish_opt\fP helper command. (\fI\%#4190\fP).
.IP \(bu 2
Invalid array indexes are now silently ignored (\fI\%#826\fP, \fI\%#4127\fP).
.IP \(bu 2
Improvements to the debugging facility, including a prompt specific
to the debugger (\fBfish_breakpoint_prompt\fP) and a
\fBstatus is\-breakpoint\fP subcommand (\fI\%#1310\fP).
.IP \(bu 2
\fBstring\fP supports new \fBlower\fP and \fBupper\fP subcommands, for
altering the case of strings (\fI\%#4080\fP). The case changing is not
locale\-aware yet.\- \fBstring escape\fP has a new \fB\-\-style=xxx\fP flag
where \fBxxx\fP can be \fBscript\fP, \fBvar\fP, or \fBurl\fP (\fI\%#4150\fP), and can
be reversed with \fBstring unescape\fP (\fI\%#3543\fP).
.IP \(bu 2
History can now be split into sessions with the \fBfish_history\fP
variable, or not saved to disk at all (\fI\%#102\fP).
.IP \(bu 2
Read history is now controlled by the \fBfish_history\fP variable
rather than the \fB\-\-mode\-name\fP flag (\fI\%#1504\fP).
.IP \(bu 2
\fBcommand\fP now supports an \fB\-\-all\fP flag to report all directories
with the command. \fBwhich\fP is no longer a runtime dependency
(\fI\%#2778\fP).
.IP \(bu 2
fish can run commands before starting an interactive session using
the new \fB\-\-init\-command\fP/\fB\-C\fP options (\fI\%#4164\fP).
.IP \(bu 2
\fBset\fP has a new \fB\-\-show\fP option to show lots of information about
variables (\fI\%#4265\fP).
.UNINDENT
.SS Other significant changes
.INDENT 0.0
.IP \(bu 2
The \fBCOLUMNS\fP and \fBLINES\fP environment variables are now correctly
set the first time \fBfish_prompt\fP is run (\fI\%#4141\fP).
.IP \(bu 2
\fBcomplete\fP’s \fB\-\-no\-files\fP option works as intended (\fI\%#112\fP).
.IP \(bu 2
\fBecho \-h\fP now correctly echoes \fB\-h\fP in line with other shells
(\fI\%#4120\fP).
.IP \(bu 2
The \fBexport\fP compatibility function now returns zero on success,
rather than always returning 1 (\fI\%#4435\fP).
.IP \(bu 2
Stop converting empty elements in MANPATH to “.” (\fI\%#4158\fP). The
behavior being changed was introduced in fish 2.6.0.
.IP \(bu 2
\fBcount \-h\fP and \fBcount \-\-help\fP now return 1 rather than produce
command help output (\fI\%#4189\fP).
.IP \(bu 2
An attempt to \fBread\fP which stops because too much data is available
still defines the variables given as parameters (\fI\%#4180\fP).
.IP \(bu 2
A regression in fish 2.4.0 which prevented \fBpushd +1\fP from working
has been fixed (\fI\%#4091\fP).
.IP \(bu 2
A regression in fish 2.6.0 where multiple \fBread\fP commands in
non\-interactive scripts were broken has been fixed (\fI\%#4206\fP).
.IP \(bu 2
A regression in fish 2.6.0 involving universal variables with
side\-effects at startup such as \fBset \-U fish_escape_delay_ms 10\fP
has been fixed (\fI\%#4196\fP).
.IP \(bu 2
Added completions for:
.INDENT 2.0
.IP \(bu 2
\fBas\fP (\fI\%#4130\fP)
.IP \(bu 2
\fBcdh\fP (\fI\%#2847\fP)
.IP \(bu 2
\fBdhcpd\fP (\fI\%#4115\fP)
.IP \(bu 2
\fBezjail\-admin\fP (\fI\%#4324\fP)
.IP \(bu 2
Fabric’s \fBfab\fP (\fI\%#4153\fP)
.IP \(bu 2
\fBgrub\-file\fP (\fI\%#4119\fP)
.IP \(bu 2
\fBgrub\-install\fP (\fI\%#4119\fP)
.IP \(bu 2
\fBjest\fP (\fI\%#4142\fP)
.IP \(bu 2
\fBkdeconnect\-cli\fP
.IP \(bu 2
\fBmagneto\fP (\fI\%#4043\fP, \fI\%#4108\fP)
.IP \(bu 2
\fBmdadm\fP (\fI\%#4198\fP)
.IP \(bu 2
\fBpasswd\fP (\fI\%#4209\fP)
.IP \(bu 2
\fBpip\fP and \fBpipenv\fP (\fI\%#4448\fP)
.IP \(bu 2
\fBs3cmd\fP (\fI\%#4332\fP)
.IP \(bu 2
\fBsbt\fP (\fI\%#4347\fP)
.IP \(bu 2
\fBsnap\fP (\fI\%#4215\fP)
.IP \(bu 2
Sublime Text 3’s \fBsubl\fP (\fI\%#4277\fP)
.UNINDENT
.IP \(bu 2
Lots of improvements to completions.
.IP \(bu 2
Updated Chinese and French translations.
.IP \(bu 2
Improved completions for:
.INDENT 2.0
.IP \(bu 2
\fBapt\fP
.IP \(bu 2
\fBcd\fP (\fI\%#4061\fP)
.IP \(bu 2
\fBcomposer\fP (\fI\%#4295\fP)
.IP \(bu 2
\fBeopkg\fP
.IP \(bu 2
\fBflatpak\fP (\fI\%#4456\fP)
.IP \(bu 2
\fBgit\fP (\fI\%#4117\fP, \fI\%#4147\fP, \fI\%#4329\fP, \fI\%#4368\fP)
.IP \(bu 2
\fBgphoto2\fP
.IP \(bu 2
\fBkillall\fP (\fI\%#4052\fP)
.IP \(bu 2
\fBln\fP
.IP \(bu 2
\fBnpm\fP (\fI\%#4241\fP)
.IP \(bu 2
\fBssh\fP (\fI\%#4377\fP)
.IP \(bu 2
\fBtail\fP
.IP \(bu 2
\fBxdg\-mime\fP (\fI\%#4333\fP)
.IP \(bu 2
\fBzypper\fP (\fI\%#4325\fP)
.UNINDENT
.UNINDENT
.SS fish 2.6.0 (released June 3, 2017)
.sp
Since the beta release of fish 2.6b1, fish version 2.6.0 contains a
number of minor fixes, new completions for \fBmagneto\fP (\fI\%#4043\fP), and
improvements to the documentation.
.SS Known issues
.INDENT 0.0
.IP \(bu 2
Apple macOS Sierra 10.12.5 introduced a problem with launching web
browsers from other programs using AppleScript. This affects the fish
Web configuration (\fBfish_config\fP); users on these platforms will
need to manually open the address displayed in the terminal, such as
by copying and pasting it into a browser. This problem will be fixed
with macOS 10.12.6.
.UNINDENT
.sp
If you are upgrading from version 2.5.0 or before, please also review
the release notes for 2.6b1 (included below).

.sp
.ce
----

.ce 0
.sp
.SS fish 2.6b1 (released May 14, 2017)
.SS Notable fixes and improvements
.INDENT 0.0
.IP \(bu 2
Jobs running in the background can now be removed from the list of
jobs with the new \fBdisown\fP builtin, which behaves like the same
command in other shells (\fI\%#2810\fP).
.IP \(bu 2
Command substitutions now have access to the terminal, like in other
shells. This allows tools like \fBfzf\fP to work properly (\fI\%#1362\fP,
\fI\%#3922\fP).
.IP \(bu 2
In cases where the operating system does not report the size of the
terminal, the \fBCOLUMNS\fP and \fBLINES\fP environment variables are
used; if they are unset, a default of 80x24 is assumed.
.IP \(bu 2
New French (\fI\%#3772\fP & \fI\%#3788\fP) and improved German (\fI\%#3834\fP) translations.
.IP \(bu 2
fish no longer depends on the \fBwhich\fP external command.
.UNINDENT
.SS Other significant changes
.INDENT 0.0
.IP \(bu 2
Performance improvements in launching processes, including major
reductions in signal blocking. Although this has been heavily tested,
it may cause problems in some circumstances; set the
\fBFISH_NO_SIGNAL_BLOCK\fP variable to 0 in your fish configuration
file to return to the old behaviour (\fI\%#2007\fP).
.IP \(bu 2
Performance improvements in prompts and functions that set lots of
colours (\fI\%#3793\fP).
.IP \(bu 2
The Delete key no longer deletes backwards (a regression in 2.5.0).
.IP \(bu 2
\fBfunctions\fP supports a new \fB\-\-details\fP option, which identifies
where the function was loaded from (\fI\%#3295\fP), and a
\fB\-\-details \-\-verbose\fP option which includes the function
description (\fI\%#597\fP).
.IP \(bu 2
\fBread\fP will read up to 10 MiB by default, leaving the target
variable empty and exiting with status 122 if the line is too long.
You can set a different limit with the \fBFISH_READ_BYTE_LIMIT\fP
variable.
.IP \(bu 2
\fBread\fP supports a new \fB\-\-silent\fP option to hide the characters
typed (\fI\%#838\fP), for when reading sensitive data from the terminal.
\fBread\fP also now accepts simple strings for the prompt (rather than
scripts) with the new \fB\-P\fP and \fB\-\-prompt\-str\fP options (\fI\%#802\fP).
.IP \(bu 2
\fBexport\fP and \fBsetenv\fP now understand colon\-separated \fBPATH\fP,
\fBCDPATH\fP and \fBMANPATH\fP variables.
.IP \(bu 2
\fBsetenv\fP is no longer a simple alias for \fBset \-gx\fP and will
complain, just like the csh version, if given more than one value
(\fI\%#4103\fP).
.IP \(bu 2
\fBbind\fP supports a new \fB\-\-list\-modes\fP option (\fI\%#3872\fP).
.IP \(bu 2
\fBbg\fP will check all of its arguments before backgrounding any jobs;
any invalid arguments will cause a failure, but non\-existent (eg
recently exited) jobs are ignored (\fI\%#3909\fP).
.IP \(bu 2
\fBfunced\fP warns if the function being edited has not been modified
(\fI\%#3961\fP).
.IP \(bu 2
\fBprintf\fP correctly outputs “long long” integers (\fI\%#3352\fP).
.IP \(bu 2
\fBstatus\fP supports a new \fBcurrent\-function\fP subcommand to print
the current function name (\fI\%#1743\fP).
.IP \(bu 2
\fBstring\fP supports a new \fBrepeat\fP subcommand (\fI\%#3864\fP).
\fBstring match\fP supports a new \fB\-\-entire\fP option to emit the
entire line matched by a pattern (\fI\%#3957\fP). \fBstring replace\fP supports
a new \fB\-\-filter\fP option to only emit lines which underwent a
replacement (\fI\%#3348\fP).
.IP \(bu 2
\fBtest\fP supports the \fB\-k\fP option to test for sticky bits (\fI\%#733\fP).
.IP \(bu 2
\fBumask\fP understands symbolic modes (\fI\%#738\fP).
.IP \(bu 2
Empty components in the \fBCDPATH\fP, \fBMANPATH\fP and \fBPATH\fP
variables are now converted to “.” (\fI\%#2106\fP, \fI\%#3914\fP).
.IP \(bu 2
New versions of ncurses (6.0 and up) wipe terminal scrollback buffers
with certain commands; the \fBC\-l\fP binding tries to avoid this
(\fI\%#2855\fP).
.IP \(bu 2
Some systems’ \fBsu\fP implementations do not set the \fBUSER\fP
environment variable; it is now reset for root users (\fI\%#3916\fP).
.IP \(bu 2
Under terminals which support it, bracketed paste is enabled,
escaping problematic characters for security and convience (\fI\%#3871\fP).
Inside single quotes (\fB\(aq\fP), single quotes and backslashes in pasted
text are escaped (\fI\%#967\fP). The \fBfish_clipboard_paste\fP function (bound
to \fBC\-v\fP by default) is still the recommended pasting method where
possible as it includes this functionality and more.
.IP \(bu 2
Processes in pipelines are no longer signalled as soon as one command
in the pipeline has completed (\fI\%#1926\fP). This behaviour matches other
shells mre closely.
.IP \(bu 2
All functions requiring Python work with whichever version of Python
is installed (\fI\%#3970\fP). Python 3 is preferred, but Python 2.6 remains
the minimum version required.
.IP \(bu 2
The color of the cancellation character can be controlled by the
\fBfish_color_cancel\fP variable (\fI\%#3963\fP).
.IP \(bu 2
Added completions for:
.IP \(bu 2
\fBcaddy\fP (\fI\%#4008\fP)
.IP \(bu 2
\fBcastnow\fP (\fI\%#3744\fP)
.IP \(bu 2
\fBclimate\fP (\fI\%#3760\fP)
.IP \(bu 2
\fBflatpak\fP
.IP \(bu 2
\fBgradle\fP (\fI\%#3859\fP)
.IP \(bu 2
\fBgsettings\fP (\fI\%#4001\fP)
.IP \(bu 2
\fBhelm\fP (\fI\%#3829\fP)
.IP \(bu 2
\fBi3\-msg\fP (\fI\%#3787\fP)
.IP \(bu 2
\fBipset\fP (\fI\%#3924\fP)
.IP \(bu 2
\fBjq\fP (\fI\%#3804\fP)
.IP \(bu 2
\fBlight\fP (\fI\%#3752\fP)
.IP \(bu 2
\fBminikube\fP (\fI\%#3778\fP)
.IP \(bu 2
\fBmocha\fP (\fI\%#3828\fP)
.IP \(bu 2
\fBmkdosfs\fP (\fI\%#4017\fP)
.IP \(bu 2
\fBpv\fP (\fI\%#3773\fP)
.IP \(bu 2
\fBsetsid\fP (\fI\%#3791\fP)
.IP \(bu 2
\fBterraform\fP (\fI\%#3960\fP)
.IP \(bu 2
\fBusermod\fP (\fI\%#3775\fP)
.IP \(bu 2
\fBxinput\fP
.IP \(bu 2
\fByarn\fP (\fI\%#3816\fP)
.IP \(bu 2
Improved completions for \fBadb\fP (\fI\%#3853\fP), \fBapt\fP (\fI\%#3771\fP), \fBbzr\fP
(\fI\%#3769\fP), \fBdconf\fP, \fBgit\fP (including \fI\%#3743\fP), \fBgrep\fP (\fI\%#3789\fP),
\fBgo\fP (\fI\%#3789\fP), \fBhelp\fP (\fI\%#3789\fP), \fBhg\fP (\fI\%#3975\fP), \fBhtop\fP (\fI\%#3789\fP),
\fBkillall\fP (\fI\%#3996\fP), \fBlua\fP, \fBman\fP (\fI\%#3762\fP), \fBmount\fP (\fI\%#3764\fP &
\fI\%#3841\fP), \fBobnam\fP (\fI\%#3924\fP), \fBperl\fP (\fI\%#3856\fP), \fBportmaster\fP (\fI\%#3950\fP),
\fBpython\fP (\fI\%#3840\fP), \fBssh\fP (\fI\%#3781\fP), \fBscp\fP (\fI\%#3781\fP), \fBsystemctl\fP
(\fI\%#3757\fP) and \fBudisks\fP (\fI\%#3764\fP).
.UNINDENT

.sp
.ce
----

.ce 0
.sp
.SS fish 2.5.0 (released February 3, 2017)
.sp
There are no major changes between 2.5b1 and 2.5.0. If you are upgrading
from version 2.4.0 or before, please also review the release notes for
2.5b1 (included below).
.SS Notable fixes and improvements
.INDENT 0.0
.IP \(bu 2
The Home, End, Insert, Delete, Page Up and Page Down keys work in
Vi\-style key bindings (\fI\%#3731\fP).
.UNINDENT

.sp
.ce
----

.ce 0
.sp
.SS fish 2.5b1 (released January 14, 2017)
.SS Platform Changes
.sp
Starting with version 2.5, fish requires a more up\-to\-date version of
C++, specifically C++11 (from 2011). This affects some older platforms:
.SS Linux
.sp
For users building from source, GCC’s g++ 4.8 or later, or LLVM’s clang
3.3 or later, are known to work. Older platforms may require a newer
compiler installed.
.sp
Unfortunately, because of the complexity of the toolchain, binary
packages are no longer published by the fish\-shell developers for the
following platforms:
.INDENT 0.0
.IP \(bu 2
Red Hat Enterprise Linux and CentOS 5 & 6 for 64\-bit builds
.IP \(bu 2
Ubuntu 12.04 (EoLTS April 2017)
.IP \(bu 2
Debian 7 (EoLTS May 2018)
.UNINDENT
.sp
Installing newer version of fish on these systems will require building
from source.
.SS OS X SnowLeopard
.sp
Starting with version 2.5, fish requires a C++11 standard library on OS
X 10.6 (“SnowLeopard”). If this library is not installed, you will see
this error: \fBdyld: Library not loaded: /usr/lib/libc++.1.dylib\fP
.sp
MacPorts is the easiest way to obtain this library. After installing the
SnowLeopard MacPorts release from the install page, run:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
sudo port \-v install libcxx
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Now fish should launch successfully. (Please open an issue if it does
not.)
.sp
This is only necessary on 10.6. OS X 10.7 and later include the required
library by default.
.SS Other significant changes
.INDENT 0.0
.IP \(bu 2
Attempting to exit with running processes in the background produces
a warning, then signals them to terminate if a second attempt to exit
is made. This brings the behaviour for running background processes
into line with stopped processes. (\fI\%#3497\fP)
.IP \(bu 2
\fBrandom\fP can now have start, stop and step values specified, or the
new \fBchoice\fP subcommand can be used to pick an argument from a list
(\fI\%#3619\fP).
.IP \(bu 2
A new key bindings preset, \fBfish_hybrid_key_bindings\fP, including
all the Emacs\-style and Vi\-style bindings, which behaves like
\fBfish_vi_key_bindings\fP in fish 2.3.0 (\fI\%#3556\fP).
.IP \(bu 2
\fBfunction\fP now returns an error when called with invalid options,
rather than defining the function anyway (\fI\%#3574\fP). This was a
regression present in fish 2.3 and 2.4.0.
.IP \(bu 2
fish no longer prints a warning when it identifies a running instance
of an old version (2.1.0 and earlier). Changes to universal variables
may not propagate between these old versions and 2.5b1.
.IP \(bu 2
Improved compatiblity with Android (\fI\%#3585\fP), MSYS/mingw (\fI\%#2360\fP), and
Solaris (\fI\%#3456\fP, \fI\%#3340\fP).
.IP \(bu 2
Like other shells, the \fBtest\fP builting now returns an error for
numeric operations on invalid integers (\fI\%#3346\fP, \fI\%#3581\fP).
.IP \(bu 2
\fBcomplete\fP no longer recognises \fB\-\-authoritative\fP and
\fB\-\-unauthoritative\fP options, and they are marked as obsolete.
.IP \(bu 2
\fBstatus\fP accepts subcommands, and should be used like
\fBstatus is\-interactive\fP\&. The old options continue to be supported
for the foreseeable future (\fI\%#3526\fP), although only one subcommand or
option can be specified at a time.
.IP \(bu 2
Selection mode (used with “begin\-selection”) no longer selects a
character the cursor does not move over (\fI\%#3684\fP).
.IP \(bu 2
List indexes are handled better, and a bit more liberally in some
cases (\fBecho $PATH[1 .. 3]\fP is now valid) (\fI\%#3579\fP).
.IP \(bu 2
The \fBfish_mode_prompt\fP function is now simply a stub around
\fBfish_default_mode_prompt\fP, which allows the mode prompt to be
included more easily in customised prompt functions (\fI\%#3641\fP).
.UNINDENT
.SS Notable fixes and improvements
.INDENT 0.0
.IP \(bu 2
\fBalias\fP, run without options or arguments, lists all defined
aliases, and aliases now include a description in the function
signature that identifies them.
.IP \(bu 2
\fBcomplete\fP accepts empty strings as descriptions (\fI\%#3557\fP).
.IP \(bu 2
\fBcommand\fP accepts \fB\-q\fP/\fB\-\-quiet\fP in combination with
\fB\-\-search\fP (\fI\%#3591\fP), providing a simple way of checking whether a
command exists in scripts.
.IP \(bu 2
Abbreviations can now be renamed with
\fBabbr \-\-rename OLD_KEY NEW_KEY\fP (\fI\%#3610\fP).
.IP \(bu 2
The command synopses printed by \fB\-\-help\fP options work better with
copying and pasting (\fI\%#2673\fP).
.IP \(bu 2
\fBhelp\fP launches the browser specified by the
\fB$fish_help_browser variable\fP if it is set (\fI\%#3131\fP).
.IP \(bu 2
History merging could lose items under certain circumstances and is
now fixed (\fI\%#3496\fP).
.IP \(bu 2
The \fB$status\fP variable is now set to 123 when a syntactically
invalid command is entered (\fI\%#3616\fP).
.IP \(bu 2
Exiting fish now signals all background processes to terminate, not
just stopped jobs (\fI\%#3497\fP).
.IP \(bu 2
A new \fBprompt_hostname\fP function which prints a hostname suitable
for use in prompts (\fI\%#3482\fP).
.IP \(bu 2
The \fB__fish_man_page\fP function (bound to Alt\-h by default) now
tries to recognize subcommands (e.g.\ \fBgit add\fP will now open the
“git\-add” man page) (\fI\%#3678\fP).
.IP \(bu 2
A new function \fBedit_command_buffer\fP (bound to Alt\-e & Alt\-v by
default) to edit the command buffer in an external editor (\fI\%#1215\fP,
\fI\%#3627\fP).
.IP \(bu 2
\fBset_color\fP now supports italics (\fB\-\-italics\fP), dim (\fB\-\-dim\fP)
and reverse (\fB\-\-reverse\fP) modes (\fI\%#3650\fP).
.IP \(bu 2
Filesystems with very slow locking (eg incorrectly\-configured NFS)
will no longer slow fish down (\fI\%#685\fP).
.IP \(bu 2
Improved completions for \fBapt\fP (\fI\%#3695\fP), \fBfusermount\fP (\fI\%#3642\fP),
\fBmake\fP (\fI\%#3628\fP), \fBnetctl\-auto\fP (\fI\%#3378\fP), \fBnmcli\fP (\fI\%#3648\fP),
\fBpygmentize\fP (\fI\%#3378\fP), and \fBtar\fP (\fI\%#3719\fP).
.IP \(bu 2
Added completions for:
.IP \(bu 2
\fBVBoxHeadless\fP (\fI\%#3378\fP)
.IP \(bu 2
\fBVBoxSDL\fP (\fI\%#3378\fP)
.IP \(bu 2
\fBbase64\fP (\fI\%#3378\fP)
.IP \(bu 2
\fBcaffeinate\fP (\fI\%#3524\fP)
.IP \(bu 2
\fBdconf\fP (\fI\%#3638\fP)
.IP \(bu 2
\fBdig\fP (\fI\%#3495\fP)
.IP \(bu 2
\fBdpkg\-reconfigure\fP (\fI\%#3521\fP & \fI\%#3522\fP)
.IP \(bu 2
\fBfeh\fP (\fI\%#3378\fP)
.IP \(bu 2
\fBlaunchctl\fP (\fI\%#3682\fP)
.IP \(bu 2
\fBlxc\fP (\fI\%#3554\fP & \fI\%#3564\fP),
.IP \(bu 2
\fBmddiagnose\fP (\fI\%#3524\fP)
.IP \(bu 2
\fBmdfind\fP (\fI\%#3524\fP)
.IP \(bu 2
\fBmdimport\fP (\fI\%#3524\fP)
.IP \(bu 2
\fBmdls\fP (\fI\%#3524\fP)
.IP \(bu 2
\fBmdutil\fP (\fI\%#3524\fP)
.IP \(bu 2
\fBmkvextract\fP (\fI\%#3492\fP)
.IP \(bu 2
\fBnvram\fP (\fI\%#3524\fP)
.IP \(bu 2
\fBobjdump\fP (\fI\%#3378\fP)
.IP \(bu 2
\fBsysbench\fP (\fI\%#3491\fP)
.IP \(bu 2
\fBtmutil\fP (\fI\%#3524\fP)
.UNINDENT

.sp
.ce
----

.ce 0
.sp
.SS fish 2.4.0 (released November 8, 2016)
.sp
There are no major changes between 2.4b1 and 2.4.0.
.SS Notable fixes and improvements
.INDENT 0.0
.IP \(bu 2
The documentation is now generated properly and with the correct
version identifier.
.IP \(bu 2
Automatic cursor changes are now only enabled on the subset of XTerm
versions known to support them, resolving a problem where older
versions printed garbage to the terminal before and after every
prompt (\fI\%#3499\fP).
.IP \(bu 2
Improved the title set in Apple Terminal.app.
.IP \(bu 2
Added completions for \fBdefaults\fP and improved completions for
\fBdiskutil\fP (\fI\%#3478\fP).
.UNINDENT

.sp
.ce
----

.ce 0
.sp
.SS fish 2.4b1 (released October 18, 2016)
.SS Significant changes
.INDENT 0.0
.IP \(bu 2
The clipboard integration has been revamped with explicit bindings.
The killring commands no longer copy from, or paste to, the X11
clipboard \- use the new copy (\fBC\-x\fP) and paste (\fBC\-v\fP) bindings
instead. The clipboard is now available on OS X as well as systems
using X11 (e.g.\ Linux). (\fI\%#3061\fP)
.IP \(bu 2
\fBhistory\fP uses subcommands (\fBhistory delete\fP) rather than options
(\fBhistory \-\-delete\fP) for its actions (\fI\%#3367\fP). You can no longer
specify multiple actions via flags (e.g.,
\fBhistory \-\-delete \-\-save something\fP).
.IP \(bu 2
New \fBhistory\fP options have been added, including \fB\-\-max=n\fP to
limit the number of history entries, \fB\-\-show\-time\fP option to show
timestamps (\fI\%#3175\fP, \fI\%#3244\fP), and \fB\-\-null\fP to null terminate history
entries in the search output.
.IP \(bu 2
\fBhistory search\fP is now case\-insensitive by default (which also
affects \fBhistory delete\fP) (\fI\%#3236\fP).
.IP \(bu 2
\fBhistory delete\fP now correctly handles multiline commands (\fI\%#31\fP).
.IP \(bu 2
Vi\-style bindings no longer include all of the default emacs\-style
bindings; instead, they share some definitions (\fI\%#3068\fP).
.IP \(bu 2
If there is no locale set in the environment, various known system
configuration files will be checked for a default. If no locale can
be found, \fBen_US\-UTF.8\fP will be used (\fI\%#277\fP).
.IP \(bu 2
A number followed by a caret (e.g.\ \fB5^\fP) is no longer treated as a
redirection (\fI\%#1873\fP).
.IP \(bu 2
The \fB$version\fP special variable can be overwritten, so that it can
be used for other purposes if required.
.UNINDENT
.SS Notable fixes and improvements
.INDENT 0.0
.IP \(bu 2
The \fBfish_realpath\fP builtin has been renamed to \fBrealpath\fP and
made compatible with GNU \fBrealpath\fP when run without arguments
(\fI\%#3400\fP). It is used only for systems without a \fBrealpath\fP or
\fBgrealpath\fP utility (\fI\%#3374\fP).
.IP \(bu 2
Improved color handling on terminals/consoles with 8\-16 colors,
particularly the use of bright named color (\fI\%#3176\fP, \fI\%#3260\fP).
.IP \(bu 2
\fBfish_indent\fP can now read from files given as arguments, rather
than just standard input (\fI\%#3037\fP).
.IP \(bu 2
Fuzzy tab completions behave in a less surprising manner (\fI\%#3090\fP,
\fI\%#3211\fP).
.IP \(bu 2
\fBjobs\fP should only print its header line once (\fI\%#3127\fP).
.IP \(bu 2
Wildcards in redirections are highlighted appropriately (\fI\%#2789\fP).
.IP \(bu 2
Suggestions will be offered more often, like after removing
characters (\fI\%#3069\fP).
.IP \(bu 2
\fBhistory \-\-merge\fP now correctly interleaves items in chronological
order (\fI\%#2312\fP).
.IP \(bu 2
Options for \fBfish_indent\fP have been aligned with the other binaries
\- in particular, \fB\-d\fP now means \fB\-\-debug\fP\&. The \fB\-\-dump\fP option
has been renamed to \fB\-\-dump\-parse\-tree\fP (\fI\%#3191\fP).
.IP \(bu 2
The display of bindings in the Web\-based configuration has been
greatly improved (\fI\%#3325\fP), as has the rendering of prompts (\fI\%#2924\fP).
.IP \(bu 2
fish should no longer hang using 100% CPU in the C locale (\fI\%#3214\fP).
.IP \(bu 2
A bug in FreeBSD 11 & 12, Dragonfly BSD & illumos prevented fish from
working correctly on these platforms under UTF\-8 locales; fish now
avoids the buggy behaviour (\fI\%#3050\fP).
.IP \(bu 2
Prompts which show git repository information (via
\fB__fish_git_prompt\fP) are faster in large repositories (\fI\%#3294\fP) and
slow filesystems (\fI\%#3083\fP).
.IP \(bu 2
fish 2.3.0 reintroduced a problem where the greeting was printed even
when using \fBread\fP; this has been corrected again (\fI\%#3261\fP).
.IP \(bu 2
Vi mode changes the cursor depending on the current mode (\fI\%#3215\fP).
.IP \(bu 2
Command lines with escaped space characters at the end tab\-complete
correctly (\fI\%#2447\fP).
.IP \(bu 2
Added completions for:
.INDENT 2.0
.IP \(bu 2
\fBarcanist\fP (\fI\%#3256\fP)
.IP \(bu 2
\fBconnmanctl\fP (\fI\%#3419\fP)
.IP \(bu 2
\fBfiglet\fP (\fI\%#3378\fP)
.IP \(bu 2
\fBmdbook\fP (\fI\%#3378\fP)
.IP \(bu 2
\fBninja\fP (\fI\%#3415\fP)
.IP \(bu 2
\fBp4\fP, the Perforce client (\fI\%#3314\fP)
.IP \(bu 2
\fBpygmentize\fP (\fI\%#3378\fP)
.IP \(bu 2
\fBranger\fP (\fI\%#3378\fP)
.UNINDENT
.IP \(bu 2
Improved completions for \fBaura\fP (\fI\%#3297\fP), \fBabbr\fP (\fI\%#3267\fP), \fBbrew\fP
(\fI\%#3309\fP), \fBchown\fP (\fI\%#3380\fP, \fI\%#3383\fP),\fBcygport\fP (\fI\%#3392\fP), \fBgit\fP
(\fI\%#3274\fP, \fI\%#3226\fP, \fI\%#3225\fP, \fI\%#3094\fP, \fI\%#3087\fP, \fI\%#3035\fP, \fI\%#3021\fP, \fI\%#2982\fP, \fI\%#3230\fP),
\fBkill\fP & \fBpkill\fP (\fI\%#3200\fP), \fBscreen\fP (\fI\%#3271\fP), \fBwget\fP (\fI\%#3470\fP),
and \fBxz\fP (\fI\%#3378\fP).
.IP \(bu 2
Distributors, packagers and developers will notice that the build
process produces more succinct output by default; use \fBmake V=1\fP to
get verbose output (\fI\%#3248\fP).
.IP \(bu 2
Improved compatibility with minor platforms including musl (\fI\%#2988\fP),
Cygwin (\fI\%#2993\fP), Android (\fI\%#3441\fP, \fI\%#3442\fP), Haiku (\fI\%#3322\fP) and Solaris .
.UNINDENT

.sp
.ce
----

.ce 0
.sp
.SS fish 2.3.1 (released July 3, 2016)
.sp
This is a functionality and bugfix release. This release does not
contain all the changes to fish since the last release, but fixes a
number of issues directly affecting users at present and includes a
small number of new features.
.SS Significant changes
.INDENT 0.0
.IP \(bu 2
A new \fBfish_key_reader\fP binary for decoding interactive keypresses
(\fI\%#2991\fP).
.IP \(bu 2
\fBfish_mode_prompt\fP has been updated to reflect the changes in the
way the Vi input mode is set up (\fI\%#3067\fP), making this more reliable.
.IP \(bu 2
\fBfish_config\fP can now properly be launched from the OS X app bundle
(\fI\%#3140\fP).
.UNINDENT
.SS Notable fixes and improvements
.INDENT 0.0
.IP \(bu 2
Extra lines were sometimes inserted into the output under Windows
(Cygwin and Microsoft Windows Subsystem for Linux) due to TTY
timestamps not being updated (\fI\%#2859\fP).
.IP \(bu 2
The \fBstring\fP builtin’s \fBmatch\fP mode now handles the combination
of \fB\-rnv\fP (match, invert and count) correctly (\fI\%#3098\fP).
.IP \(bu 2
Improvements to TTY special character handling (\fI\%#3064\fP), locale
handling (\fI\%#3124\fP) and terminal environment variable handling (\fI\%#3060\fP).
.IP \(bu 2
Work towards handling the terminal modes for external commands
launched from initialisation files (\fI\%#2980\fP).
.IP \(bu 2
Ease the upgrade path from fish 2.2.0 and before by warning users to
restart fish if the \fBstring\fP builtin is not available (\fI\%#3057\fP).
.IP \(bu 2
\fBtype \-a\fP now syntax\-colorizes function source output.
.IP \(bu 2
Added completions for \fBalsamixer\fP, \fBgodoc\fP, \fBgofmt\fP,
\fBgoimports\fP, \fBgorename\fP, \fBlscpu\fP, \fBmkdir\fP, \fBmodinfo\fP,
\fBnetctl\-auto\fP, \fBpoweroff\fP, \fBtermite\fP, \fBudisksctl\fP and \fBxz\fP
(\fI\%#3123\fP).
.IP \(bu 2
Improved completions for \fBapt\fP (\fI\%#3097\fP), \fBaura\fP (\fI\%#3102\fP),\fBgit\fP
(\fI\%#3114\fP), \fBnpm\fP (\fI\%#3158\fP), \fBstring\fP and \fBsuspend\fP (\fI\%#3154\fP).
.UNINDENT

.sp
.ce
----

.ce 0
.sp
.SS fish 2.3.0 (released May 20, 2016)
.sp
There are no significant changes between 2.3.0 and 2.3b2.
.SS Other notable fixes and improvements
.INDENT 0.0
.IP \(bu 2
\fBabbr\fP now allows non\-letter keys (\fI\%#2996\fP).
.IP \(bu 2
Define a few extra colours on first start (\fI\%#2987\fP).
.IP \(bu 2
Multiple documentation updates.
.IP \(bu 2
Added completions for rmmod (\fI\%#3007\fP).
.IP \(bu 2
Improved completions for git (\fI\%#2998\fP).
.UNINDENT
.SS Known issues
.INDENT 0.0
.IP \(bu 2
Interactive commands started from fish configuration files or from
the \fB\-c\fP option may, under certain circumstances, be started with
incorrect terminal modes and fail to behave as expected. A fix is
planned but requires further testing (\fI\%#2619\fP).
.UNINDENT

.sp
.ce
----

.ce 0
.sp
.SS fish 2.3b2 (released May 5, 2016)
.SS Significant changes
.INDENT 0.0
.IP \(bu 2
A new \fBfish_realpath\fP builtin and associated function to allow the
use of \fBrealpath\fP even on those platforms that don’t ship an
appropriate command (\fI\%#2932\fP).
.IP \(bu 2
Alt\-# toggles the current command line between commented and
uncommented states, making it easy to save a command in history
without executing it.
.IP \(bu 2
The \fBfish_vi_mode\fP function is now deprecated in favour of
\fBfish_vi_key_bindings\fP\&.
.UNINDENT
.SS Other notable fixes and improvements
.INDENT 0.0
.IP \(bu 2
Fix the build on Cygwin (\fI\%#2952\fP) and RedHat Enterprise Linux/CentOS 5
(\fI\%#2955\fP).
.IP \(bu 2
Avoid confusing the terminal line driver with non\-printing characters
in \fBfish_title\fP (\fI\%#2453\fP).
.IP \(bu 2
Improved completions for busctl, git (\fI\%#2585\fP, \fI\%#2879\fP, \fI\%#2984\fP), and
netctl.
.UNINDENT

.sp
.ce
----

.ce 0
.sp
.SS fish 2.3b1 (released April 19, 2016)
.SS Significant Changes
.INDENT 0.0
.IP \(bu 2
A new \fBstring\fP builtin to handle… strings! This builtin will
measure, split, search and replace text strings, including using
regular expressions. It can also be used to turn lists into plain
strings using \fBjoin\fP\&. \fBstring\fP can be used in place of \fBsed\fP,
\fBgrep\fP, \fBtr\fP, \fBcut\fP, and \fBawk\fP in many situations. (\fI\%#2296\fP)
.IP \(bu 2
Allow using escape as the Meta modifier key, by waiting after seeing
an escape character wait up to 300ms for an additional character.
This is consistent with readline (e.g.\ bash) and can be configured
via the \fBfish_escape_delay_ms variable\fP\&. This allows using escape
as the Meta modifier. (\fI\%#1356\fP)
.IP \(bu 2
Add new directories for vendor functions and configuration snippets
(\fI\%#2500\fP)
.IP \(bu 2
A new \fBfish_realpath\fP builtin and associated \fBrealpath\fP function
should allow scripts to resolve path names via \fBrealpath\fP
regardless of whether there is an external command of that name;
albeit with some limitations. See the associated documentation.
.UNINDENT
.SS Backward\-incompatible changes
.INDENT 0.0
.IP \(bu 2
Unmatched globs will now cause an error, except when used with
\fBfor\fP, \fBset\fP or \fBcount\fP (\fI\%#2719\fP)
.IP \(bu 2
\fBand\fP and \fBor\fP will now bind to the closest \fBif\fP or \fBwhile\fP,
allowing compound conditions without \fBbegin\fP and \fBend\fP (\fI\%#1428\fP)
.IP \(bu 2
\fBset \-ql\fP now searches up to function scope for variables (\fI\%#2502\fP)
.IP \(bu 2
\fBstatus \-f\fP will now behave the same when run as the main script or
using \fBsource\fP (\fI\%#2643\fP)
.IP \(bu 2
\fBsource\fP no longer puts the file name in \fB$argv\fP if no arguments
are given (\fI\%#139\fP)
.IP \(bu 2
History files are stored under the \fBXDG_DATA_HOME\fP hierarchy (by
default, in \fB~/.local/share\fP), and existing history will be moved
on first use (\fI\%#744\fP)
.UNINDENT
.SS Other notable fixes and improvements
.INDENT 0.0
.IP \(bu 2
Fish no longer silences errors in config.fish (\fI\%#2702\fP)
.IP \(bu 2
Directory autosuggestions will now descend as far as possible if
there is only one child directory (\fI\%#2531\fP)
.IP \(bu 2
Add support for bright colors (\fI\%#1464\fP)
.IP \(bu 2
Allow Ctrl\-J (\fIcj\fP) to be bound separately from Ctrl\-M
(\fIcm\fP) (\fI\%#217\fP)
.IP \(bu 2
psub now has a “\-s”/“–suffix” option to name the temporary file with
that suffix
.IP \(bu 2
Enable 24\-bit colors on select terminals (\fI\%#2495\fP)
.IP \(bu 2
Support for SVN status in the prompt (\fI\%#2582\fP)
.IP \(bu 2
Mercurial and SVN support have been added to the Classic + Git (now
Classic + VCS) prompt (via the new __fish_vcs_prompt function)
(\fI\%#2592\fP)
.IP \(bu 2
export now handles variables with a “=” in the value (\fI\%#2403\fP)
.IP \(bu 2
New completions for:
.INDENT 2.0
.IP \(bu 2
alsactl
.IP \(bu 2
Archlinux’s asp, makepkg
.IP \(bu 2
Atom’s apm (\fI\%#2390\fP)
.IP \(bu 2
entr \- the “Event Notify Test Runner” (\fI\%#2265\fP)
.IP \(bu 2
Fedora’s dnf (\fI\%#2638\fP)
.IP \(bu 2
OSX diskutil (\fI\%#2738\fP)
.IP \(bu 2
pkgng (\fI\%#2395\fP)
.IP \(bu 2
pulseaudio’s pacmd and pactl
.IP \(bu 2
rust’s rustc and cargo (\fI\%#2409\fP)
.IP \(bu 2
sysctl (\fI\%#2214\fP)
.IP \(bu 2
systemd’s machinectl (\fI\%#2158\fP), busctl (\fI\%#2144\fP), systemd\-nspawn,
systemd\-analyze, localectl, timedatectl
.IP \(bu 2
and more
.UNINDENT
.IP \(bu 2
Fish no longer has a function called sgrep, freeing it for user
customization (\fI\%#2245\fP)
.IP \(bu 2
A rewrite of the completions for cd, fixing a few bugs (\fI\%#2299\fP, \fI\%#2300\fP,
\fI\%#562\fP)
.IP \(bu 2
Linux VTs now run in a simplified mode to avoid issues (\fI\%#2311\fP)
.IP \(bu 2
The vi\-bindings now inherit from the emacs bindings
.IP \(bu 2
Fish will also execute \fBfish_user_key_bindings\fP when in vi\-mode
.IP \(bu 2
\fBfunced\fP will now also check $VISUAL (\fI\%#2268\fP)
.IP \(bu 2
A new \fBsuspend\fP function (\fI\%#2269\fP)
.IP \(bu 2
Subcommand completion now works better with split /usr (\fI\%#2141\fP)
.IP \(bu 2
The command\-not\-found\-handler can now be overridden by defining a
function called \fB__fish_command_not_found_handler\fP in config.fish
(\fI\%#2332\fP)
.IP \(bu 2
A few fixes to the Sorin theme
.IP \(bu 2
PWD shortening in the prompt can now be configured via the
\fBfish_prompt_pwd_dir_length\fP variable, set to the length per path
component (\fI\%#2473\fP)
.IP \(bu 2
fish no longer requires \fB/etc/fish/config.fish\fP to correctly start,
and now ships a skeleton file that only contains some documentation
(\fI\%#2799\fP)
.UNINDENT

.sp
.ce
----

.ce 0
.sp
.SS fish 2.2.0 (released July 12, 2015)
.SS Significant changes
.INDENT 0.0
.IP \(bu 2
Abbreviations: the new \fBabbr\fP command allows for
interactively\-expanded abbreviations, allowing quick access to
frequently\-used commands (\fI\%#731\fP).
.IP \(bu 2
Vi mode: run \fBfish_vi_mode\fP to switch fish into the key bindings
and prompt familiar to users of the Vi editor (\fI\%#65\fP).
.IP \(bu 2
New inline and interactive pager, which will be familiar to users of
zsh (\fI\%#291\fP).
.IP \(bu 2
Underlying architectural changes: the \fBfishd\fP universal variable
server has been removed as it was a source of many bugs and security
problems. Notably, old fish sessions will not be able to communicate
universal variable changes with new fish sessions. For best results,
restart all running instances of \fBfish\fP\&.
.IP \(bu 2
The web\-based configuration tool has been redesigned, featuring a
prompt theme chooser and other improvements.
.IP \(bu 2
New German, Brazilian Portuguese, and Chinese translations.
.UNINDENT
.SS Backward\-incompatible changes
.sp
These are kept to a minimum, but either change undocumented features or
are too hard to use in their existing forms. These changes may break
existing scripts.
.INDENT 0.0
.IP \(bu 2
\fBcommandline\fP no longer interprets functions “in reverse”, instead
behaving as expected (\fI\%#1567\fP).
.IP \(bu 2
The previously\-undocumented \fBCMD_DURATION\fP variable is now set for
all commands and contains the execution time of the last command in
milliseconds (\fI\%#1585\fP). It is no longer exported to other commands
(\fI\%#1896\fP).
.IP \(bu 2
\fBif\fP / \fBelse\fP conditional statements now return values consistent
with the Single Unix Specification, like other shells (\fI\%#1443\fP).
.IP \(bu 2
A new “top\-level” local scope has been added, allowing local
variables declared on the commandline to be visible to subsequent
commands. (\fI\%#1908\fP)
.UNINDENT
.SS Other notable fixes and improvements
.INDENT 0.0
.IP \(bu 2
New documentation design (\fI\%#1662\fP), which requires a Doxygen version
1.8.7 or newer to build.
.IP \(bu 2
Fish now defines a default directory for other packages to provide
completions. By default this is
\fB/usr/share/fish/vendor\-completions.d\fP; on systems with
\fBpkgconfig\fP installed this path is discoverable with
\fBpkg\-config \-\-variable completionsdir fish\fP\&.
.IP \(bu 2
A new parser removes many bugs; all existing syntax should keep
working.
.IP \(bu 2
New \fBfish_preexec\fP and \fBfish_postexec\fP events are fired before
and after job execution respectively (\fI\%#1549\fP).
.IP \(bu 2
Unmatched wildcards no longer prevent a job from running. Wildcards
used interactively will still print an error, but the job will
proceed and the wildcard will expand to zero arguments (\fI\%#1482\fP).
.IP \(bu 2
The \fB\&.\fP command is deprecated and the \fBsource\fP command is
preferred (\fI\%#310\fP).
.IP \(bu 2
\fBbind\fP supports “bind modes”, which allows bindings to be set for a
particular named mode, to support the implementation of Vi mode.
.IP \(bu 2
A new \fBexport\fP alias, which behaves like other shells (\fI\%#1833\fP).
.IP \(bu 2
\fBcommand\fP has a new \fB\-\-search\fP option to print the name of the
disk file that would be executed, like other shells’ \fBcommand \-v\fP
(\fI\%#1540\fP).
.IP \(bu 2
\fBcommandline\fP has a new \fB\-\-paging\-mode\fP option to support the new
pager.
.IP \(bu 2
\fBcomplete\fP has a new \fB\-\-wraps\fP option, which allows a command to
(recursively) inherit the completions of a wrapped command (\fI\%#393\fP),
and \fBcomplete \-e\fP now correctly erases completions (\fI\%#380\fP).
.IP \(bu 2
Completions are now generated from manual pages by default on the
first run of fish (\fI\%#997\fP).
.IP \(bu 2
\fBfish_indent\fP can now produce colorized (\fB\-\-ansi\fP) and HTML
(\fB\-\-html\fP) output (\fI\%#1827\fP).
.IP \(bu 2
\fBfunctions \-\-erase\fP now prevents autoloaded functions from being
reloaded in the current session.
.IP \(bu 2
\fBhistory\fP has a new \fB\-\-merge\fP option, to incorporate history from
other sessions into the current session (\fI\%#825\fP).
.IP \(bu 2
\fBjobs\fP returns 1 if there are no active jobs (\fI\%#1484\fP).
.IP \(bu 2
\fBread\fP has several new options:
.IP \(bu 2
\fB\-\-array\fP to break input into an array (\fI\%#1540\fP)
.IP \(bu 2
\fB\-\-null\fP to break lines on NUL characters rather than newlines
(\fI\%#1694\fP)
.IP \(bu 2
\fB\-\-nchars\fP to read a specific number of characters (\fI\%#1616\fP)
.IP \(bu 2
\fB\-\-right\-prompt\fP to display a right\-hand\-side prompt during
interactive read (\fI\%#1698\fP).
.IP \(bu 2
\fBtype\fP has a new \fB\-q\fP option to suppress output (\fI\%#1540\fP and, like
other shells, \fBtype \-a\fP now prints all matches for a command
(\fI\%#261\fP).
.IP \(bu 2
Pressing F1 now shows the manual page for the current command
(\fI\%#1063\fP).
.IP \(bu 2
\fBfish_title\fP functions have access to the arguments of the
currently running argument as \fB$argv[1]\fP (\fI\%#1542\fP).
.IP \(bu 2
The OS command\-not\-found handler is used on Arch Linux (\fI\%#1925\fP), nixOS
(\fI\%#1852\fP), openSUSE and Fedora (\fI\%#1280\fP).
.IP \(bu 2
\fBAlt\fP+\fB\&.\fP searches backwards in the token history, mapping to
the same behavior as inserting the last argument of the previous
command, like other shells (\fI\%#89\fP).
.IP \(bu 2
The \fBSHLVL\fP environment variable is incremented correctly (\fI\%#1634\fP &
\fI\%#1693\fP).
.IP \(bu 2
Added completions for \fBadb\fP (\fI\%#1165\fP & \fI\%#1211\fP), \fBapt\fP (\fI\%#2018\fP),
\fBaura\fP (\fI\%#1292\fP), \fBcomposer\fP (\fI\%#1607\fP), \fBcygport\fP (\fI\%#1841\fP),
\fBdropbox\fP (\fI\%#1533\fP), \fBelixir\fP (\fI\%#1167\fP), \fBfossil\fP, \fBheroku\fP
(\fI\%#1790\fP), \fBiex\fP (\fI\%#1167\fP), \fBkitchen\fP (\fI\%#2000\fP), \fBnix\fP (\fI\%#1167\fP),
\fBnode\fP/\fBnpm\fP (\fI\%#1566\fP), \fBopam\fP (\fI\%#1615\fP), \fBsetfacl\fP (\fI\%#1752\fP),
\fBtmuxinator\fP (\fI\%#1863\fP), and \fByast2\fP (\fI\%#1739\fP).
.IP \(bu 2
Improved completions for \fBbrew\fP (\fI\%#1090\fP & \fI\%#1810\fP), \fBbundler\fP
(\fI\%#1779\fP), \fBcd\fP (\fI\%#1135\fP), \fBemerge\fP (\fI\%#1840\fP),\fBgit\fP (\fI\%#1680\fP, \fI\%#1834\fP &
\fI\%#1951\fP), \fBman\fP (\fI\%#960\fP), \fBmodprobe\fP (\fI\%#1124\fP), \fBpacman\fP (\fI\%#1292\fP),
\fBrpm\fP (\fI\%#1236\fP), \fBrsync\fP (\fI\%#1872\fP), \fBscp\fP (\fI\%#1145\fP), \fBssh\fP (\fI\%#1234\fP),
\fBsshfs\fP (\fI\%#1268\fP), \fBsystemctl\fP (\fI\%#1462\fP, \fI\%#1950\fP & \fI\%#1972\fP), \fBtmux\fP
(\fI\%#1853\fP), \fBvagrant\fP (\fI\%#1748\fP), \fByum\fP (\fI\%#1269\fP), and \fBzypper\fP
(\fI\%#1787\fP).
.UNINDENT

.sp
.ce
----

.ce 0
.sp
.SS fish 2.1.2 (released Feb 24, 2015)
.sp
fish 2.1.2 contains a workaround for a filesystem bug in Mac OS X
Yosemite. \fI\%#1859\fP
.sp
Specifically, after installing fish 2.1.1 and then rebooting, “Verify
Disk” in Disk Utility will report “Invalid number of hard links.” We
don’t have any reports of data loss or other adverse consequences. fish
2.1.2 avoids triggering the bug, but does not repair an already affected
filesystem. To repair the filesystem, you can boot into Recovery Mode
and use Repair Disk from Disk Utility. Linux and versions of OS X prior
to Yosemite are believed to be unaffected.
.sp
There are no other changes in this release.

.sp
.ce
----

.ce 0
.sp
.SS fish 2.1.1 (released September 26, 2014)
.sp
\fBImportant:\fP if you are upgrading, stop all running instances of
\fBfishd\fP as soon as possible after installing this release; it will be
restarted automatically. On most systems, there will be no further
action required. Note that some environments (where \fBXDG_RUNTIME_DIR\fP
is set), such as Fedora 20, will require a restart of all running fish
processes before universal variables work as intended.
.sp
Distributors are highly encouraged to call \fBkillall fishd\fP,
\fBpkill fishd\fP or similar in installation scripts, or to warn their
users to do so.
.SS Security fixes
.INDENT 0.0
.IP \(bu 2
The fish_config web interface now uses an authentication token to
protect requests and only responds to requests from the local machine
with this token, preventing a remote code execution attack. (closing
CVE\-2014\-2914). \fI\%#1438\fP
.IP \(bu 2
\fBpsub\fP and \fBfunced\fP are no longer vulnerable to attacks which
allow local privilege escalation and data tampering (closing
CVE\-2014\-2906 and CVE\-2014\-3856). \fI\%#1437\fP
.IP \(bu 2
\fBfishd\fP uses a secure path for its socket, preventing a local
privilege escalation attack (closing CVE\-2014\-2905). \fI\%#1436\fP
.IP \(bu 2
\fB__fish_print_packages\fP is no longer vulnerable to attacks which
would allow local privilege escalation and data tampering (closing
CVE\-2014\-3219). \fI\%#1440\fP
.UNINDENT
.SS Other fixes
.INDENT 0.0
.IP \(bu 2
\fBfishd\fP now ignores SIGPIPE, fixing crashes using tools like GNU
Parallel and which occurred more often as a result of the other
\fBfishd\fP changes. \fI\%#1084\fP & \fI\%#1690\fP
.UNINDENT

.sp
.ce
----

.ce 0
.sp
.SS fish 2.1.0
.SS Significant Changes
.INDENT 0.0
.IP \(bu 2
\fBTab completions will fuzzy\-match files.\fP \fI\%#568\fP
.sp
When tab\-completing a file, fish will first attempt prefix matches
(\fBfoo\fP matches \fBfoobar\fP), then substring matches (\fBooba\fP
matches \fBfoobar\fP), and lastly subsequence matches (\fBfbr\fP matches
\fBfoobar\fP). For example, in a directory with files foo1.txt,
foo2.txt, foo3.txt…, you can type only the numeric part and hit tab
to fill in the rest.
.sp
This feature is implemented for files and executables. It is not yet
implemented for options (like \fB\-\-foobar\fP), and not yet implemented
across path components (like \fB/u/l/b\fP to match \fB/usr/local/bin\fP).
.IP \(bu 2
\fBRedirections now work better across pipelines.\fP \fI\%#110\fP, \fI\%#877\fP
.sp
In particular, you can pipe stderr and stdout together, for example,
with \fBcmd ^&1 | tee log.txt\fP, or the more familiar
\fBcmd 2>&1 | tee log.txt\fP\&.
.IP \(bu 2
\fBA single \(ga\(ga%\(ga\(ga now expands to the last job backgrounded.\fP \fI\%#1008\fP
.sp
Previously, a single \fB%\fP would pid\-expand to either all
backgrounded jobs, or all jobs owned by your user. Now it expands to
the last job backgrounded. If no job is in the background, it will
fail to expand. In particular, \fBfg %\fP can be used to put the most
recent background job in the foreground.
.UNINDENT
.SS Other Notable Fixes
.INDENT 0.0
.IP \(bu 2
alt\-U and alt+C now uppercase and capitalize words, respectively.
\fI\%#995\fP
.IP \(bu 2
VTE based terminals should now know the working directory. \fI\%#906\fP
.IP \(bu 2
The autotools build now works on Mavericks. \fI\%#968\fP
.IP \(bu 2
The end\-of\-line binding (ctrl+E) now accepts autosuggestions. \fI\%#932\fP
.IP \(bu 2
Directories in \fB/etc/paths\fP (used on OS X) are now prepended
instead of appended, similar to other shells. \fI\%#927\fP
.IP \(bu 2
Option\-right\-arrow (used for partial autosuggestion completion) now
works on iTerm2. \fI\%#920\fP
.IP \(bu 2
Tab completions now work properly within nested subcommands. \fI\%#913\fP
.IP \(bu 2
\fBprintf\fP supports \fB\ee\fP, the escape character. \fI\%#910\fP
.IP \(bu 2
\fBfish_config history\fP no longer shows duplicate items. \fI\%#900\fP
.IP \(bu 2
\fB$fish_user_paths\fP is now prepended to $PATH instead of appended.
\fI\%#888\fP
.IP \(bu 2
Jobs complete when all processes complete. \fI\%#876\fP
.sp
For example, in previous versions of fish, \fBsleep 10 | echo Done\fP
returns control immediately, because echo does not read from stdin.
Now it does not complete until sleep exits (presumably after 10
seconds).
.IP \(bu 2
Better error reporting for square brackets. \fI\%#875\fP
.IP \(bu 2
fish no longer tries to add \fB/bin\fP to \fB$PATH\fP unless PATH is
totally empty. \fI\%#852\fP
.IP \(bu 2
History token substitution (alt\-up) now works correctly inside
subshells. \fI\%#833\fP
.IP \(bu 2
Flow control is now disabled, freeing up ctrl\-S and ctrl\-Q for other
uses. \fI\%#814\fP
.IP \(bu 2
sh\-style variable setting like \fBfoo=bar\fP now produces better error
messages. \fI\%#809\fP
.IP \(bu 2
Commands with wildcards no longer produce autosuggestions. \fI\%#785\fP
.IP \(bu 2
funced no longer freaks out when supplied with no arguments. \fI\%#780\fP
.IP \(bu 2
fish.app now works correctly in a directory containing spaces. \fI\%#774\fP
.IP \(bu 2
Tab completion cycling no longer occasionally fails to repaint. \fI\%#765\fP
.IP \(bu 2
Comments now work in eval’d strings. \fI\%#684\fP
.IP \(bu 2
History search (up\-arrow) now shows the item matching the
autosuggestion, if that autosuggestion was truncated. \fI\%#650\fP
.IP \(bu 2
Ctrl\-T now transposes characters, as in other shells. \fI\%#128\fP
.UNINDENT

.sp
.ce
----

.ce 0
.sp
.SS fish 2.0.0
.SS Significant Changes
.INDENT 0.0
.IP \(bu 2
\fBCommand substitutions now modify \(ga\(ga$status\(ga\(ga :issue:\(ga547\(ga.\fP Previously the
exit status of command substitutions (like \fB(pwd)\fP) was ignored;
however now it modifies $status. Furthermore, the \fBset\fP command now
only sets $status on failure; it is untouched on success. This allows
for the following pattern:
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
if set python_path (which python)
   ...
end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Because set does not modify $status on success, the if branch
effectively tests whether \fBwhich\fP succeeded, and if so, whether the
\fBset\fP also succeeded.
.IP \(bu 2
Improvements to PATH handling. There is a new variable, fish_user_paths,
which can be set universally, and whose contents are appended to
$PATH \fI\%#527\fP
.INDENT 2.0
.IP \(bu 2
/etc/paths and /etc/paths.d are now respected on OS X
.IP \(bu 2
fish no longer modifies $PATH to find its own binaries
.UNINDENT
.IP \(bu 2
\fBLong lines no longer use ellipsis for line breaks\fP, and copy and
paste should no longer include a newline even if the line was broken
\fI\%#300\fP
.IP \(bu 2
\fBNew syntax for index ranges\fP (sometimes known as “slices”) \fI\%#212\fP
.IP \(bu 2
\fBfish now supports an \(ga\(gaelse if\(ga\(ga statement\fP \fI\%#134\fP
.IP \(bu 2
\fBProcess and pid completion now works on OS X\fP \fI\%#129\fP
.IP \(bu 2
\fBfish is now relocatable\fP, and no longer depends on compiled\-in
paths \fI\%#125\fP
.IP \(bu 2
\fBfish now supports a right prompt (RPROMPT)\fP through the
fish_right_prompt function \fI\%#80\fP
.IP \(bu 2
\fBfish now uses posix_spawn instead of fork when possible\fP, which is
much faster on BSD and OS X \fI\%#11\fP
.UNINDENT
.SS Other Notable Fixes
.INDENT 0.0
.IP \(bu 2
Updated VCS completions (darcs, cvs, svn, etc.)
.IP \(bu 2
Avoid calling getcwd on the main thread, as it can hang \fI\%#696\fP
.IP \(bu 2
Control\-D (forward delete) no longer stops at a period \fI\%#667\fP
.IP \(bu 2
Completions for many new commands
.IP \(bu 2
fish now respects rxvt’s unique keybindings \fI\%#657\fP
.IP \(bu 2
xsel is no longer built as part of fish. It will still be invoked if
installed separately \fI\%#633\fP
.IP \(bu 2
__fish_filter_mime no longer spews \fI\%#628\fP
.IP \(bu 2
The –no\-execute option to fish no longer falls over when reaching the
end of a block \fI\%#624\fP
.IP \(bu 2
fish_config knows how to find fish even if it’s not in the $PATH \fI\%#621\fP
.IP \(bu 2
A leading space now prevents writing to history, as is done in bash
and zsh \fI\%#615\fP
.IP \(bu 2
Hitting enter after a backslash only goes to a new line if it is
followed by whitespace or the end of the line \fI\%#613\fP
.IP \(bu 2
printf is now a builtin \fI\%#611\fP
.IP \(bu 2
Event handlers should no longer fire if signals are blocked \fI\%#608\fP
.IP \(bu 2
set_color is now a builtin \fI\%#578\fP
.IP \(bu 2
man page completions are now located in a new generated_completions
directory, instead of your completions directory \fI\%#576\fP
.IP \(bu 2
tab now clears autosuggestions \fI\%#561\fP
.IP \(bu 2
tab completion from within a pair of quotes now attempts to
“appropriate” the closing quote \fI\%#552\fP
.IP \(bu 2
$EDITOR can now be a list: for example, \fBset EDITOR gvim \-f\fP) \fI\%#541\fP
.IP \(bu 2
\fBcase\fP bodies are now indented \fI\%#530\fP
.IP \(bu 2
The profile switch \fB\-p\fP no longer crashes \fI\%#517\fP
.IP \(bu 2
You can now control\-C out of \fBread\fP \fI\%#516\fP
.IP \(bu 2
\fBumask\fP is now functional on OS X \fI\%#515\fP
.IP \(bu 2
Avoid calling getpwnam on the main thread, as it can hang \fI\%#512\fP
.IP \(bu 2
Alt\-F or Alt\-right\-arrow (Option\-F or option\-right\-arrow) now accepts
one word of an autosuggestion \fI\%#435\fP
.IP \(bu 2
Setting fish as your login shell no longer kills OpenSUSE \fI\%#367\fP
.IP \(bu 2
Backslashes now join lines, instead of creating multiple commands
\fI\%#347\fP
.IP \(bu 2
echo now implements the \-e flag to interpret escapes \fI\%#337\fP
.IP \(bu 2
When the last token in the user’s input contains capital letters, use
its case in preference to that of the autosuggestion \fI\%#335\fP
.IP \(bu 2
Descriptions now have their own muted color \fI\%#279\fP
.IP \(bu 2
Wildcards beginning with a . (for example, \fBls .*\fP) no longer match
. and .. \fI\%#270\fP
.IP \(bu 2
Recursive wildcards now handle symlink loops \fI\%#268\fP
.IP \(bu 2
You can now delete history items from the fish_config web interface
\fI\%#250\fP
.IP \(bu 2
The OS X build now weak links \fBwcsdup\fP and \fBwcscasecmp\fP \fI\%#240\fP
.IP \(bu 2
fish now saves and restores the process group, which prevents certain
processes from being erroneously reported as stopped \fI\%#197\fP
.IP \(bu 2
funced now takes an editor option \fI\%#187\fP
.IP \(bu 2
Alternating row colors are available in fish pager through
\fBfish_pager_color_secondary\fP \fI\%#186\fP
.IP \(bu 2
Universal variable values are now stored based on your MAC address,
not your hostname \fI\%#183\fP
.IP \(bu 2
The caret ^ now only does a stderr redirection if it is the first
character of a token, making git users happy \fI\%#168\fP
.IP \(bu 2
Autosuggestions will no longer cause line wrapping \fI\%#167\fP
.IP \(bu 2
Better handling of Unicode combining characters \fI\%#155\fP
.IP \(bu 2
fish SIGHUPs processes more often \fI\%#138\fP
.IP \(bu 2
fish no longer causes \fBsudo\fP to ask for a password every time
.IP \(bu 2
fish behaves better under Midnight Commander \fI\%#121\fP
.IP \(bu 2
\fBset \-e\fP no longer crashes \fI\%#100\fP
.IP \(bu 2
fish now will automatically import history from bash, if there is no
fish history \fI\%#66\fP
.IP \(bu 2
Backslashed\-newlines inside quoted strings now behave more
intuitively \fI\%#52\fP
.IP \(bu 2
Tab titles should be shown correctly in iTerm2 \fI\%#47\fP
.IP \(bu 2
scp remote path completion now sometimes works \fI\%#42\fP
.IP \(bu 2
The \fBread\fP builtin no longer shows autosuggestions \fI\%#29\fP
.IP \(bu 2
Custom key bindings can now be set via the \fBfish_user_key_bindings\fP
function \fI\%#21\fP
.IP \(bu 2
All Python scripts now run correctly under both Python 2 and Python 3
\fI\%#14\fP
.IP \(bu 2
The “accept autosuggestion” key can now be configured \fI\%#19\fP
.IP \(bu 2
Autosuggestions will no longer suggest invalid commands \fI\%#6\fP
.UNINDENT

.sp
.ce
----

.ce 0
.sp
.SS fishfish Beta r2
.SS Bug Fixes
.INDENT 0.0
.IP \(bu 2
\fBImplicit cd\fP is back, for paths that start with one or two dots, a
slash, or a tilde.
.IP \(bu 2
\fBOverrides of default functions should be fixed.\fP The “internalized
scripts” feature is disabled for now.
.IP \(bu 2
\fBDisabled delayed suspend.\fP This is a strange job\-control feature
of BSD systems, including OS X. Disabling it frees up Control Y for
other purposes; in particular, for yank, which now works on OS X.
.IP \(bu 2
\fBfish_indent is fixed.\fP In particular, the \fBfunced\fP and
\fBfuncsave\fP functions work again.
.IP \(bu 2
A SIGTERM now ends the whole execution stack again (resolving \fI\%#13\fP).
.IP \(bu 2
Bumped the __fish_config_interactive version number so the default
fish_color_autosuggestion kicks in.
.IP \(bu 2
fish_config better handles combined term256 and classic colors like
“555 yellow”.
.UNINDENT
.SS New Features
.INDENT 0.0
.IP \(bu 2
\fBA history builtin\fP, and associated interactive function that
enables deleting history items. Example usage: * Print all history
items beginning with echo: \fBhistory \-\-prefix echo\fP * Print all
history items containing foo: \fBhistory \-\-contains foo\fP *
Interactively delete some items containing foo:
\fBhistory \-\-delete \-\-contains foo\fP
.UNINDENT
.sp
Credit to @siteshwar for implementation. Thanks @siteshwar!

.sp
.ce
----

.ce 0
.sp
.SS fishfish Beta r1
.SS Scripting
.INDENT 0.0
.IP \(bu 2
No changes! All existing fish scripts, config files, completions,
etc. from trunk should continue to work.
.UNINDENT
.SS New Features
.INDENT 0.0
.IP \(bu 2
\fBAutosuggestions\fP\&. Think URL fields in browsers. When you type a
command, fish will suggest the rest of the command after the cursor,
in a muted gray when possible. You can accept the suggestion with the
right arrow key or Ctrl\-F. Suggestions come from command history,
completions, and some custom code for cd; there’s a lot of potential
for improvement here. The suggestions are computed on a background
pthread, so they never slow down your typing. The autosuggestion
feature is incredible. I miss it dearly every time I use anything
else.
.IP \(bu 2
\fBterm256 support\fP where available, specifically modern xterms and
OS X Lion. You can specify colors the old way (‘set_color cyan’) or
by specifying RGB hex values (‘set_color FF3333’); fish will pick the
closest supported color. Some xterms do not advertise term256 support
either in the $TERM or terminfo max_colors field, but nevertheless
support it. For that reason, fish will default into using it on any
xterm (but it can be disabled with an environment variable).
.IP \(bu 2
\fBWeb\-based configuration\fP page. There is a new function
‘fish_config’. This spins up a simple Python web server and opens a
browser window to it. From this web page, you can set your shell
colors and view your functions, variables, and history; all changes
apply immediately to all running shells. Eventually all configuration
ought to be supported via this mechanism (but in addition to, not
instead of, command line mechanisms).
.IP \(bu 2
\fBMan page completions\fP\&. There is a new function
‘fish_update_completions’. This function reads all the man1 files
from your manpath, removes the roff formatting, parses them to find
the commands and options, and outputs fish completions into
~/.config/fish/completions. It won’t overwrite existing completion
files (except ones that it generated itself).
.UNINDENT
.SS Programmatic Changes
.INDENT 0.0
.IP \(bu 2
fish is now entirely in C++. I have no particular love for C++, but
it provides a ready memory\-model to replace halloc. We’ve made an
effort to keep it to a sane and portable subset (no C++11, no boost,
no going crazy with templates or smart pointers), but we do use the
STL and a little tr1.
.IP \(bu 2
halloc is entirely gone, replaced by normal C++ ownership semantics.
If you don’t know what halloc is, well, now you have two reasons to
be happy.
.IP \(bu 2
All the crufty C data structures are entirely gone. array_list_t,
priority_queue_t, hash_table_t, string_buffer_t have been removed and
replaced by STL equivalents like std::vector, std::map, and
std::wstring. A lot of the string handling now uses std::wstring
instead of wchar_t *
.IP \(bu 2
fish now spawns pthreads for tasks like syntax highlighting that
require blocking I/O.
.IP \(bu 2
History has been completely rewritten. History files now use an
extensible YAML\-style syntax. History “merging” (multiple shells
writing to the same history file) now works better. There is now a
maximum history length of about 250k items (256 * 1024).
.IP \(bu 2
The parser has been “instanced,” so you can now create more than one.
.IP \(bu 2
Total #LoC has shrunk slightly even with the new features.
.UNINDENT
.SS Performance
.INDENT 0.0
.IP \(bu 2
fish now runs syntax highlighting in a background thread, so typing
commands is always responsive even on slow filesystems.
.IP \(bu 2
echo, test, and pwd are now builtins, which eliminates many forks.
.IP \(bu 2
The files in share/functions and share/completions now get
‘internalized’ into C strings that get compiled in with fish. This
substantially reduces the number of files touched at startup. A
consequence is that you cannot change these functions without
recompiling, but often other functions depend on these “standard”
functions, so changing them is perhaps not a good idea anyways.
.UNINDENT
.sp
Here are some system call counts for launching and then exiting fish
with the default configuration, on OS X. The first column is fish trunk,
the next column is with our changes, and the last column is bash for
comparison. This data was collected via dtrace.
.sp
before
.sp
after
.sp
bash
.sp
open
.sp
9
.sp
4
.sp
5
.sp
fork
.sp
28
.sp
14
.sp
0
.sp
stat
.sp
131
.sp
85
.sp
11
.sp
lstat
.sp
670
.sp
0
.sp
0
.sp
read
.sp
332
.sp
80
.sp
4
.sp
write
.sp
172
.sp
149
.sp
0
.sp
The large number of forks relative to bash are due to fish’s insanely
expensive default prompt, which is unchanged in my version. If we switch
to a prompt comparable to bash’s (lame) default, the forks drop to 16
with trunk, 4 after our changes.
.sp
The large reduction in lstat() numbers is due to fish no longer needing
to call ttyname() on OS X.
.sp
We’ve got some work to do to be as lean as bash, but we’re on the right
track.
.SS License
.SS License for fish
.sp
\fBfish\fP Copyright © 2005\-2009 Axel Liljencrantz, 2009\-2021 fish\-shell contributors. \fBfish\fP is released under the GNU General Public License, version 2.
.sp
\fBfish\fP includes other code licensed under the GNU General Public License, version 2, including GNU \fBprintf\fP\&.
.sp
Copyright © 1990\-2007 Free Software Foundation, Inc. Printf (from GNU Coreutils 6.9) is released under the GNU General Public License, version 2.
.sp
The GNU General Public License agreement follows.
.sp
\fBGNU GENERAL PUBLIC LICENSE\fP
.sp
Version 2, June 1991
.INDENT 0.0
.INDENT 3.5
Copyright (C) 1989, 1991 Free Software Foundation, Inc.
51 Franklin Street, Fifth Floor, Boston, MA  02110\-1301, USA
.sp
Everyone is permitted to copy and distribute verbatim copies
of this license document, but changing it is not allowed.
.UNINDENT
.UNINDENT
.sp
\fBPreamble\fP
.sp
The licenses for most software are designed to take away your freedom to share and change it.  By contrast, the GNU General Public License is intended to guarantee your freedom to share and change free software \- to make sure the software is free for all its users.  This General Public License applies to most of the Free Software Foundation\(aqs software and to any other program whose authors commit to using it.  (Some other Free Software Foundation software is covered by the GNU Library General Public License instead.)  You can apply it to your programs, too.
.sp
When we speak of free software, we are referring to freedom, not price.  Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for this service if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs; and that you know you can do these things.
.sp
To protect your rights, we need to make restrictions that forbid anyone to deny you these rights or to ask you to surrender the rights. These restrictions translate to certain responsibilities for you if you distribute copies of the software, or if you modify it.
.sp
For example, if you distribute copies of such a program, whether gratis or for a fee, you must give the recipients all the rights that you have.  You must make sure that they, too, receive or can get the source code.  And you must show them these terms so they know their rights.
.sp
We protect your rights with two steps: (1) copyright the software, and (2) offer you this license which gives you legal permission to copy, distribute and/or modify the software.
.sp
Also, for each author\(aqs protection and ours, we want to make certain that everyone understands that there is no warranty for this free software.  If the software is modified by someone else and passed on, we want its recipients to know that what they have is not the original, so that any problems introduced by others will not reflect on the original authors\(aq reputations.
.sp
Finally, any free program is threatened constantly by software patents.  We wish to avoid the danger that redistributors of a free program will individually obtain patent licenses, in effect making the program proprietary. To prevent this, we have made it clear that any patent must be licensed for everyone\(aqs free use or not licensed at all.
.sp
The precise terms and conditions for copying, distribution and modification follow.
.sp
\fBTERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\fP
.INDENT 0.0
.IP \(bu 2
This License applies to any program or other work which contains a notice placed by the copyright holder saying it may be distributed under the terms of this General Public License.  The "Program", below, refers to any such program or work, and a "work based on the Program" means either the Program or any derivative work under copyright law: that is to say, a work containing the Program or a portion of it, either verbatim or with modifications and/or translated into another language.  (Hereinafter, translation is included without limitation in the term "modification".) Each licensee is addressed as "you".
.UNINDENT
.INDENT 0.0
.INDENT 3.5
Activities other than copying, distribution and modification are not covered by this License; they are outside its scope.  The act of running the Program is not restricted, and the output from the Program is covered only if its contents constitute a work based on the Program (independent of having been made by running the Program). Whether that is true depends on what the Program does.
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP 1. 3
You may copy and distribute verbatim copies of the Program\(aqs source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice and disclaimer of warranty; keep intact all the notices that refer to this License and to the absence of any warranty; and give any other recipients of the Program a copy of this License along with the Program.
.UNINDENT
.INDENT 0.0
.INDENT 3.5
You may charge a fee for the physical act of transferring a copy, and you may at your option offer warranty protection in exchange for a fee.
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP 2. 3
You may modify your copy or copies of the Program or any portion of it, thus forming a work based on the Program, and copy and distribute such modifications or work under the terms of Section 1 above, provided that you also meet all of these conditions:
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
You must cause the modified files to carry prominent notices stating that you changed the files and the date of any change.
.IP \(bu 2
You must cause any work that you distribute or publish, that in whole or in part contains or is derived from the Program or any part thereof, to be licensed as a whole at no charge to all third parties under the terms of this License.
.IP \(bu 2
If the modified program normally reads commands interactively when run, you must cause it, when started running for such interactive use in the most ordinary way, to print or display an announcement including an appropriate copyright notice and a notice that there is no warranty (or else, saying that you provide a warranty) and that users may redistribute the program under these conditions, and telling the user how to view a copy of this License. (Exception: if the Program itself is interactive but does not normally print such an announcement, your work based on the Program is not required to print an announcement.)
.UNINDENT
.sp
These requirements apply to the modified work as a whole.  If identifiable sections of that work are not derived from the Program, and can be reasonably considered independent and separate works in themselves, then this License, and its terms, do not apply to those sections when you distribute them as separate works.  But when you distribute the same sections as part of a whole which is a work based on the Program, the distribution of the whole must be on the terms of this License, whose permissions for other licensees extend to the entire whole, and thus to each and every part regardless of who wrote it.
.sp
Thus, it is not the intent of this section to claim rights or contest your rights to work written entirely by you; rather, the intent is to exercise the right to control the distribution of derivative or collective works based on the Program.
.sp
In addition, mere aggregation of another work not based on the Program with the Program (or with a work based on the Program) on a volume of a storage or distribution medium does not bring the other work under the scope of this License.
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP 3. 3
You may copy and distribute the Program (or a work based on it, under Section 2) in object code or executable form under the terms of Sections 1 and 2 above provided that you also do one of the following:
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
Accompany it with the complete corresponding machine\-readable source code, which must be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange; or,
.IP \(bu 2
Accompany it with a written offer, valid for at least three years, to give any third party, for a charge no more than your cost of physically performing source distribution, a complete machine\-readable copy of the corresponding source code, to be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange; or,
.IP \(bu 2
Accompany it with the information you received as to the offer to distribute corresponding source code.  (This alternative is allowed only for noncommercial distribution and only if you received the program in object code or executable form with such an offer, in accord with Subsection b above.)
.UNINDENT
.sp
The source code for a work means the preferred form of the work for making modifications to it.  For an executable work, complete source code means all the source code for all modules it contains, plus any associated interface definition files, plus the scripts used to control compilation and installation of the executable.  However, as a special exception, the source code distributed need not include anything that is normally distributed (in either source or binary form) with the major components (compiler, kernel, and so on) of the operating system on which the executable runs, unless that component itself accompanies the executable.
.sp
If distribution of executable or object code is made by offering access to copy from a designated place, then offering equivalent access to copy the source code from the same place counts as distribution of the source code, even though third parties are not compelled to copy the source along with the object code.
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP 4. 3
You may not copy, modify, sublicense, or distribute the Program except as expressly provided under this License. Any attempt otherwise to copy, modify, sublicense or distribute the Program is void, and will automatically terminate your rights under this License. However, parties who have received copies, or rights, from you under this License will not have their licenses terminated so long as such parties remain in full compliance.
.IP 5. 3
You are not required to accept this License, since you have not signed it. However, nothing else grants you permission to modify or distribute the Program or its derivative works.  These actions are prohibited by law if you do not accept this License.  Therefore, by modifying or distributing the Program (or any work based on the Program), you indicate your acceptance of this License to do so, and all its terms and conditions for copying, distributing or modifying the Program or works based on it.
.IP 6. 3
Each time you redistribute the Program (or any work based on the Program), the recipient automatically receives a license from the original licensor to copy, distribute or modify the Program subject to these terms and conditions. You may not impose any further restrictions on the recipients\(aq exercise of the rights granted herein. You are not responsible for enforcing compliance by third parties to this License.
.IP 7. 3
If, as a consequence of a court judgment or allegation of patent infringement or for any other reason (not limited to patent issues), conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License.  If you cannot distribute so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not distribute the Program at all. For example, if a patent license would not permit royalty\-free redistribution of the Program by all those who receive copies directly or indirectly through you, then the only way you could satisfy both it and this License would be to refrain entirely from distribution of the Program.
.UNINDENT
.INDENT 0.0
.INDENT 3.5
If any portion of this section is held invalid or unenforceable under any particular circumstance, the balance of the section is intended to apply and the section as a whole is intended to apply in other circumstances.
.sp
It is not the purpose of this section to induce you to infringe any patents or other property right claims or to contest validity of any such claims; this section has the sole purpose of protecting the integrity of the free software distribution system, which is implemented by public license practices.  Many people have made generous contributions to the wide range of software distributed through that system in reliance on consistent application of that system; it is up to the author/donor to decide if he or she is willing to distribute software through any other system and a licensee cannot impose that choice.
.sp
This section is intended to make thoroughly clear what is believed to be a consequence of the rest of this License.
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP 8. 3
If the distribution and/or use of the Program is restricted in certain countries either by patents or by copyrighted interfaces, the original copyright holder who places the Program under this License may add an explicit geographical distribution limitation excluding those countries, so that distribution is permitted only in or among countries not thus excluded.  In such case, this License incorporates the limitation as if written in the body of this License.
.IP 9. 3
The Free Software Foundation may publish revised and/or new versions of the General Public License from time to time.  Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.
.UNINDENT
.INDENT 0.0
.INDENT 3.5
Each version is given a distinguishing version number.  If the Program specifies a version number of this License which applies to it and "any later version", you have the option of following the terms and conditions either of that version or of any later version published by the Free Software Foundation.  If the Program does not specify a version number of this License, you may choose any version ever published by the Free Software Foundation.
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP 10. 3
If you wish to incorporate parts of the Program into other free programs whose distribution conditions are different, write to the author to ask for permission.  For software which is copyrighted by the Free Software Foundation, write to the Free Software Foundation; we sometimes make exceptions for this.  Our decision will be guided by the two goals of preserving the free status of all derivatives of our free software and of promoting the sharing and reuse of software generally.
.UNINDENT
.INDENT 0.0
.INDENT 3.5
\fBNO WARRANTY\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP 11. 4
BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.
.IP 12. 4
IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
.UNINDENT
.SS License for PCRE2
.sp
\fBfish\fP contains code from the [PCRE2](\fI\%http://www.pcre.org\fP) library to support regular expressions. This code, created by Philip Hazel, is distributed under the terms of the BSD license. Copyright © 1997\-2015 University of Cambridge.
.sp
The BSD license follows.
.sp
Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
.IP \(bu 2
Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
.IP \(bu 2
Neither the name of the University of Cambridge nor the names of any contributors may be used to endorse or promote products derived from this software without specific prior written permission.
.UNINDENT
.UNINDENT
.UNINDENT
.sp
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.SS License for the Python docs theme
.sp
In doc_src/python_docs_theme/, taken from \fI\%https://pypi.org/project/python\-docs\-theme/2020.1/\fP\&.
.sp
\fBPYTHON SOFTWARE FOUNDATION LICENSE VERSION 2\fP
.sp
1. This LICENSE AGREEMENT is between the Python Software Foundation
("PSF"), and the Individual or Organization ("Licensee") accessing and
otherwise using this software ("Python") in source or binary form and
its associated documentation.
.sp
2. Subject to the terms and conditions of this License Agreement, PSF hereby
grants Licensee a nonexclusive, royalty\-free, world\-wide license to reproduce,
analyze, test, perform and/or display publicly, prepare derivative works,
distribute, and otherwise use Python alone or in any derivative version,
provided, however, that PSF\(aqs License Agreement and PSF\(aqs notice of copyright,
i.e., "Copyright (c) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,
2011, 2012, 2013, 2014, 2015, 2016, 2017 Python Software Foundation; All Rights
Reserved" are retained in Python alone or in any derivative version prepared by
Licensee.
.sp
3. In the event Licensee prepares a derivative work that is based on
or incorporates Python or any part thereof, and wants to make
the derivative work available to others as provided herein, then
Licensee hereby agrees to include in any such work a brief summary of
the changes made to Python.
.sp
4. PSF is making Python available to Licensee on an "AS IS"
basis.  PSF MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR
IMPLIED.  BY WAY OF EXAMPLE, BUT NOT LIMITATION, PSF MAKES NO AND
DISCLAIMS ANY REPRESENTATION OR WARRANTY OF MERCHANTABILITY OR FITNESS
FOR ANY PARTICULAR PURPOSE OR THAT THE USE OF PYTHON WILL NOT
INFRINGE ANY THIRD PARTY RIGHTS.
.sp
5. PSF SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF PYTHON
FOR ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS
A RESULT OF MODIFYING, DISTRIBUTING, OR OTHERWISE USING PYTHON,
OR ANY DERIVATIVE THEREOF, EVEN IF ADVISED OF THE POSSIBILITY THEREOF.
.sp
6. This License Agreement will automatically terminate upon a material
breach of its terms and conditions.
.sp
7. Nothing in this License Agreement shall be deemed to create any
relationship of agency, partnership, or joint venture between PSF and
Licensee.  This License Agreement does not grant permission to use PSF
trademarks or trade name in a trademark sense to endorse or promote
products or services of Licensee, or any third party.
.sp
8. By copying, installing or otherwise using Python, Licensee
agrees to be bound by the terms and conditions of this License
Agreement.
.SH AUTHOR
fish-shell developers
.SH COPYRIGHT
2021, fish-shell developers
.\" Generated by docutils manpage writer.
.
